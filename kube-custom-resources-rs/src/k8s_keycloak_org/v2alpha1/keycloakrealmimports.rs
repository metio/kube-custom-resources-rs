// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/keycloak/keycloak-k8s-resources/k8s.keycloak.org/v2alpha1/keycloakrealmimports.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "k8s.keycloak.org", version = "v2alpha1", kind = "KeycloakRealmImport", plural = "keycloakrealmimports")]
#[kube(namespaced)]
#[kube(status = "KeycloakRealmImportStatus")]
#[kube(schema = "disabled")]
pub struct KeycloakRealmImportSpec {
    /// The name of the Keycloak CR to reference, in the same namespace.
    #[serde(rename = "keycloakCRName")]
    pub keycloak_cr_name: String,
    /// The RealmRepresentation to import into Keycloak.
    pub realm: KeycloakRealmImportRealm,
}

/// The RealmRepresentation to import into Keycloak.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessCodeLifespan")]
    pub access_code_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessCodeLifespanLogin")]
    pub access_code_lifespan_login: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessCodeLifespanUserAction")]
    pub access_code_lifespan_user_action: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenLifespan")]
    pub access_token_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenLifespanForImplicitFlow")]
    pub access_token_lifespan_for_implicit_flow: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountTheme")]
    pub account_theme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionTokenGeneratedByAdminLifespan")]
    pub action_token_generated_by_admin_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionTokenGeneratedByUserLifespan")]
    pub action_token_generated_by_user_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminEventsDetailsEnabled")]
    pub admin_events_details_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminEventsEnabled")]
    pub admin_events_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTheme")]
    pub admin_theme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationScopeMappings")]
    pub application_scope_mappings: Option<BTreeMap<String, KeycloakRealmImportRealmApplicationScopeMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub applications: Option<Vec<KeycloakRealmImportRealmApplications>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationFlows")]
    pub authentication_flows: Option<Vec<KeycloakRealmImportRealmAuthenticationFlows>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticatorConfig")]
    pub authenticator_config: Option<Vec<KeycloakRealmImportRealmAuthenticatorConfig>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "browserFlow")]
    pub browser_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "browserSecurityHeaders")]
    pub browser_security_headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bruteForceProtected")]
    pub brute_force_protected: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuthenticationFlow")]
    pub client_authentication_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientOfflineSessionIdleTimeout")]
    pub client_offline_session_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientOfflineSessionMaxLifespan")]
    pub client_offline_session_max_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicies")]
    pub client_policies: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientProfiles")]
    pub client_profiles: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientScopeMappings")]
    pub client_scope_mappings: Option<BTreeMap<String, KeycloakRealmImportRealmClientScopeMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientScopes")]
    pub client_scopes: Option<Vec<KeycloakRealmImportRealmClientScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSessionIdleTimeout")]
    pub client_session_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSessionMaxLifespan")]
    pub client_session_max_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplates")]
    pub client_templates: Option<Vec<KeycloakRealmImportRealmClientTemplates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clients: Option<Vec<KeycloakRealmImportRealmClients>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSecret")]
    pub code_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<BTreeMap<String, KeycloakRealmImportRealmComponents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDefaultClientScopes")]
    pub default_default_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultGroups")]
    pub default_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLocale")]
    pub default_locale: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultOptionalClientScopes")]
    pub default_optional_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRole")]
    pub default_role: Option<KeycloakRealmImportRealmDefaultRole>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRoles")]
    pub default_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSignatureAlgorithm")]
    pub default_signature_algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directGrantFlow")]
    pub direct_grant_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayNameHtml")]
    pub display_name_html: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerAuthenticationFlow")]
    pub docker_authentication_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "duplicateEmailsAllowed")]
    pub duplicate_emails_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "editUsernameAllowed")]
    pub edit_username_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailTheme")]
    pub email_theme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledEventTypes")]
    pub enabled_event_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventsEnabled")]
    pub events_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventsExpiration")]
    pub events_expiration: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventsListeners")]
    pub events_listeners: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureFactor")]
    pub failure_factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedUsers")]
    pub federated_users: Option<Vec<KeycloakRealmImportRealmFederatedUsers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<KeycloakRealmImportRealmGroups>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderMappers")]
    pub identity_provider_mappers: Option<Vec<KeycloakRealmImportRealmIdentityProviderMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviders")]
    pub identity_providers: Option<Vec<KeycloakRealmImportRealmIdentityProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internationalizationEnabled")]
    pub internationalization_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keycloakVersion")]
    pub keycloak_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loginTheme")]
    pub login_theme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loginWithEmailAllowed")]
    pub login_with_email_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDeltaTimeSeconds")]
    pub max_delta_time_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFailureWaitSeconds")]
    pub max_failure_wait_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumQuickLoginWaitSeconds")]
    pub minimum_quick_login_wait_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2DeviceCodeLifespan")]
    pub oauth2_device_code_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2DevicePollingInterval")]
    pub oauth2_device_polling_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthClients")]
    pub oauth_clients: Option<Vec<KeycloakRealmImportRealmOauthClients>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineSessionIdleTimeout")]
    pub offline_session_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineSessionMaxLifespan")]
    pub offline_session_max_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offlineSessionMaxLifespanEnabled")]
    pub offline_session_max_lifespan_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyAlgorithm")]
    pub otp_policy_algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyDigits")]
    pub otp_policy_digits: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyInitialCounter")]
    pub otp_policy_initial_counter: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyLookAheadWindow")]
    pub otp_policy_look_ahead_window: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyPeriod")]
    pub otp_policy_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpPolicyType")]
    pub otp_policy_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otpSupportedApplications")]
    pub otp_supported_applications: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordCredentialGrantAllowed")]
    pub password_credential_grant_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordPolicy")]
    pub password_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permanentLockout")]
    pub permanent_lockout: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmProtocolMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    pub public_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quickLoginCheckMilliSeconds")]
    pub quick_login_check_milli_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "realmCacheEnabled")]
    pub realm_cache_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refreshTokenMaxReuse")]
    pub refresh_token_max_reuse: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationAllowed")]
    pub registration_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationEmailAsUsername")]
    pub registration_email_as_username: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationFlow")]
    pub registration_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rememberMe")]
    pub remember_me: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredActions")]
    pub required_actions: Option<Vec<KeycloakRealmImportRealmRequiredActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredCredentials")]
    pub required_credentials: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetCredentialsFlow")]
    pub reset_credentials_flow: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetPasswordAllowed")]
    pub reset_password_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revokeRefreshToken")]
    pub revoke_refresh_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<KeycloakRealmImportRealmRoles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeMappings")]
    pub scope_mappings: Option<Vec<KeycloakRealmImportRealmScopeMappings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "smtpServer")]
    pub smtp_server: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub social: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialProviders")]
    pub social_providers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslRequired")]
    pub ssl_required: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssoSessionIdleTimeout")]
    pub sso_session_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssoSessionIdleTimeoutRememberMe")]
    pub sso_session_idle_timeout_remember_me: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssoSessionMaxLifespan")]
    pub sso_session_max_lifespan: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssoSessionMaxLifespanRememberMe")]
    pub sso_session_max_lifespan_remember_me: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedLocales")]
    pub supported_locales: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateProfileOnInitialSocialLogin")]
    pub update_profile_on_initial_social_login: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userCacheEnabled")]
    pub user_cache_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userFederationMappers")]
    pub user_federation_mappers: Option<Vec<KeycloakRealmImportRealmUserFederationMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userFederationProviders")]
    pub user_federation_providers: Option<Vec<KeycloakRealmImportRealmUserFederationProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userManagedAccessAllowed")]
    pub user_managed_access_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<KeycloakRealmImportRealmUsers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyEmail")]
    pub verify_email: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitIncrementSeconds")]
    pub wait_increment_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyAcceptableAaguids")]
    pub web_authn_policy_acceptable_aaguids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyAttestationConveyancePreference")]
    pub web_authn_policy_attestation_conveyance_preference: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyAuthenticatorAttachment")]
    pub web_authn_policy_authenticator_attachment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyAvoidSameAuthenticatorRegister")]
    pub web_authn_policy_avoid_same_authenticator_register: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyCreateTimeout")]
    pub web_authn_policy_create_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessAcceptableAaguids")]
    pub web_authn_policy_passwordless_acceptable_aaguids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessAttestationConveyancePreference")]
    pub web_authn_policy_passwordless_attestation_conveyance_preference: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessAuthenticatorAttachment")]
    pub web_authn_policy_passwordless_authenticator_attachment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")]
    pub web_authn_policy_passwordless_avoid_same_authenticator_register: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessCreateTimeout")]
    pub web_authn_policy_passwordless_create_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessRequireResidentKey")]
    pub web_authn_policy_passwordless_require_resident_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessRpEntityName")]
    pub web_authn_policy_passwordless_rp_entity_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessRpId")]
    pub web_authn_policy_passwordless_rp_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessSignatureAlgorithms")]
    pub web_authn_policy_passwordless_signature_algorithms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyPasswordlessUserVerificationRequirement")]
    pub web_authn_policy_passwordless_user_verification_requirement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyRequireResidentKey")]
    pub web_authn_policy_require_resident_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyRpEntityName")]
    pub web_authn_policy_rp_entity_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyRpId")]
    pub web_authn_policy_rp_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicySignatureAlgorithms")]
    pub web_authn_policy_signature_algorithms: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webAuthnPolicyUserVerificationRequirement")]
    pub web_authn_policy_user_verification_requirement: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationScopeMappings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientScope")]
    pub client_scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "self")]
    pub r#_self: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplications {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUrl")]
    pub admin_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysDisplayInConsole")]
    pub always_display_in_console: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationFlowBindingOverrides")]
    pub authentication_flow_binding_overrides: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationServicesEnabled")]
    pub authorization_services_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationSettings")]
    pub authorization_settings: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerOnly")]
    pub bearer_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<KeycloakRealmImportRealmApplicationsClaims>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuthenticatorType")]
    pub client_authenticator_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultClientScopes")]
    pub default_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRoles")]
    pub default_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directAccessGrantsEnabled")]
    pub direct_access_grants_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directGrantsOnly")]
    pub direct_grants_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frontchannelLogout")]
    pub frontchannel_logout: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullScopeAllowed")]
    pub full_scope_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "implicitFlowEnabled")]
    pub implicit_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeReRegistrationTimeout")]
    pub node_re_registration_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2DeviceAuthorizationGrantEnabled")]
    pub oauth2_device_authorization_grant_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionalClientScopes")]
    pub optional_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmApplicationsProtocolMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicClient")]
    pub public_client: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registeredNodes")]
    pub registered_nodes: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationAccessToken")]
    pub registration_access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootUrl")]
    pub root_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountsEnabled")]
    pub service_accounts_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardFlowEnabled")]
    pub standard_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "surrogateAuthRequired")]
    pub surrogate_auth_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateConfig")]
    pub use_template_config: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateMappers")]
    pub use_template_mappers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateScope")]
    pub use_template_scope: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webOrigins")]
    pub web_origins: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRemoteResourceManagement")]
    pub allow_remote_resource_management: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPolicies>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyEnforcementMode")]
    pub policy_enforcement_mode: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPolicyEnforcementMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsResources>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsScopes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmApplicationsAuthorizationSettingsDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logic: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesLogic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesData")]
    pub resources_data: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopesData")]
    pub scopes_data: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesScopesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesLogic {
    #[serde(rename = "POSITIVE")]
    Positive,
    #[serde(rename = "NEGATIVE")]
    Negative,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesDataOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesDataScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesDataOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesResourcesDataScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsPoliciesScopesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmApplicationsAuthorizationSettingsPolicyEnforcementMode {
    #[serde(rename = "PERMISSIVE")]
    Permissive,
    #[serde(rename = "ENFORCING")]
    Enforcing,
    #[serde(rename = "DISABLED")]
    Disabled,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsResources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmApplicationsAuthorizationSettingsResourcesOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmApplicationsAuthorizationSettingsResourcesScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsResourcesOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsResourcesScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsAuthorizationSettingsScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsClaims {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gender: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locale: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub picture: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub website: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmApplicationsProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmAuthenticationFlows {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationExecutions")]
    pub authentication_executions: Option<Vec<KeycloakRealmImportRealmAuthenticationFlowsAuthenticationExecutions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "builtIn")]
    pub built_in: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerId")]
    pub provider_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topLevel")]
    pub top_level: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmAuthenticationFlowsAuthenticationExecutions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authenticator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticatorConfig")]
    pub authenticator_config: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticatorFlow")]
    pub authenticator_flow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autheticatorFlow")]
    pub autheticator_flow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowAlias")]
    pub flow_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requirement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userSetupAllowed")]
    pub user_setup_allowed: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmAuthenticatorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientScopeMappings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientScope")]
    pub client_scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "self")]
    pub r#_self: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientScopes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmClientScopesProtocolMappers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientScopesProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerOnly")]
    pub bearer_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directAccessGrantsEnabled")]
    pub direct_access_grants_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frontchannelLogout")]
    pub frontchannel_logout: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullScopeAllowed")]
    pub full_scope_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "implicitFlowEnabled")]
    pub implicit_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmClientTemplatesProtocolMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicClient")]
    pub public_client: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountsEnabled")]
    pub service_accounts_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardFlowEnabled")]
    pub standard_flow_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientTemplatesProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClients {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUrl")]
    pub admin_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysDisplayInConsole")]
    pub always_display_in_console: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationFlowBindingOverrides")]
    pub authentication_flow_binding_overrides: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationServicesEnabled")]
    pub authorization_services_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationSettings")]
    pub authorization_settings: Option<KeycloakRealmImportRealmClientsAuthorizationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerOnly")]
    pub bearer_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuthenticatorType")]
    pub client_authenticator_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultClientScopes")]
    pub default_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRoles")]
    pub default_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directAccessGrantsEnabled")]
    pub direct_access_grants_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directGrantsOnly")]
    pub direct_grants_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frontchannelLogout")]
    pub frontchannel_logout: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullScopeAllowed")]
    pub full_scope_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "implicitFlowEnabled")]
    pub implicit_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeReRegistrationTimeout")]
    pub node_re_registration_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2DeviceAuthorizationGrantEnabled")]
    pub oauth2_device_authorization_grant_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionalClientScopes")]
    pub optional_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmClientsProtocolMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicClient")]
    pub public_client: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registeredNodes")]
    pub registered_nodes: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationAccessToken")]
    pub registration_access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootUrl")]
    pub root_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountsEnabled")]
    pub service_accounts_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardFlowEnabled")]
    pub standard_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "surrogateAuthRequired")]
    pub surrogate_auth_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateConfig")]
    pub use_template_config: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateMappers")]
    pub use_template_mappers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateScope")]
    pub use_template_scope: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webOrigins")]
    pub web_origins: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRemoteResourceManagement")]
    pub allow_remote_resource_management: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsPolicies>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyEnforcementMode")]
    pub policy_enforcement_mode: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsPolicyEnforcementMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsResources>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsScopes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmClientsAuthorizationSettingsDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logic: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesLogic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesData")]
    pub resources_data: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopesData")]
    pub scopes_data: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesScopesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesLogic {
    #[serde(rename = "POSITIVE")]
    Positive,
    #[serde(rename = "NEGATIVE")]
    Negative,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesDataOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesDataScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesDataOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesResourcesDataScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsPoliciesScopesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmClientsAuthorizationSettingsPolicyEnforcementMode {
    #[serde(rename = "PERMISSIVE")]
    Permissive,
    #[serde(rename = "ENFORCING")]
    Enforcing,
    #[serde(rename = "DISABLED")]
    Disabled,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsResources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmClientsAuthorizationSettingsResourcesOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmClientsAuthorizationSettingsResourcesScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsResourcesOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsResourcesScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsAuthorizationSettingsScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmClientsProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmComponents {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerId")]
    pub provider_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subComponents")]
    pub sub_components: Option<BTreeMap<String, KeycloakRealmImportRealmComponentsSubComponents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subType")]
    pub sub_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmComponentsSubComponents {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerId")]
    pub provider_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subType")]
    pub sub_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmDefaultRole {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRole")]
    pub client_role: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composites: Option<KeycloakRealmImportRealmDefaultRoleComposites>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerId")]
    pub container_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeParamRequired")]
    pub scope_param_required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmDefaultRoleComposites {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmFederatedUsers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationRoles")]
    pub application_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientConsents")]
    pub client_consents: Option<Vec<KeycloakRealmImportRealmFederatedUsersClientConsents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRoles")]
    pub client_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTimestamp")]
    pub created_timestamp: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Vec<KeycloakRealmImportRealmFederatedUsersCredentials>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableableCredentialTypes")]
    pub disableable_credential_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailVerified")]
    pub email_verified: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedIdentities")]
    pub federated_identities: Option<Vec<KeycloakRealmImportRealmFederatedUsersFederatedIdentities>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federationLink")]
    pub federation_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstName")]
    pub first_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastName")]
    pub last_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "realmRoles")]
    pub realm_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredActions")]
    pub required_actions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "self")]
    pub r#_self: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountClientId")]
    pub service_account_client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialLinks")]
    pub social_links: Option<Vec<KeycloakRealmImportRealmFederatedUsersSocialLinks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub totp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmFederatedUsersClientConsents {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantedClientScopes")]
    pub granted_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantedRealmRoles")]
    pub granted_realm_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedDate")]
    pub last_updated_date: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmFederatedUsersCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub counter: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialData")]
    pub credential_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digits: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashIterations")]
    pub hash_iterations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashedSaltedValue")]
    pub hashed_salted_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub salt: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretData")]
    pub secret_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temporary: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabel")]
    pub user_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmFederatedUsersFederatedIdentities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProvider")]
    pub identity_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    pub user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userName")]
    pub user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmFederatedUsersSocialLinks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialProvider")]
    pub social_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialUserId")]
    pub social_user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialUsername")]
    pub social_username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmGroups {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRoles")]
    pub client_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "realmRoles")]
    pub realm_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subGroups")]
    pub sub_groups: Option<Vec<KeycloakRealmImportRealmGroupsSubGroups>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmGroupsSubGroups {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRoles")]
    pub client_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "realmRoles")]
    pub realm_roles: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmIdentityProviderMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderAlias")]
    pub identity_provider_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProviderMapper")]
    pub identity_provider_mapper: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmIdentityProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addReadTokenRoleOnCreate")]
    pub add_read_token_role_on_create: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateByDefault")]
    pub authenticate_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstBrokerLoginFlowAlias")]
    pub first_broker_login_flow_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalId")]
    pub internal_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkOnly")]
    pub link_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postBrokerLoginFlowAlias")]
    pub post_broker_login_flow_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerId")]
    pub provider_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storeToken")]
    pub store_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustEmail")]
    pub trust_email: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateProfileFirstLoginMode")]
    pub update_profile_first_login_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClients {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUrl")]
    pub admin_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysDisplayInConsole")]
    pub always_display_in_console: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationFlowBindingOverrides")]
    pub authentication_flow_binding_overrides: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationServicesEnabled")]
    pub authorization_services_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationSettings")]
    pub authorization_settings: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerOnly")]
    pub bearer_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<KeycloakRealmImportRealmOauthClientsClaims>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuthenticatorType")]
    pub client_authenticator_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultClientScopes")]
    pub default_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRoles")]
    pub default_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directAccessGrantsEnabled")]
    pub direct_access_grants_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directGrantsOnly")]
    pub direct_grants_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frontchannelLogout")]
    pub frontchannel_logout: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullScopeAllowed")]
    pub full_scope_allowed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "implicitFlowEnabled")]
    pub implicit_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeReRegistrationTimeout")]
    pub node_re_registration_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2DeviceAuthorizationGrantEnabled")]
    pub oauth2_device_authorization_grant_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionalClientScopes")]
    pub optional_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMappers")]
    pub protocol_mappers: Option<Vec<KeycloakRealmImportRealmOauthClientsProtocolMappers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicClient")]
    pub public_client: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectUris")]
    pub redirect_uris: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registeredNodes")]
    pub registered_nodes: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationAccessToken")]
    pub registration_access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootUrl")]
    pub root_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountsEnabled")]
    pub service_accounts_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardFlowEnabled")]
    pub standard_flow_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "surrogateAuthRequired")]
    pub surrogate_auth_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateConfig")]
    pub use_template_config: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateMappers")]
    pub use_template_mappers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTemplateScope")]
    pub use_template_scope: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webOrigins")]
    pub web_origins: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRemoteResourceManagement")]
    pub allow_remote_resource_management: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPolicies>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyEnforcementMode")]
    pub policy_enforcement_mode: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPolicyEnforcementMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResources>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsScopes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmOauthClientsAuthorizationSettingsDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decisionStrategy")]
    pub decision_strategy: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesDecisionStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logic: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesLogic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesData")]
    pub resources_data: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopesData")]
    pub scopes_data: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesScopesData>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesDecisionStrategy {
    #[serde(rename = "AFFIRMATIVE")]
    Affirmative,
    #[serde(rename = "CONSENSUS")]
    Consensus,
    #[serde(rename = "UNANIMOUS")]
    Unanimous,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesLogic {
    #[serde(rename = "POSITIVE")]
    Positive,
    #[serde(rename = "NEGATIVE")]
    Negative,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesDataOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesDataScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesDataOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesResourcesDataScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPoliciesScopesData {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KeycloakRealmImportRealmOauthClientsAuthorizationSettingsPolicyEnforcementMode {
    #[serde(rename = "PERMISSIVE")]
    Permissive,
    #[serde(rename = "ENFORCING")]
    Enforcing,
    #[serde(rename = "DISABLED")]
    Disabled,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_id")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResourcesOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerManagedAccess")]
    pub owner_managed_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResourcesScopes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResourcesOwner {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsResourcesScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsAuthorizationSettingsScopes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconUri")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsClaims {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gender: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locale: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub picture: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub website: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmOauthClientsProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmProtocolMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentRequired")]
    pub consent_required: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consentText")]
    pub consent_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolMapper")]
    pub protocol_mapper: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRequiredActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerId")]
    pub provider_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRoles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<BTreeMap<String, KeycloakRealmImportRealmRolesApplication>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<BTreeMap<String, KeycloakRealmImportRealmRolesClient>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<Vec<KeycloakRealmImportRealmRolesRealm>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesApplication {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRole")]
    pub client_role: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composites: Option<KeycloakRealmImportRealmRolesApplicationComposites>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerId")]
    pub container_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeParamRequired")]
    pub scope_param_required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesApplicationComposites {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesClient {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRole")]
    pub client_role: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composites: Option<KeycloakRealmImportRealmRolesClientComposites>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerId")]
    pub container_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeParamRequired")]
    pub scope_param_required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesClientComposites {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesRealm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRole")]
    pub client_role: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composites: Option<KeycloakRealmImportRealmRolesRealmComposites>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerId")]
    pub container_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeParamRequired")]
    pub scope_param_required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmRolesRealmComposites {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmScopeMappings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientScope")]
    pub client_scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTemplate")]
    pub client_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "self")]
    pub r#_self: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUserFederationMappers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federationMapperType")]
    pub federation_mapper_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federationProviderDisplayName")]
    pub federation_provider_display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUserFederationProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changedSyncPeriod")]
    pub changed_sync_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullSyncPeriod")]
    pub full_sync_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSync")]
    pub last_sync: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUsers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationRoles")]
    pub application_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientConsents")]
    pub client_consents: Option<Vec<KeycloakRealmImportRealmUsersClientConsents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRoles")]
    pub client_roles: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTimestamp")]
    pub created_timestamp: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Vec<KeycloakRealmImportRealmUsersCredentials>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableableCredentialTypes")]
    pub disableable_credential_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailVerified")]
    pub email_verified: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedIdentities")]
    pub federated_identities: Option<Vec<KeycloakRealmImportRealmUsersFederatedIdentities>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federationLink")]
    pub federation_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstName")]
    pub first_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastName")]
    pub last_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "realmRoles")]
    pub realm_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredActions")]
    pub required_actions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "self")]
    pub r#_self: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountClientId")]
    pub service_account_client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialLinks")]
    pub social_links: Option<Vec<KeycloakRealmImportRealmUsersSocialLinks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub totp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUsersClientConsents {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantedClientScopes")]
    pub granted_client_scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantedRealmRoles")]
    pub granted_realm_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedDate")]
    pub last_updated_date: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUsersCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub counter: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialData")]
    pub credential_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digits: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashIterations")]
    pub hash_iterations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashedSaltedValue")]
    pub hashed_salted_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub salt: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretData")]
    pub secret_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temporary: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabel")]
    pub user_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUsersFederatedIdentities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityProvider")]
    pub identity_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    pub user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userName")]
    pub user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportRealmUsersSocialLinks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialProvider")]
    pub social_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialUserId")]
    pub social_user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socialUsername")]
    pub social_username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<KeycloakRealmImportStatusConditions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KeycloakRealmImportStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

