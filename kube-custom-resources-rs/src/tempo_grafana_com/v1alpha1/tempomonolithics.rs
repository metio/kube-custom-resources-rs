// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/grafana/tempo-operator/tempo.grafana.com/v1alpha1/tempomonolithics.yaml --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// TempoMonolithicSpec defines the desired state of TempoMonolithic.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "tempo.grafana.com", version = "v1alpha1", kind = "TempoMonolithic", plural = "tempomonolithics")]
#[kube(namespaced)]
#[kube(status = "TempoMonolithicStatus")]
#[kube(schema = "disabled")]
pub struct TempoMonolithicSpec {
    /// Affinity defines the Affinity rules for scheduling pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<TempoMonolithicAffinity>,
    /// ExtraConfig defines any extra (overlay) configuration of components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraConfig")]
    pub extra_config: Option<TempoMonolithicExtraConfig>,
    /// Ingestion defines the trace ingestion configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingestion: Option<TempoMonolithicIngestion>,
    /// JaegerUI defines the Jaeger UI configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jaegerui: Option<TempoMonolithicJaegerui>,
    /// ManagementState defines whether this instance is managed by the operator or self-managed. Default: Managed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub management: Option<TempoMonolithicManagement>,
    /// Multitenancy defines the multi-tenancy configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multitenancy: Option<TempoMonolithicMultitenancy>,
    /// NodeSelector defines which labels are required by a node to schedule the pod onto it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Observability defines the observability configuration of the Tempo deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub observability: Option<TempoMonolithicObservability>,
    /// Resources defines the compute resource requirements of the Tempo container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<TempoMonolithicResources>,
    /// ServiceAccount defines the Service Account to use for all Tempo components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Storage defines the storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<TempoMonolithicStorage>,
    /// Tolerations defines the tolerations of a node to schedule the pod onto it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<TempoMonolithicTolerations>>,
}

/// Affinity defines the Affinity rules for scheduling pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinity {
    /// Describes node affinity scheduling rules for the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<TempoMonolithicAffinityNodeAffinity>,
    /// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<TempoMonolithicAffinityPodAffinity>,
    /// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<TempoMonolithicAffinityPodAntiAffinity>,
}

/// Describes node affinity scheduling rules for the pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// A node selector term, associated with the corresponding weight.
    pub preference: TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    /// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    pub weight: i32,
}

/// A node selector term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /// A list of node selector requirements by node's labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    /// A list of node selector requirements by node's fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Required. A list of node selector terms. The terms are ORed.
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    /// A list of node selector requirements by node's labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    /// A list of node selector requirements by node's fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Required. A pod affinity term, associated with the corresponding weight.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    pub weight: i32,
}

/// Required. A pod affinity term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Required. A pod affinity term, associated with the corresponding weight.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    pub weight: i32,
}

/// Required. A pod affinity term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ExtraConfig defines any extra (overlay) configuration of components.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicExtraConfig {
    /// Tempo defines any extra Tempo configuration, which will be merged with the operator's generated Tempo configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tempo: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ingestion defines the trace ingestion configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestion {
    /// OTLP defines the ingestion configuration for the OTLP protocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub otlp: Option<TempoMonolithicIngestionOtlp>,
}

/// OTLP defines the ingestion configuration for the OTLP protocol.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestionOtlp {
    /// GRPC defines the OTLP over gRPC configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<TempoMonolithicIngestionOtlpGrpc>,
    /// HTTP defines the OTLP over HTTP configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<TempoMonolithicIngestionOtlpHttp>,
}

/// GRPC defines the OTLP over gRPC configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestionOtlpGrpc {
    /// Enabled defines if OTLP over gRPC is enabled. Default: enabled.
    pub enabled: bool,
    /// TLS defines the TLS configuration for OTLP/gRPC ingestion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<TempoMonolithicIngestionOtlpGrpcTls>,
}

/// TLS defines the TLS configuration for OTLP/gRPC ingestion.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestionOtlpGrpcTls {
    /// CA is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caName")]
    pub ca_name: Option<String>,
    /// Cert is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certName")]
    pub cert_name: Option<String>,
    /// Enabled defines if TLS is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// MinVersion defines the minimum acceptable TLS version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    pub min_version: Option<String>,
}

/// HTTP defines the OTLP over HTTP configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestionOtlpHttp {
    /// Enabled defines if OTLP over HTTP is enabled. Default: enabled.
    pub enabled: bool,
    /// TLS defines the TLS configuration for OTLP/HTTP ingestion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<TempoMonolithicIngestionOtlpHttpTls>,
}

/// TLS defines the TLS configuration for OTLP/HTTP ingestion.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicIngestionOtlpHttpTls {
    /// CA is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caName")]
    pub ca_name: Option<String>,
    /// Cert is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certName")]
    pub cert_name: Option<String>,
    /// Enabled defines if TLS is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// MinVersion defines the minimum acceptable TLS version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    pub min_version: Option<String>,
}

/// JaegerUI defines the Jaeger UI configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicJaegerui {
    /// Enabled defines if the Jaeger UI component should be created.
    pub enabled: bool,
    /// Ingress defines the Ingress configuration for the Jaeger UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<TempoMonolithicJaegeruiIngress>,
    /// Resources defines the compute resource requirements of the Jaeger UI container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<TempoMonolithicJaegeruiResources>,
    /// Route defines the OpenShift route configuration for the Jaeger UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<TempoMonolithicJaegeruiRoute>,
}

/// Ingress defines the Ingress configuration for the Jaeger UI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicJaegeruiIngress {
    /// Annotations defines the annotations of the Ingress object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Enabled defines if an Ingress object should be created for Jaeger UI.
    pub enabled: bool,
    /// Host defines the hostname of the Ingress object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// IngressClassName defines the name of an IngressClass cluster resource. Defines which ingress controller serves this ingress resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClassName")]
    pub ingress_class_name: Option<String>,
}

/// Resources defines the compute resource requirements of the Jaeger UI container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicJaegeruiResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<TempoMonolithicJaegeruiResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicJaegeruiResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// Route defines the OpenShift route configuration for the Jaeger UI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicJaegeruiRoute {
    /// Annotations defines the annotations of the Route object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Enabled defines if a Route object should be created for Jaeger UI.
    pub enabled: bool,
    /// Host defines the hostname of the Route object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Termination specifies the termination type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub termination: Option<TempoMonolithicJaegeruiRouteTermination>,
}

/// Route defines the OpenShift route configuration for the Jaeger UI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TempoMonolithicJaegeruiRouteTermination {
    #[serde(rename = "insecure")]
    Insecure,
    #[serde(rename = "edge")]
    Edge,
    #[serde(rename = "passthrough")]
    Passthrough,
    #[serde(rename = "reencrypt")]
    Reencrypt,
}

/// TempoMonolithicSpec defines the desired state of TempoMonolithic.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TempoMonolithicManagement {
    Managed,
    Unmanaged,
}

/// Multitenancy defines the multi-tenancy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancy {
    /// Authentication defines the tempo-gateway component authentication configuration spec per tenant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<Vec<TempoMonolithicMultitenancyAuthentication>>,
    /// Authorization defines the tempo-gateway component authorization configuration spec per tenant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<TempoMonolithicMultitenancyAuthorization>,
    /// Enabled defines if multi-tenancy is enabled.
    pub enabled: bool,
    /// Mode defines the multitenancy mode.
    pub mode: TempoMonolithicMultitenancyMode,
    /// Resources defines the compute resource requirements of the gateway container. The gateway performs authentication and authorization of incoming requests when multi-tenancy is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<TempoMonolithicMultitenancyResources>,
}

/// AuthenticationSpec defines the oidc configuration per tenant for tempo Gateway component.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthentication {
    /// OIDC defines the spec for the OIDC tenant's authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc: Option<TempoMonolithicMultitenancyAuthenticationOidc>,
    /// TenantID defines a universally unique identifier of the tenant. Unlike the tenantName, which must be unique at a given time, the tenantId must be unique over the entire lifetime of the Tempo deployment. Tempo uses this ID to prefix objects in the object storage.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    /// TenantName defines a human readable, unique name of the tenant. The value of this field must be specified in the X-Scope-OrgID header and in the resources field of a ClusterRole to identify the tenant.
    #[serde(rename = "tenantName")]
    pub tenant_name: String,
}

/// OIDC defines the spec for the OIDC tenant's authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthenticationOidc {
    /// Group claim field from ID Token
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupClaim")]
    pub group_claim: Option<String>,
    /// IssuerURL defines the URL for issuer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerURL")]
    pub issuer_url: Option<String>,
    /// RedirectURL defines the URL for redirect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectURL")]
    pub redirect_url: Option<String>,
    /// Secret defines the spec for the clientID, clientSecret and issuerCAPath for tenant's authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<TempoMonolithicMultitenancyAuthenticationOidcSecret>,
    /// User claim field from ID Token
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameClaim")]
    pub username_claim: Option<String>,
}

/// Secret defines the spec for the clientID, clientSecret and issuerCAPath for tenant's authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthenticationOidcSecret {
    /// Name of a secret in the namespace configured for tenant secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Authorization defines the tempo-gateway component authorization configuration spec per tenant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthorization {
    /// RoleBindings defines configuration to bind a set of roles to a set of subjects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleBindings")]
    pub role_bindings: Option<Vec<TempoMonolithicMultitenancyAuthorizationRoleBindings>>,
    /// Roles defines a set of permissions to interact with a tenant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<TempoMonolithicMultitenancyAuthorizationRoles>>,
}

/// RoleBindingsSpec binds a set of roles to a set of subjects.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthorizationRoleBindings {
    pub name: String,
    pub roles: Vec<String>,
    pub subjects: Vec<TempoMonolithicMultitenancyAuthorizationRoleBindingsSubjects>,
}

/// Subject represents a subject that has been bound to a role.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthorizationRoleBindingsSubjects {
    /// SubjectKind is a kind of Tempo Gateway RBAC subject.
    pub kind: TempoMonolithicMultitenancyAuthorizationRoleBindingsSubjectsKind,
    pub name: String,
}

/// Subject represents a subject that has been bound to a role.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TempoMonolithicMultitenancyAuthorizationRoleBindingsSubjectsKind {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "group")]
    Group,
}

/// RoleSpec describes a set of permissions to interact with a tenant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyAuthorizationRoles {
    pub name: String,
    pub permissions: Vec<String>,
    pub resources: Vec<String>,
    pub tenants: Vec<String>,
}

/// Multitenancy defines the multi-tenancy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TempoMonolithicMultitenancyMode {
    #[serde(rename = "static")]
    Static,
    #[serde(rename = "openshift")]
    Openshift,
}

/// Resources defines the compute resource requirements of the gateway container. The gateway performs authentication and authorization of incoming requests when multi-tenancy is enabled.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<TempoMonolithicMultitenancyResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicMultitenancyResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// Observability defines the observability configuration of the Tempo deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservability {
    /// Grafana defines the Grafana configuration of the Tempo deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grafana: Option<TempoMonolithicObservabilityGrafana>,
    /// Metrics defines the metric configuration of the Tempo deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<TempoMonolithicObservabilityMetrics>,
}

/// Grafana defines the Grafana configuration of the Tempo deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityGrafana {
    /// DataSource defines the Grafana data source configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<TempoMonolithicObservabilityGrafanaDataSource>,
}

/// DataSource defines the Grafana data source configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityGrafanaDataSource {
    /// Enabled defines if a Grafana data source should be created for this Tempo deployment.
    pub enabled: bool,
    /// InstanceSelector defines the Grafana instance where the data source should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSelector")]
    pub instance_selector: Option<TempoMonolithicObservabilityGrafanaDataSourceInstanceSelector>,
}

/// InstanceSelector defines the Grafana instance where the data source should be created.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityGrafanaDataSourceInstanceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TempoMonolithicObservabilityGrafanaDataSourceInstanceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityGrafanaDataSourceInstanceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Metrics defines the metric configuration of the Tempo deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityMetrics {
    /// ServiceMonitors defines the PrometheusRule configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRules")]
    pub prometheus_rules: Option<TempoMonolithicObservabilityMetricsPrometheusRules>,
    /// ServiceMonitors defines the ServiceMonitor configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitors")]
    pub service_monitors: Option<TempoMonolithicObservabilityMetricsServiceMonitors>,
}

/// ServiceMonitors defines the PrometheusRule configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityMetricsPrometheusRules {
    /// Enabled defines if PrometheusRule objects should be created for this Tempo deployment.
    pub enabled: bool,
}

/// ServiceMonitors defines the ServiceMonitor configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicObservabilityMetricsServiceMonitors {
    /// Enabled defines if ServiceMonitor objects should be created for this Tempo deployment.
    pub enabled: bool,
}

/// Resources defines the compute resource requirements of the Tempo container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<TempoMonolithicResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// Storage defines the storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorage {
    /// Traces defines the storage configuration for traces.
    pub traces: TempoMonolithicStorageTraces,
}

/// Traces defines the storage configuration for traces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorageTraces {
    /// Azure defines the configuration for Azure Storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<TempoMonolithicStorageTracesAzure>,
    /// Backend defines the backend for storing traces. Default: memory.
    pub backend: TempoMonolithicStorageTracesBackend,
    /// GCP defines the configuration for Google Cloud Storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<TempoMonolithicStorageTracesGcs>,
    /// S3 defines the configuration for Amazon S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<TempoMonolithicStorageTracesS3>,
    /// Size defines the size of the volume where traces are stored. For in-memory storage, this defines the size of the tmpfs volume. For persistent volume storage, this defines the size of the persistent volume. For object storage, this defines the size of the persistent volume containing the Write-Ahead Log (WAL) of Tempo. Default: 2Gi for memory, 10Gi for all other backends.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<IntOrString>,
}

/// Azure defines the configuration for Azure Storage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorageTracesAzure {
    /// Secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the TempoMonolithic custom resource.
    pub secret: String,
}

/// Traces defines the storage configuration for traces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TempoMonolithicStorageTracesBackend {
    #[serde(rename = "memory")]
    Memory,
    #[serde(rename = "pv")]
    Pv,
    #[serde(rename = "azure")]
    Azure,
    #[serde(rename = "gcs")]
    Gcs,
    #[serde(rename = "s3")]
    S3,
}

/// GCP defines the configuration for Google Cloud Storage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorageTracesGcs {
    /// Secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the TempoMonolithic custom resource.
    pub secret: String,
}

/// S3 defines the configuration for Amazon S3.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorageTracesS3 {
    /// Secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the TempoMonolithic custom resource.
    pub secret: String,
    /// TLS defines the TLS configuration for Amazon S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<TempoMonolithicStorageTracesS3Tls>,
}

/// TLS defines the TLS configuration for Amazon S3.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStorageTracesS3Tls {
    /// CA is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caName")]
    pub ca_name: Option<String>,
    /// Cert is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certName")]
    pub cert_name: Option<String>,
    /// Enabled defines if TLS is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// MinVersion defines the minimum acceptable TLS version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    pub min_version: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// TempoMonolithicStatus defines the observed state of TempoMonolithic.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStatus {
    /// Components provides summary of all Tempo pod status, grouped per component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<TempoMonolithicStatusComponents>,
    /// Conditions of the Tempo deployment health.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

/// Components provides summary of all Tempo pod status, grouped per component.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TempoMonolithicStatusComponents {
    /// Tempo is a map of the pod status of the Tempo pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tempo: Option<BTreeMap<String, String>>,
}

