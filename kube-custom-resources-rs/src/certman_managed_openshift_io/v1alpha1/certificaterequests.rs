// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/certman-operator/certman.managed.openshift.io/v1alpha1/certificaterequests.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// CertificateRequestSpec defines the desired state of CertificateRequest
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "certman.managed.openshift.io", version = "v1alpha1", kind = "CertificateRequest", plural = "certificaterequests")]
#[kube(namespaced)]
#[kube(status = "CertificateRequestStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CertificateRequestSpec {
    /// ACMEDNSDomain is the DNS zone that will house the TXT records needed for the
    /// certificate to be created.
    /// In Route53 this would be the public Route53 hosted zone (the Domain Name not the ZoneID)
    #[serde(rename = "acmeDNSDomain")]
    pub acme_dns_domain: String,
    /// APIURL is the URL where the cluster's API can be accessed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// CertificateSecret is the reference to the secret where certificates are stored.
    #[serde(rename = "certificateSecret")]
    pub certificate_secret: ObjectReference,
    /// DNSNames is a list of subject alt names to be used on the Certificate.
    #[serde(rename = "dnsNames")]
    pub dns_names: Vec<String>,
    /// Let's Encrypt will use this to contact you about expiring certificates, and issues related to your account.
    pub email: String,
    /// Platform contains specific cloud provider information such as credentials and secrets for the cluster infrastructure.
    pub platform: CertificateRequestPlatform,
    /// Number of days before expiration to reissue certificate.
    /// NOTE: Keeping "renew" in JSON for backward-compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "renewBeforeDays")]
    pub renew_before_days: Option<i64>,
    /// WebConsoleURL is the URL for the cluster's web console UI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webConsoleURL")]
    pub web_console_url: Option<String>,
}

/// CertificateSecret is the reference to the secret where certificates are stored.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestCertificateSecret {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Platform contains specific cloud provider information such as credentials and secrets for the cluster infrastructure.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatform {
    /// AWSPlatformSecrets contains secrets for clusters on the AWS platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<CertificateRequestPlatformAws>,
    /// AzurePlatformSecrets contains secrets for clusters on the Azure platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<CertificateRequestPlatformAzure>,
    /// GCPPlatformSecrets contains secrets for clusters on the GCP platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<CertificateRequestPlatformGcp>,
    /// MockPlatformSecrets indicates a mock client should be generated, which
    /// doesn't interact with any platform
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mock: Option<CertificateRequestPlatformMock>,
}

/// AWSPlatformSecrets contains secrets for clusters on the AWS platform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformAws {
    /// Credentials refers to a secret that contains the AWS account access
    /// credentials.
    pub credentials: CertificateRequestPlatformAwsCredentials,
    /// Region specifies the AWS region where the cluster will be created.
    pub region: String,
}

/// Credentials refers to a secret that contains the AWS account access
/// credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformAwsCredentials {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AzurePlatformSecrets contains secrets for clusters on the Azure platform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformAzure {
    /// Credentials refers to a secret that contains the AZURE account access credentials.
    pub credentials: CertificateRequestPlatformAzureCredentials,
    /// ResourceGroupName refers to the resource group that contains the dns zone.
    #[serde(rename = "resourceGroupName")]
    pub resource_group_name: String,
}

/// Credentials refers to a secret that contains the AZURE account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformAzureCredentials {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// GCPPlatformSecrets contains secrets for clusters on the GCP platform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformGcp {
    /// Credentials refers to a secret that contains the GCP account access
    /// credentials.
    pub credentials: CertificateRequestPlatformGcpCredentials,
}

/// Credentials refers to a secret that contains the GCP account access
/// credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformGcpCredentials {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// MockPlatformSecrets indicates a mock client should be generated, which
/// doesn't interact with any platform
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestPlatformMock {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "answerDNSChallengeErrorString")]
    pub answer_dns_challenge_error_string: Option<String>,
    /// these options configure the return values for the mock client's functions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "answerDNSChallengeFQDN")]
    pub answer_dns_challenge_fqdn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteAcmeChallengeResourceRecordsErrorString")]
    pub delete_acme_challenge_resource_records_error_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validateDNSWriteAccessBool")]
    pub validate_dns_write_access_bool: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validateDNSWriteAccessErrorString")]
    pub validate_dns_write_access_error_string: Option<String>,
}

/// CertificateRequestStatus defines the observed state of CertificateRequest
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CertificateRequestStatus {
    /// Conditions includes more detailed status for the Certificate Request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Issued is true once certificates have been issued.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issued: Option<bool>,
    /// The entity that verified the information and signed the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerName")]
    pub issuer_name: Option<String>,
    /// The expiration time of the certificate stored in the secret named by this resource in spec.secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    pub not_after: Option<String>,
    /// The earliest time and date on which the certificate stored in the secret named by this resource in spec.secretName is valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<String>,
    /// The serial number of the certificate stored in the secret named by this resource in spec.secretName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serialNumber")]
    pub serial_number: Option<String>,
    /// Status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

