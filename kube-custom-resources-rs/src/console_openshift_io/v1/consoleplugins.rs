// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/console.openshift.io/v1/consoleplugins.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ConsolePluginSpec is the desired plugin configuration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "console.openshift.io", version = "v1", kind = "ConsolePlugin", plural = "consoleplugins")]
#[kube(schema = "disabled")]
pub struct ConsolePluginSpec {
    /// backend holds the configuration of backend which is serving console's plugin .
    pub backend: ConsolePluginBackend,
    /// displayName is the display name of the plugin. The dispalyName should be between 1 and 128 characters.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// i18n is the configuration of plugin's localization resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub i18n: Option<ConsolePluginI18n>,
    /// proxy is a list of proxies that describe various service type to which the plugin needs to connect to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<Vec<ConsolePluginProxy>>,
}

/// backend holds the configuration of backend which is serving console's plugin .
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginBackend {
    /// service is a Kubernetes Service that exposes the plugin using a deployment with an HTTP server. The Service must use HTTPS and Service serving certificate. The console backend will proxy the plugins assets from the Service using the service CA bundle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<ConsolePluginBackendService>,
    /// type is the backend type which servers the console's plugin. Currently only "Service" is supported. 
    ///  ---
    #[serde(rename = "type")]
    pub r#type: ConsolePluginBackendType,
}

/// service is a Kubernetes Service that exposes the plugin using a deployment with an HTTP server. The Service must use HTTPS and Service serving certificate. The console backend will proxy the plugins assets from the Service using the service CA bundle.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginBackendService {
    /// basePath is the path to the plugin's assets. The primary asset it the manifest file called `plugin-manifest.json`, which is a JSON document that contains metadata about the plugin and the extensions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    /// name of Service that is serving the plugin assets.
    pub name: String,
    /// namespace of Service that is serving the plugin assets.
    pub namespace: String,
    /// port on which the Service that is serving the plugin is listening to.
    pub port: i32,
}

/// backend holds the configuration of backend which is serving console's plugin .
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConsolePluginBackendType {
    Service,
}

/// i18n is the configuration of plugin's localization resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginI18n {
    /// loadType indicates how the plugin's localization resource should be loaded. Valid values are Preload, Lazy and the empty string. When set to Preload, all localization resources are fetched when the plugin is loaded. When set to Lazy, localization resources are lazily loaded as and when they are required by the console. When omitted or set to the empty string, the behaviour is equivalent to Lazy type.
    #[serde(rename = "loadType")]
    pub load_type: ConsolePluginI18nLoadType,
}

/// i18n is the configuration of plugin's localization resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConsolePluginI18nLoadType {
    Preload,
    Lazy,
    #[serde(rename = "")]
    KopiumEmpty,
}

/// ConsolePluginProxy holds information on various service types to which console's backend will proxy the plugin's requests.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginProxy {
    /// alias is a proxy name that identifies the plugin's proxy. An alias name should be unique per plugin. The console backend exposes following proxy endpoint: 
    ///  /api/proxy/plugin/<plugin-name>/<proxy-alias>/<request-path>?<optional-query-parameters> 
    ///  Request example path: 
    ///  /api/proxy/plugin/acm/search/pods?namespace=openshift-apiserver
    pub alias: String,
    /// authorization provides information about authorization type, which the proxied request should contain
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<ConsolePluginProxyAuthorization>,
    /// caCertificate provides the cert authority certificate contents, in case the proxied Service is using custom service CA. By default, the service CA bundle provided by the service-ca operator is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// endpoint provides information about endpoint to which the request is proxied to.
    pub endpoint: ConsolePluginProxyEndpoint,
}

/// ConsolePluginProxy holds information on various service types to which console's backend will proxy the plugin's requests.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConsolePluginProxyAuthorization {
    UserToken,
    None,
}

/// endpoint provides information about endpoint to which the request is proxied to.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginProxyEndpoint {
    /// service is an in-cluster Service that the plugin will connect to. The Service must use HTTPS. The console backend exposes an endpoint in order to proxy communication between the plugin and the Service. Note: service field is required for now, since currently only "Service" type is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<ConsolePluginProxyEndpointService>,
    /// type is the type of the console plugin's proxy. Currently only "Service" is supported. 
    ///  ---
    #[serde(rename = "type")]
    pub r#type: ConsolePluginProxyEndpointType,
}

/// service is an in-cluster Service that the plugin will connect to. The Service must use HTTPS. The console backend exposes an endpoint in order to proxy communication between the plugin and the Service. Note: service field is required for now, since currently only "Service" type is supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConsolePluginProxyEndpointService {
    /// name of Service that the plugin needs to connect to.
    pub name: String,
    /// namespace of Service that the plugin needs to connect to
    pub namespace: String,
    /// port on which the Service that the plugin needs to connect to is listening on.
    pub port: i32,
}

/// endpoint provides information about endpoint to which the request is proxied to.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConsolePluginProxyEndpointType {
    Service,
}

