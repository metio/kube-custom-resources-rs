// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/console.openshift.io/v1alpha1/consoleplugins.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ConsolePluginSpec is the desired plugin configuration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "console.openshift.io", version = "v1alpha1", kind = "ConsolePlugin", plural = "consoleplugins")]
#[kube(schema = "disabled")]
pub struct ConsolePluginSpec {
    /// displayName is the display name of the plugin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// proxy is a list of proxies that describe various service type to which the plugin needs to connect to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<Vec<ConsolePluginProxy>>,
    /// service is a Kubernetes Service that exposes the plugin using a deployment with an HTTP server. The Service must use HTTPS and Service serving certificate. The console backend will proxy the plugins assets from the Service using the service CA bundle.
    pub service: ConsolePluginService,
}

/// ConsolePluginProxy holds information on various service types to which console's backend will proxy the plugin's requests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConsolePluginProxy {
    /// alias is a proxy name that identifies the plugin's proxy. An alias name should be unique per plugin. The console backend exposes following proxy endpoint: 
    ///  /api/proxy/plugin/<plugin-name>/<proxy-alias>/<request-path>?<optional-query-parameters> 
    ///  Request example path: 
    ///  /api/proxy/plugin/acm/search/pods?namespace=openshift-apiserver
    pub alias: String,
    /// authorize indicates if the proxied request should contain the logged-in user's OpenShift access token in the "Authorization" request header. For example: 
    ///  Authorization: Bearer sha256~kV46hPnEYhCWFnB85r5NrprAxggzgb6GOeLbgcKNsH0 
    ///  By default the access token is not part of the proxied request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorize: Option<bool>,
    /// caCertificate provides the cert authority certificate contents, in case the proxied Service is using custom service CA. By default, the service CA bundle provided by the service-ca operator is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// service is an in-cluster Service that the plugin will connect to. The Service must use HTTPS. The console backend exposes an endpoint in order to proxy communication between the plugin and the Service. Note: service field is required for now, since currently only "Service" type is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<ConsolePluginProxyService>,
    /// type is the type of the console plugin's proxy. Currently only "Service" is supported.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// service is an in-cluster Service that the plugin will connect to. The Service must use HTTPS. The console backend exposes an endpoint in order to proxy communication between the plugin and the Service. Note: service field is required for now, since currently only "Service" type is supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConsolePluginProxyService {
    /// name of Service that the plugin needs to connect to.
    pub name: String,
    /// namespace of Service that the plugin needs to connect to
    pub namespace: String,
    /// port on which the Service that the plugin needs to connect to is listening on.
    pub port: i32,
}

/// service is a Kubernetes Service that exposes the plugin using a deployment with an HTTP server. The Service must use HTTPS and Service serving certificate. The console backend will proxy the plugins assets from the Service using the service CA bundle.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConsolePluginService {
    /// basePath is the path to the plugin's assets. The primary asset it the manifest file called `plugin-manifest.json`, which is a JSON document that contains metadata about the plugin and the extensions.
    #[serde(rename = "basePath")]
    pub base_path: String,
    /// name of Service that is serving the plugin assets.
    pub name: String,
    /// namespace of Service that is serving the plugin assets.
    pub namespace: String,
    /// port on which the Service that is serving the plugin is listening to.
    pub port: i32,
}

