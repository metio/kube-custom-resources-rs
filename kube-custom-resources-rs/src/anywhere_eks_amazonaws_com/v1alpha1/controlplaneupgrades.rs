// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/eks-anywhere/anywhere.eks.amazonaws.com/v1alpha1/controlplaneupgrades.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// ControlPlaneUpgradeSpec defines the desired state of ControlPlaneUpgrade.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "anywhere.eks.amazonaws.com", version = "v1alpha1", kind = "ControlPlaneUpgrade", plural = "controlplaneupgrades")]
#[kube(namespaced)]
#[kube(status = "ControlPlaneUpgradeStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ControlPlaneUpgradeSpec {
    /// ControlPlane is a reference to the KubeadmControlPlane object to upgrade.
    #[serde(rename = "controlPlane")]
    pub control_plane: ObjectReference,
    /// ControlPlaneSpecData contains base64 encoded KCP spec that's used to update the statuses of CAPI objects once the control plane upgrade is done. This field is needed so that we have a static copy of the control plane spec in case it gets modified after the ControlPlaneUpgrade was created, as ControlPlane is a reference to the object in real time.
    #[serde(rename = "controlPlaneSpecData")]
    pub control_plane_spec_data: String,
    /// EtcdVersion refers to the version of ETCD to upgrade to.
    #[serde(rename = "etcdVersion")]
    pub etcd_version: String,
    /// KubernetesVersion refers to the Kubernetes version to upgrade the control planes to.
    #[serde(rename = "kubernetesVersion")]
    pub kubernetes_version: String,
    /// MachinesRequireUpgrade is a list of references to CAPI machines that need to be upgraded.
    #[serde(rename = "machinesRequireUpgrade")]
    pub machines_require_upgrade: Vec<ObjectReference>,
}

/// ControlPlane is a reference to the KubeadmControlPlane object to upgrade.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ControlPlaneUpgradeControlPlane {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// ControlPlaneUpgradeStatus defines the observed state of ControlPlaneUpgrade.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ControlPlaneUpgradeStatus {
    /// Ready denotes that the all control planes have finished upgrading and are ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
    /// RequireUpgrade is the number of machines that still need to be upgraded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireUpgrade")]
    pub require_upgrade: Option<i64>,
    /// Upgraded is the number of machines that have been upgraded.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgraded: Option<i64>,
}

