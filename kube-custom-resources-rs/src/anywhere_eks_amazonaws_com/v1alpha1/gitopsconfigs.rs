// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/eks-anywhere/anywhere.eks.amazonaws.com/v1alpha1/gitopsconfigs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// GitOps defines the configurations of GitOps Toolkit and Git repository it links to.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "anywhere.eks.amazonaws.com", version = "v1alpha1", kind = "GitOpsConfig", plural = "gitopsconfigs")]
#[kube(namespaced)]
#[kube(status = "GitOpsConfigStatus")]
#[kube(schema = "disabled")]
pub struct GitOpsConfigSpec {
    /// Flux defines the Git repository options for Flux v2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flux: Option<GitOpsConfigFlux>,
}

/// Flux defines the Git repository options for Flux v2.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GitOpsConfigFlux {
    /// github is the name of the Git Provider to host the Git repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<GitOpsConfigFluxGithub>,
}

/// github is the name of the Git Provider to host the Git repo.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GitOpsConfigFluxGithub {
    /// Git branch. Defaults to main.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    /// ClusterConfigPath relative to the repository root, when specified the cluster sync will be scoped to this path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterConfigPath")]
    pub cluster_config_path: Option<String>,
    /// FluxSystemNamespace scope for this operation. Defaults to flux-system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fluxSystemNamespace")]
    pub flux_system_namespace: Option<String>,
    /// Owner is the user or organization name of the Git provider.
    pub owner: String,
    /// if true, the owner is assumed to be a Git user; otherwise an org.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub personal: Option<bool>,
    /// Repository name.
    pub repository: String,
}

/// GitOpsConfigStatus defines the observed state of GitOpsConfig.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GitOpsConfigStatus {
}

