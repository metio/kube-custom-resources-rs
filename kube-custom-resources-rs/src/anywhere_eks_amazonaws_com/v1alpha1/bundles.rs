// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/eks-anywhere/anywhere.eks.amazonaws.com/v1alpha1/bundles.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// BundlesSpec defines the desired state of Bundles.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "anywhere.eks.amazonaws.com", version = "v1alpha1", kind = "Bundles", plural = "bundles")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BundlesSpec {
    #[serde(rename = "cliMaxVersion")]
    pub cli_max_version: String,
    #[serde(rename = "cliMinVersion")]
    pub cli_min_version: String,
    /// Monotonically increasing release number
    pub number: i64,
    #[serde(rename = "versionsBundles")]
    pub versions_bundles: Vec<BundlesVersionsBundles>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundles {
    /// This field has been deprecated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<BundlesVersionsBundlesAws>,
    pub bootstrap: BundlesVersionsBundlesBootstrap,
    #[serde(rename = "bottlerocketHostContainers")]
    pub bottlerocket_host_containers: BundlesVersionsBundlesBottlerocketHostContainers,
    #[serde(rename = "certManager")]
    pub cert_manager: BundlesVersionsBundlesCertManager,
    pub cilium: BundlesVersionsBundlesCilium,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudStack")]
    pub cloud_stack: Option<BundlesVersionsBundlesCloudStack>,
    #[serde(rename = "clusterAPI")]
    pub cluster_api: BundlesVersionsBundlesClusterApi,
    #[serde(rename = "controlPlane")]
    pub control_plane: BundlesVersionsBundlesControlPlane,
    pub docker: BundlesVersionsBundlesDocker,
    #[serde(rename = "eksD")]
    pub eks_d: BundlesVersionsBundlesEksD,
    pub eksa: BundlesVersionsBundlesEksa,
    #[serde(rename = "etcdadmBootstrap")]
    pub etcdadm_bootstrap: BundlesVersionsBundlesEtcdadmBootstrap,
    #[serde(rename = "etcdadmController")]
    pub etcdadm_controller: BundlesVersionsBundlesEtcdadmController,
    pub flux: BundlesVersionsBundlesFlux,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub haproxy: Option<BundlesVersionsBundlesHaproxy>,
    pub kindnetd: BundlesVersionsBundlesKindnetd,
    #[serde(rename = "kubeVersion")]
    pub kube_version: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<BundlesVersionsBundlesNutanix>,
    #[serde(rename = "packageController")]
    pub package_controller: BundlesVersionsBundlesPackageController,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snow: Option<BundlesVersionsBundlesSnow>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tinkerbell: Option<BundlesVersionsBundlesTinkerbell>,
    /// UpgraderBundle is a In-place Kubernetes version upgrader bundle.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrader: Option<BundlesVersionsBundlesUpgrader>,
    #[serde(rename = "vSphere")]
    pub v_sphere: BundlesVersionsBundlesVSphere,
}

/// This field has been deprecated
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAws {
    #[serde(rename = "clusterTemplate")]
    pub cluster_template: BundlesVersionsBundlesAwsClusterTemplate,
    pub components: BundlesVersionsBundlesAwsComponents,
    pub controller: BundlesVersionsBundlesAwsController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesAwsKubeProxy,
    pub metadata: BundlesVersionsBundlesAwsMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAwsClusterTemplate {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAwsComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAwsController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesAwsControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesAwsControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAwsKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesAwsKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesAwsKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesAwsMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBootstrap {
    pub components: BundlesVersionsBundlesBootstrapComponents,
    pub controller: BundlesVersionsBundlesBootstrapController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesBootstrapKubeProxy,
    pub metadata: BundlesVersionsBundlesBootstrapMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBootstrapComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBootstrapController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesBootstrapControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesBootstrapControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBootstrapKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesBootstrapKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesBootstrapKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBootstrapMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBottlerocketHostContainers {
    pub admin: BundlesVersionsBundlesBottlerocketHostContainersAdmin,
    pub control: BundlesVersionsBundlesBottlerocketHostContainersControl,
    #[serde(rename = "kubeadmBootstrap")]
    pub kubeadm_bootstrap: BundlesVersionsBundlesBottlerocketHostContainersKubeadmBootstrap,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBottlerocketHostContainersAdmin {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesBottlerocketHostContainersAdminOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesBottlerocketHostContainersAdminOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBottlerocketHostContainersControl {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesBottlerocketHostContainersControlOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesBottlerocketHostContainersControlOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesBottlerocketHostContainersKubeadmBootstrap {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesBottlerocketHostContainersKubeadmBootstrapOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesBottlerocketHostContainersKubeadmBootstrapOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManager {
    pub acmesolver: BundlesVersionsBundlesCertManagerAcmesolver,
    pub cainjector: BundlesVersionsBundlesCertManagerCainjector,
    pub controller: BundlesVersionsBundlesCertManagerController,
    pub ctl: BundlesVersionsBundlesCertManagerCtl,
    pub manifest: BundlesVersionsBundlesCertManagerManifest,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    pub webhook: BundlesVersionsBundlesCertManagerWebhook,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerAcmesolver {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCertManagerAcmesolverOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCertManagerAcmesolverOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerCainjector {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCertManagerCainjectorOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCertManagerCainjectorOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCertManagerControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCertManagerControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerCtl {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCertManagerCtlOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCertManagerCtlOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerManifest {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCertManagerWebhook {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCertManagerWebhookOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCertManagerWebhookOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCilium {
    pub cilium: BundlesVersionsBundlesCiliumCilium,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmChart")]
    pub helm_chart: Option<BundlesVersionsBundlesCiliumHelmChart>,
    pub manifest: BundlesVersionsBundlesCiliumManifest,
    pub operator: BundlesVersionsBundlesCiliumOperator,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCiliumCilium {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCiliumCiliumOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCiliumCiliumOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCiliumHelmChart {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCiliumHelmChartOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCiliumHelmChartOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCiliumManifest {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCiliumOperator {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCiliumOperatorOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCiliumOperatorOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStack {
    #[serde(rename = "clusterAPIController")]
    pub cluster_api_controller: BundlesVersionsBundlesCloudStackClusterApiController,
    pub components: BundlesVersionsBundlesCloudStackComponents,
    #[serde(rename = "kubeRbacProxy")]
    pub kube_rbac_proxy: BundlesVersionsBundlesCloudStackKubeRbacProxy,
    #[serde(rename = "kubeVip")]
    pub kube_vip: BundlesVersionsBundlesCloudStackKubeVip,
    pub metadata: BundlesVersionsBundlesCloudStackMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStackClusterApiController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCloudStackClusterApiControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCloudStackClusterApiControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStackComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStackKubeRbacProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCloudStackKubeRbacProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCloudStackKubeRbacProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStackKubeVip {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesCloudStackKubeVipOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesCloudStackKubeVipOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesCloudStackMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesClusterApi {
    pub components: BundlesVersionsBundlesClusterApiComponents,
    pub controller: BundlesVersionsBundlesClusterApiController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesClusterApiKubeProxy,
    pub metadata: BundlesVersionsBundlesClusterApiMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesClusterApiComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesClusterApiController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesClusterApiControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesClusterApiControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesClusterApiKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesClusterApiKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesClusterApiKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesClusterApiMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesControlPlane {
    pub components: BundlesVersionsBundlesControlPlaneComponents,
    pub controller: BundlesVersionsBundlesControlPlaneController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesControlPlaneKubeProxy,
    pub metadata: BundlesVersionsBundlesControlPlaneMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesControlPlaneComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesControlPlaneController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesControlPlaneControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesControlPlaneControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesControlPlaneKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesControlPlaneKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesControlPlaneKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesControlPlaneMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDocker {
    #[serde(rename = "clusterTemplate")]
    pub cluster_template: BundlesVersionsBundlesDockerClusterTemplate,
    pub components: BundlesVersionsBundlesDockerComponents,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesDockerKubeProxy,
    pub manager: BundlesVersionsBundlesDockerManager,
    pub metadata: BundlesVersionsBundlesDockerMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDockerClusterTemplate {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDockerComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDockerKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesDockerKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesDockerKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDockerManager {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesDockerManagerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesDockerManagerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesDockerMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksD {
    /// Ami points to a collection of AMIs built with this eks-d version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ami: Option<BundlesVersionsBundlesEksDAmi>,
    /// Release branch of the EKS-D release like 1-19, 1-20
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Components refers to the url that points to the EKS-D release CRD
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<String>,
    /// Containerd points to the containerd binary baked into this eks-D based node image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containerd: Option<BundlesVersionsBundlesEksDContainerd>,
    /// Crictl points to the crictl binary/tarball built for this eks-d kube version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub crictl: Option<BundlesVersionsBundlesEksDCrictl>,
    /// Etcdadm points to the etcdadm binary/tarball built for this eks-d kube version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etcdadm: Option<BundlesVersionsBundlesEksDEtcdadm>,
    /// Git commit the component is built from, before any patches
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitCommit")]
    pub git_commit: Option<String>,
    /// ImageBuilder points to the image-builder binary used to build eks-D based node images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub imagebuilder: Option<BundlesVersionsBundlesEksDImagebuilder>,
    /// KindNode points to a kind image built with this eks-d version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kindNode")]
    pub kind_node: Option<BundlesVersionsBundlesEksDKindNode>,
    /// Release number of EKS-D release
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    /// Url pointing to the EKS-D release manifest using which assets where created
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestUrl")]
    pub manifest_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Ova points to a collection of OVAs built with this eks-d version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova: Option<BundlesVersionsBundlesEksDOva>,
    /// Raw points to a collection of Raw images built with this eks-d version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<BundlesVersionsBundlesEksDRaw>,
}

/// Ami points to a collection of AMIs built with this eks-d version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDAmi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bottlerocket: Option<BundlesVersionsBundlesEksDAmiBottlerocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDAmiBottlerocket {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDAmiBottlerocketOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDAmiBottlerocketOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Containerd points to the containerd binary baked into this eks-D based node image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDContainerd {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDContainerdOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Containerd points to the containerd binary baked into this eks-D based node image
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDContainerdOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Crictl points to the crictl binary/tarball built for this eks-d kube version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDCrictl {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDCrictlOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Crictl points to the crictl binary/tarball built for this eks-d kube version
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDCrictlOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Etcdadm points to the etcdadm binary/tarball built for this eks-d kube version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDEtcdadm {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDEtcdadmOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Etcdadm points to the etcdadm binary/tarball built for this eks-d kube version
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDEtcdadmOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// ImageBuilder points to the image-builder binary used to build eks-D based node images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDImagebuilder {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDImagebuilderOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// ImageBuilder points to the image-builder binary used to build eks-D based node images
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDImagebuilderOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// KindNode points to a kind image built with this eks-d version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDKindNode {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDKindNodeOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// KindNode points to a kind image built with this eks-d version
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDKindNodeOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Ova points to a collection of OVAs built with this eks-d version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDOva {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bottlerocket: Option<BundlesVersionsBundlesEksDOvaBottlerocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDOvaBottlerocket {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDOvaBottlerocketOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDOvaBottlerocketOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Raw points to a collection of Raw images built with this eks-d version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDRaw {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bottlerocket: Option<BundlesVersionsBundlesEksDRawBottlerocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksDRawBottlerocket {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksDRawBottlerocketOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksDRawBottlerocketOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksa {
    #[serde(rename = "cliTools")]
    pub cli_tools: BundlesVersionsBundlesEksaCliTools,
    #[serde(rename = "clusterController")]
    pub cluster_controller: BundlesVersionsBundlesEksaClusterController,
    pub components: BundlesVersionsBundlesEksaComponents,
    #[serde(rename = "diagnosticCollector")]
    pub diagnostic_collector: BundlesVersionsBundlesEksaDiagnosticCollector,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksaCliTools {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksaCliToolsOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksaCliToolsOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksaClusterController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksaClusterControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksaClusterControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksaComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEksaDiagnosticCollector {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEksaDiagnosticCollectorOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEksaDiagnosticCollectorOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmBootstrap {
    pub components: BundlesVersionsBundlesEtcdadmBootstrapComponents,
    pub controller: BundlesVersionsBundlesEtcdadmBootstrapController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesEtcdadmBootstrapKubeProxy,
    pub metadata: BundlesVersionsBundlesEtcdadmBootstrapMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmBootstrapComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmBootstrapController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEtcdadmBootstrapControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEtcdadmBootstrapControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmBootstrapKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEtcdadmBootstrapKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEtcdadmBootstrapKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmBootstrapMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmController {
    pub components: BundlesVersionsBundlesEtcdadmControllerComponents,
    pub controller: BundlesVersionsBundlesEtcdadmControllerController,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesEtcdadmControllerKubeProxy,
    pub metadata: BundlesVersionsBundlesEtcdadmControllerMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmControllerComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmControllerController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEtcdadmControllerControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEtcdadmControllerControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmControllerKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesEtcdadmControllerKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesEtcdadmControllerKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesEtcdadmControllerMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesFlux {
    #[serde(rename = "helmController")]
    pub helm_controller: BundlesVersionsBundlesFluxHelmController,
    #[serde(rename = "kustomizeController")]
    pub kustomize_controller: BundlesVersionsBundlesFluxKustomizeController,
    #[serde(rename = "notificationController")]
    pub notification_controller: BundlesVersionsBundlesFluxNotificationController,
    #[serde(rename = "sourceController")]
    pub source_controller: BundlesVersionsBundlesFluxSourceController,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesFluxHelmController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesFluxHelmControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesFluxHelmControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesFluxKustomizeController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesFluxKustomizeControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesFluxKustomizeControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesFluxNotificationController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesFluxNotificationControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesFluxNotificationControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesFluxSourceController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesFluxSourceControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesFluxSourceControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesHaproxy {
    pub image: BundlesVersionsBundlesHaproxyImage,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesHaproxyImage {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesHaproxyImageOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesHaproxyImageOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesKindnetd {
    pub manifest: BundlesVersionsBundlesKindnetdManifest,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesKindnetdManifest {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanix {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudProvider")]
    pub cloud_provider: Option<BundlesVersionsBundlesNutanixCloudProvider>,
    #[serde(rename = "clusterAPIController")]
    pub cluster_api_controller: BundlesVersionsBundlesNutanixClusterApiController,
    #[serde(rename = "clusterTemplate")]
    pub cluster_template: BundlesVersionsBundlesNutanixClusterTemplate,
    pub components: BundlesVersionsBundlesNutanixComponents,
    #[serde(rename = "kubeVip")]
    pub kube_vip: BundlesVersionsBundlesNutanixKubeVip,
    pub metadata: BundlesVersionsBundlesNutanixMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixCloudProvider {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesNutanixCloudProviderOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesNutanixCloudProviderOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixClusterApiController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesNutanixClusterApiControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesNutanixClusterApiControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixClusterTemplate {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixKubeVip {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesNutanixKubeVipOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesNutanixKubeVipOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesNutanixMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesPackageController {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialProviderPackage")]
    pub credential_provider_package: Option<BundlesVersionsBundlesPackageControllerCredentialProviderPackage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmChart")]
    pub helm_chart: Option<BundlesVersionsBundlesPackageControllerHelmChart>,
    #[serde(rename = "packageController")]
    pub package_controller: BundlesVersionsBundlesPackageControllerPackageController,
    #[serde(rename = "tokenRefresher")]
    pub token_refresher: BundlesVersionsBundlesPackageControllerTokenRefresher,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesPackageControllerCredentialProviderPackage {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesPackageControllerCredentialProviderPackageOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesPackageControllerCredentialProviderPackageOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesPackageControllerHelmChart {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesPackageControllerHelmChartOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesPackageControllerHelmChartOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesPackageControllerPackageController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesPackageControllerPackageControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesPackageControllerPackageControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesPackageControllerTokenRefresher {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesPackageControllerTokenRefresherOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesPackageControllerTokenRefresherOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnow {
    #[serde(rename = "bottlerocketBootstrapSnow")]
    pub bottlerocket_bootstrap_snow: BundlesVersionsBundlesSnowBottlerocketBootstrapSnow,
    pub components: BundlesVersionsBundlesSnowComponents,
    #[serde(rename = "kubeVip")]
    pub kube_vip: BundlesVersionsBundlesSnowKubeVip,
    pub manager: BundlesVersionsBundlesSnowManager,
    pub metadata: BundlesVersionsBundlesSnowMetadata,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnowBottlerocketBootstrapSnow {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesSnowBottlerocketBootstrapSnowOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesSnowBottlerocketBootstrapSnowOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnowComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnowKubeVip {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesSnowKubeVipOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesSnowKubeVipOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnowManager {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesSnowManagerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesSnowManagerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesSnowMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbell {
    #[serde(rename = "clusterAPIController")]
    pub cluster_api_controller: BundlesVersionsBundlesTinkerbellClusterApiController,
    #[serde(rename = "clusterTemplate")]
    pub cluster_template: BundlesVersionsBundlesTinkerbellClusterTemplate,
    pub components: BundlesVersionsBundlesTinkerbellComponents,
    pub envoy: BundlesVersionsBundlesTinkerbellEnvoy,
    #[serde(rename = "kubeVip")]
    pub kube_vip: BundlesVersionsBundlesTinkerbellKubeVip,
    pub metadata: BundlesVersionsBundlesTinkerbellMetadata,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tinkerbellStack")]
    pub tinkerbell_stack: Option<BundlesVersionsBundlesTinkerbellTinkerbellStack>,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellClusterApiController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellClusterApiControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellClusterApiControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellClusterTemplate {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellEnvoy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellEnvoyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellEnvoyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellKubeVip {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellKubeVipOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellKubeVipOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStack {
    /// Tinkerbell Template Actions.
    pub actions: BundlesVersionsBundlesTinkerbellTinkerbellStackActions,
    pub boots: BundlesVersionsBundlesTinkerbellTinkerbellStackBoots,
    pub hegel: BundlesVersionsBundlesTinkerbellTinkerbellStackHegel,
    /// Tinkerbell hook OS.
    pub hook: BundlesVersionsBundlesTinkerbellTinkerbellStackHook,
    pub rufio: BundlesVersionsBundlesTinkerbellTinkerbellStackRufio,
    pub tink: BundlesVersionsBundlesTinkerbellTinkerbellStackTink,
    #[serde(rename = "tinkerbellChart")]
    pub tinkerbell_chart: BundlesVersionsBundlesTinkerbellTinkerbellStackTinkerbellChart,
}

/// Tinkerbell Template Actions.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActions {
    pub cexec: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsCexec,
    #[serde(rename = "imageToDisk")]
    pub image_to_disk: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsImageToDisk,
    pub kexec: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsKexec,
    #[serde(rename = "ociToDisk")]
    pub oci_to_disk: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsOciToDisk,
    pub reboot: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsReboot,
    #[serde(rename = "writeFile")]
    pub write_file: BundlesVersionsBundlesTinkerbellTinkerbellStackActionsWriteFile,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsCexec {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsCexecOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsCexecOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsImageToDisk {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsImageToDiskOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsImageToDiskOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsKexec {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsKexecOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsKexecOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsOciToDisk {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsOciToDiskOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsOciToDiskOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsReboot {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsRebootOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsRebootOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackActionsWriteFile {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackActionsWriteFileOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackActionsWriteFileOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackBoots {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackBootsOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackBootsOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHegel {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHegelOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHegelOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// Tinkerbell hook OS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHook {
    pub bootkit: BundlesVersionsBundlesTinkerbellTinkerbellStackHookBootkit,
    pub docker: BundlesVersionsBundlesTinkerbellTinkerbellStackHookDocker,
    pub initramfs: BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfs,
    pub kernel: BundlesVersionsBundlesTinkerbellTinkerbellStackHookKernel,
    pub vmlinuz: BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuz,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookBootkit {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookBootkitOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookBootkitOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookDocker {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookDockerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookDockerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfs {
    pub amd: BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsAmd,
    pub arm: BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsArm,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsAmd {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsAmdOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsAmdOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsArm {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsArmOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookInitramfsArmOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookKernel {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookKernelOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookKernelOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuz {
    pub amd: BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzAmd,
    pub arm: BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzArm,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzAmd {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzAmdOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzAmdOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzArm {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzArmOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The sha256 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    /// The sha512 of the asset, only applies for 'file' store
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    /// The URI where the asset is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackHookVmlinuzArmOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackRufio {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackRufioOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackRufioOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackTink {
    #[serde(rename = "tinkController")]
    pub tink_controller: BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkController,
    #[serde(rename = "tinkServer")]
    pub tink_server: BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkServer,
    #[serde(rename = "tinkWorker")]
    pub tink_worker: BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkWorker,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkServer {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkServerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkServerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkWorker {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkWorkerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackTinkTinkWorkerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesTinkerbellTinkerbellStackTinkerbellChart {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesTinkerbellTinkerbellStackTinkerbellChartOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesTinkerbellTinkerbellStackTinkerbellChartOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// UpgraderBundle is a In-place Kubernetes version upgrader bundle.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesUpgrader {
    pub upgrader: BundlesVersionsBundlesUpgraderUpgrader,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesUpgraderUpgrader {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesUpgraderUpgraderOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesUpgraderUpgraderOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphere {
    #[serde(rename = "clusterAPIController")]
    pub cluster_api_controller: BundlesVersionsBundlesVSphereClusterApiController,
    #[serde(rename = "clusterTemplate")]
    pub cluster_template: BundlesVersionsBundlesVSphereClusterTemplate,
    pub components: BundlesVersionsBundlesVSphereComponents,
    /// This field has been deprecated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<BundlesVersionsBundlesVSphereDriver>,
    #[serde(rename = "kubeProxy")]
    pub kube_proxy: BundlesVersionsBundlesVSphereKubeProxy,
    #[serde(rename = "kubeVip")]
    pub kube_vip: BundlesVersionsBundlesVSphereKubeVip,
    pub manager: BundlesVersionsBundlesVSphereManager,
    pub metadata: BundlesVersionsBundlesVSphereMetadata,
    /// This field has been deprecated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syncer: Option<BundlesVersionsBundlesVSphereSyncer>,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereClusterApiController {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereClusterApiControllerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereClusterApiControllerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereClusterTemplate {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereComponents {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// This field has been deprecated
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereDriver {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereDriverOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// This field has been deprecated
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereDriverOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereKubeProxy {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereKubeProxyOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereKubeProxyOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereKubeVip {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereKubeVipOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereKubeVipOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereManager {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereManagerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereManagerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereMetadata {
    /// URI points to the manifest yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// This field has been deprecated
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesVersionsBundlesVSphereSyncer {
    /// Architectures of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The SHA256 digest of the image manifest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    /// The asset name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Operating system of the asset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub os: Option<BundlesVersionsBundlesVSphereSyncerOs>,
    /// Name of the OS like ubuntu, bottlerocket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osName")]
    pub os_name: Option<String>,
    /// The image repository, name, and tag
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// This field has been deprecated
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BundlesVersionsBundlesVSphereSyncerOs {
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "darwin")]
    Darwin,
    #[serde(rename = "windows")]
    Windows,
}

/// BundlesStatus defines the observed state of Bundles.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BundlesStatus {
}

