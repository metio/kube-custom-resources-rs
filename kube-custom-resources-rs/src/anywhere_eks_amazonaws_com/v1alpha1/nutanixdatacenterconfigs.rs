// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/eks-anywhere/anywhere.eks.amazonaws.com/v1alpha1/nutanixdatacenterconfigs.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// NutanixDatacenterConfigSpec defines the desired state of NutanixDatacenterConfig.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "anywhere.eks.amazonaws.com", version = "v1alpha1", kind = "NutanixDatacenterConfig", plural = "nutanixdatacenterconfigs")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NutanixDatacenterConfigSpec {
    /// AdditionalTrustBundle is the optional PEM-encoded certificate bundle for users that configured their Prism Central with certificates from non-publicly trusted CAs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalTrustBundle")]
    pub additional_trust_bundle: Option<String>,
    /// CredentialRef is the reference to the secret name that contains the credentials for the Nutanix Prism Central. The namespace for the secret is assumed to be a constant i.e. eksa-system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialRef")]
    pub credential_ref: Option<NutanixDatacenterConfigCredentialRef>,
    /// Endpoint is the Endpoint of Nutanix Prism Central
    pub endpoint: String,
    /// FailureDomains is the optional list of failure domains for the Nutanix Datacenter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureDomains")]
    pub failure_domains: Option<Vec<NutanixDatacenterConfigFailureDomains>>,
    /// Insecure is the optional flag to skip TLS verification. Nutanix Prism Central installation by default ships with a self-signed certificate that will fail TLS verification because the certificate is not issued by a public CA and does not have the IP SANs with the Prism Central endpoint. To accommodate the scenario where the user has not changed the default Certificate that ships with Prism Central, we allow the user to skip TLS verification. This is not recommended for production use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// Port is the Port of Nutanix Prism Central
    pub port: i64,
}

/// CredentialRef is the reference to the secret name that contains the credentials for the Nutanix Prism Central. The namespace for the secret is assumed to be a constant i.e. eksa-system.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NutanixDatacenterConfigCredentialRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// NutanixDatacenterFailureDomain defines the failure domain for the Nutanix Datacenter.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NutanixDatacenterConfigFailureDomains {
    /// Cluster is the Prism Element cluster name or uuid that is connected to the Prism Central.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<NutanixDatacenterConfigFailureDomainsCluster>,
    /// Name is the unique name of the failure domain. Name must be between 1 and 64 characters long. It must consist of only lower case alphanumeric characters and hyphens (-). It must start and end with an alphanumeric character.
    pub name: String,
    /// Subnets holds the list of subnets identifiers cluster's network subnets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<NutanixDatacenterConfigFailureDomainsSubnets>>,
}

/// Cluster is the Prism Element cluster name or uuid that is connected to the Prism Central.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct NutanixDatacenterConfigFailureDomainsCluster {
    /// name is the resource name in the PC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type is the identifier type to use for this resource.
    #[serde(rename = "type")]
    pub r#type: NutanixDatacenterConfigFailureDomainsClusterType,
    /// uuid is the UUID of the resource in the PC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// Cluster is the Prism Element cluster name or uuid that is connected to the Prism Central.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NutanixDatacenterConfigFailureDomainsClusterType {
    #[serde(rename = "uuid")]
    Uuid,
    #[serde(rename = "name")]
    Name,
}

/// NutanixResourceIdentifier holds the identity of a Nutanix Prism resource (cluster, image, subnet, etc.)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct NutanixDatacenterConfigFailureDomainsSubnets {
    /// name is the resource name in the PC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type is the identifier type to use for this resource.
    #[serde(rename = "type")]
    pub r#type: NutanixDatacenterConfigFailureDomainsSubnetsType,
    /// uuid is the UUID of the resource in the PC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// NutanixResourceIdentifier holds the identity of a Nutanix Prism resource (cluster, image, subnet, etc.)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NutanixDatacenterConfigFailureDomainsSubnetsType {
    #[serde(rename = "uuid")]
    Uuid,
    #[serde(rename = "name")]
    Name,
}

/// NutanixDatacenterConfigStatus defines the observed state of NutanixDatacenterConfig.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NutanixDatacenterConfigStatus {
}

