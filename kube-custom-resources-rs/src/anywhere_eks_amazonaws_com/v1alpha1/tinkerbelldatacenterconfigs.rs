// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/eks-anywhere/anywhere.eks.amazonaws.com/v1alpha1/tinkerbelldatacenterconfigs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// TinkerbellDatacenterConfigSpec defines the desired state of TinkerbellDatacenterConfig.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "anywhere.eks.amazonaws.com", version = "v1alpha1", kind = "TinkerbellDatacenterConfig", plural = "tinkerbelldatacenterconfigs")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TinkerbellDatacenterConfigSpec {
    /// HookImagesURLPath can be used to override the default Hook images path to pull from a local server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hookImagesURLPath")]
    pub hook_images_url_path: Option<String>,
    /// OSImageURL can be used to override the default OS image path to pull from a local server. OSImageURL is a URL to the OS image used during provisioning. To perform modular upgrades the OSImageURL must be specified on the TinkerbellMachineConfig objects. You cannot specify an OSImageURL on the TinkerbellDatacenterConfig and TinkerbellMachineConfigs simultaneously. It must include the Kubernetes version(s). For example, a URL used for Kubernetes 1.27 could be http://localhost:8080/ubuntu-2204-1.27.tgz
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osImageURL")]
    pub os_image_url: Option<String>,
    /// SkipLoadBalancerDeployment when set to "true" can be used to skip deploying a load balancer to expose Tinkerbell stack. Users will need to deploy and configure a load balancer manually after the cluster is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLoadBalancerDeployment")]
    pub skip_load_balancer_deployment: Option<bool>,
    /// TinkerbellIP is used to configure a VIP for hosting the Tinkerbell services.
    #[serde(rename = "tinkerbellIP")]
    pub tinkerbell_ip: String,
}

/// TinkerbellDatacenterConfigStatus defines the observed state of TinkerbellDatacenterConfig 
///  Important: Run "make generate" to regenerate code after modifying this file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TinkerbellDatacenterConfigStatus {
}

