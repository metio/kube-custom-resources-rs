// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/linki/cloudformation-operator/cloudformation.linki.space/v1alpha1/stacks.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Defines the desired state of Stack
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "cloudformation.linki.space", version = "v1alpha1", kind = "Stack", plural = "stacks")]
#[kube(namespaced)]
#[kube(status = "StackStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StackSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    pub template: String,
}

/// Defines the observed state of Stack
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTime")]
    pub created_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<StackStatusResources>>,
    #[serde(rename = "stackID")]
    pub stack_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackStatus")]
    pub stack_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedTime")]
    pub updated_time: Option<String>,
}

/// Defines a resource provided/managed by a Stack and its current state
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackStatusResources {
    #[serde(rename = "logicalID")]
    pub logical_id: String,
    #[serde(rename = "physicalID")]
    pub physical_id: String,
    pub status: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusReason")]
    pub status_reason: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

