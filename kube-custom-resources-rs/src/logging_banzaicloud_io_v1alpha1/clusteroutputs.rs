// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1alpha1/clusteroutputs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1alpha1", kind = "ClusterOutput", plural = "clusteroutputs")]
#[kube(namespaced)]
#[kube(status = "ClusterOutputStatus")]
#[kube(schema = "disabled")]
pub struct ClusterOutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticsearch")]
    pub aws_elasticsearch: Option<ClusterOutputAwsElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azurestorage: Option<ClusterOutputAzurestorage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cloudwatch: Option<ClusterOutputCloudwatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<ClusterOutputDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<ClusterOutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledNamespaces")]
    pub enabled_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<ClusterOutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward: Option<ClusterOutputForward>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<ClusterOutputGcs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gelf: Option<ClusterOutputGelf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<ClusterOutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka: Option<ClusterOutputKafka>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisFirehose")]
    pub kinesis_firehose: Option<ClusterOutputKinesisFirehose>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisStream")]
    pub kinesis_stream: Option<ClusterOutputKinesisStream>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logdna: Option<ClusterOutputLogdna>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logz: Option<ClusterOutputLogz>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<ClusterOutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mattermost: Option<ClusterOutputMattermost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub newrelic: Option<ClusterOutputNewrelic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nullout: Option<ClusterOutputNullout>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opensearch: Option<ClusterOutputOpensearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oss: Option<ClusterOutputOss>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<ClusterOutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relabel: Option<ClusterOutputRelabel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<ClusterOutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splunkHec")]
    pub splunk_hec: Option<ClusterOutputSplunkHec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sqs: Option<ClusterOutputSqs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumologic: Option<ClusterOutputSumologic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<ClusterOutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<ClusterOutputAwsElasticsearchApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputAwsElasticsearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<ClusterOutputAwsElasticsearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<ClusterOutputAwsElasticsearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<ClusterOutputAwsElasticsearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<ClusterOutputAwsElasticsearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_elasticsearch_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deflector_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ilm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<ClusterOutputAwsElasticsearchEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_es_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputAwsElasticsearchFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_es_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_es_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputAwsElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollover_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_max_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_min_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_type_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<ClusterOutputAwsElasticsearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_es_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<ClusterOutputAwsElasticsearchEndpointAccessKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_arn: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleArn>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_session_name: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_web_identity_token_file: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ecs_container_credentials_relative_uri: Option<ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<ClusterOutputAwsElasticsearchEndpointSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sts_credentials_region: Option<ClusterOutputAwsElasticsearchEndpointStsCredentialsRegion>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAccessKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointAccessKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAccessKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAccessKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAccessKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleArn {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleArnMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleArnValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleArnMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleArnMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleArnMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleArnValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleArnValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleArnValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionName {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointSecretAccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointSecretAccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointSecretAccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointSecretAccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointSecretAccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointStsCredentialsRegion {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchEndpointStsCredentialsRegionValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputAwsElasticsearchFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputAwsElasticsearchFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAwsElasticsearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAwsElasticsearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAwsElasticsearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAwsElasticsearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_container: Option<bool>,
    pub azure_container: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_imds_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_storage_access_key: Option<ClusterOutputAzurestorageAzureStorageAccessKey>,
    pub azure_storage_account: ClusterOutputAzurestorageAzureStorageAccount,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_storage_sas_token: Option<ClusterOutputAzurestorageAzureStorageSasToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputAzurestorageBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAzurestorageAzureStorageAccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAzurestorageAzureStorageAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageAccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccount {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAzurestorageAzureStorageAccountMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAzurestorageAzureStorageAccountValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccountMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageAccountMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccountMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccountValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageAccountValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageAccountValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageSasToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputAzurestorageAzureStorageSasTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputAzurestorageAzureStorageSasTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageSasTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageSasTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageSasTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageSasTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputAzurestorageAzureStorageSasTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageAzureStorageSasTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputAzurestorageBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_stream: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_instance_profile_credentials_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<ClusterOutputCloudwatchAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<ClusterOutputCloudwatchAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sts_role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sts_session_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_use_sts: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputCloudwatchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputCloudwatchFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_handler: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub localtime: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_aws_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_aws_tags_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_rejected_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_stream_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_events_per_batch: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_message_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_disable_retry_limit: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_retry_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_retry_wait: Option<String>,
    pub region: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_group_aws_tags_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_group_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_stream_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_retention_in_days: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention_in_days: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention_in_days_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_tag_as_group: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_tag_as_stream: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputCloudwatchAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputCloudwatchAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputCloudwatchAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputCloudwatchAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputCloudwatchAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputCloudwatchAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputCloudwatchAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputCloudwatchAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputCloudwatchFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputCloudwatchFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputCloudwatchFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadog {
    pub api_key: ClusterOutputDatadogApiKey,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputDatadogBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_sourcecategory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_backoff: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retries: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub no_ssl_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_http: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_json: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputDatadogApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputDatadogApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputDatadogApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputDatadogApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputDatadogBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<ClusterOutputElasticsearchApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputElasticsearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<ClusterOutputElasticsearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<ClusterOutputElasticsearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<ClusterOutputElasticsearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<ClusterOutputElasticsearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_elasticsearch_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deflector_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ilm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_es_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_es_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_es_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollover_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_max_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_min_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_type_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<ClusterOutputElasticsearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_es_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputElasticsearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputElasticsearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputElasticsearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputElasticsearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_path_suffix: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputFileBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputFileFormat>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recompress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub symlink_path: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputFileBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputFileFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputFileFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputFileFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForward {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ack_response_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputForwardBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns_round_robin: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expire_dns_cache: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hard_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub heartbeat_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub heartbeat_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_network_errors_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phi_failure_detector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phi_threshold: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recover_wait: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_ack_response: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<ClusterOutputForwardSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub send_timeout: Option<i64>,
    pub servers: Vec<ClusterOutputForwardServers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_allow_self_signed_cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_logical_store_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_path: Option<ClusterOutputForwardTlsCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_thumbprint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_use_enterprise_store: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ciphers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_path: Option<ClusterOutputForwardTlsClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_private_key_passphrase: Option<ClusterOutputForwardTlsClientPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_private_key_path: Option<ClusterOutputForwardTlsClientPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_insecure_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_verify_hostname: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_connection_at_startup: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardSecurity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_anonymous_source: Option<bool>,
    pub self_hostname: String,
    pub shared_key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_auth: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServers {
    pub host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputForwardServersPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared_key: Option<ClusterOutputForwardServersSharedKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub standby: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<ClusterOutputForwardServersUsername>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardServersPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardServersPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersSharedKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardServersSharedKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardServersSharedKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersSharedKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersSharedKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersSharedKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersSharedKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersSharedKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersSharedKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardServersUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardServersUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardServersUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardServersUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardTlsCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardTlsCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardTlsClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardTlsClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardTlsClientPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardTlsClientPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputForwardTlsClientPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputForwardTlsClientPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputForwardTlsClientPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputForwardTlsClientPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<bool>,
    pub bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputGcsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials_json: Option<ClusterOutputGcsCredentialsJson>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputGcsFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_metadata: Option<Vec<ClusterOutputGcsObjectMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transcoding: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsCredentialsJson {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputGcsCredentialsJsonMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputGcsCredentialsJsonValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsCredentialsJsonMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputGcsCredentialsJsonMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsCredentialsJsonMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsCredentialsJsonValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputGcsCredentialsJsonValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsCredentialsJsonValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputGcsFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputGcsFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGcsObjectMetadata {
    pub key: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputGelf {
    pub host: String,
    pub port: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_options: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ClusterOutputHttpAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputHttpBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    pub endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error_response_as_unrecoverable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputHttpFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_array: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retryable_response_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ca_cert_path: Option<ClusterOutputHttpTlsCaCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ciphers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_path: Option<ClusterOutputHttpTlsClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_private_key_passphrase: Option<ClusterOutputHttpTlsPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_private_key_path: Option<ClusterOutputHttpTlsPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_verify_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuth {
    pub password: ClusterOutputHttpAuthPassword,
    pub username: ClusterOutputHttpAuthUsername,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpAuthPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpAuthPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpAuthPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpAuthPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpAuthUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpAuthUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpAuthUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpAuthUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpAuthUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputHttpFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputHttpFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsCaCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpTlsCaCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpTlsCaCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsCaCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsCaCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsCaCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsCaCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsCaCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsCaCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpTlsClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpTlsClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpTlsPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpTlsPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputHttpTlsPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputHttpTlsPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputHttpTlsPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputHttpTlsPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafka {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ack_timeout: Option<i64>,
    pub brokers: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputKafkaBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_codec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discard_kafka_delivery_failed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_partion_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_topic_key: Option<bool>,
    pub format: ClusterOutputKafkaFormat,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get_kafka_client_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers_from_record: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idempotent: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka_agg_max_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka_agg_max_messages: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keytab: Option<ClusterOutputKafkaKeytab>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_send_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputKafkaPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principal: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_acks: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sasl_over_ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scram_mechanism: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ca_cert: Option<ClusterOutputKafkaSslCaCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ca_certs_from_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert: Option<ClusterOutputKafkaSslClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert_chain: Option<ClusterOutputKafkaSslClientCertChain>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert_key: Option<ClusterOutputKafkaSslClientCertKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify_hostname: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_default_for_unknown_topic: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<ClusterOutputKafkaUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputKafkaFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputKafkaFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaKeytab {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaKeytabMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaKeytabValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaKeytabMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaKeytabMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaKeytabMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaKeytabValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaKeytabValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaKeytabValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslCaCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaSslCaCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaSslCaCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslCaCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslCaCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslCaCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslCaCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslCaCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslCaCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaSslClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaSslClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertChain {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaSslClientCertChainMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaSslClientCertChainValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertChainMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertChainMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertChainMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertChainValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertChainValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertChainValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaSslClientCertKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaSslClientCertKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaSslClientCertKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaSslClientCertKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKafkaUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKafkaUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKafkaUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKafkaUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehose {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append_new_line: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_credentials: Option<ClusterOutputKinesisFirehoseAssumeRoleCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iam_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<ClusterOutputKinesisFirehoseAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<ClusterOutputKinesisFirehoseAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_ses_token: Option<ClusterOutputKinesisFirehoseAwsSesToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputKinesisFirehoseBuffer>,
    pub delivery_stream_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputKinesisFirehoseFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process_credentials: Option<ClusterOutputKinesisFirehoseProcessCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reset_backoff_if_success: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries_on_batch_request: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAssumeRoleCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    pub role_arn: String,
    pub role_session_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisFirehoseAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisFirehoseAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisFirehoseAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisFirehoseAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSesToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisFirehoseAwsSesTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisFirehoseAwsSesTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSesTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsSesTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSesTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSesTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisFirehoseAwsSesTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseAwsSesTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputKinesisFirehoseFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputKinesisFirehoseFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisFirehoseProcessCredentials {
    pub process: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_credentials: Option<ClusterOutputKinesisStreamAssumeRoleCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iam_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<ClusterOutputKinesisStreamAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<ClusterOutputKinesisStreamAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_ses_token: Option<ClusterOutputKinesisStreamAwsSesToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputKinesisStreamBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputKinesisStreamFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process_credentials: Option<ClusterOutputKinesisStreamProcessCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reset_backoff_if_success: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries_on_batch_request: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    pub stream_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAssumeRoleCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    pub role_arn: String,
    pub role_session_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisStreamAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisStreamAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisStreamAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisStreamAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSesToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputKinesisStreamAwsSesTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputKinesisStreamAwsSesTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSesTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsSesTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSesTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSesTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputKinesisStreamAwsSesTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamAwsSesTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputKinesisStreamFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputKinesisStreamFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputKinesisStreamProcessCredentials {
    pub process: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogdna {
    pub api_key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputLogdnaBuffer>,
    pub hostname: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingester_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingester_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogdnaBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogz {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputLogzBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_limit_warning_limit: Option<i64>,
    pub endpoint: ClusterOutputLogzEndpoint,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gzip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_include_tags: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_include_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_sleep: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<ClusterOutputLogzEndpointToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpointToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLogzEndpointTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLogzEndpointTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpointTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLogzEndpointTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpointTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpointTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLogzEndpointTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLogzEndpointTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputLokiBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_cert: Option<ClusterOutputLokiCaCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<ClusterOutputLokiCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configure_kubernetes_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_single_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extract_kubernetes_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_thread_label: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<ClusterOutputLokiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputLokiPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<ClusterOutputLokiUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCaCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLokiCaCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLokiCaCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCaCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiCaCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCaCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCaCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiCaCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCaCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLokiCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLokiCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLokiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLokiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLokiPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLokiPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputLokiUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputLokiUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputLokiUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputLokiUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_path: Option<ClusterOutputMattermostCaPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_title: Option<String>,
    pub webhook_url: ClusterOutputMattermostWebhookUrl,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostCaPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputMattermostCaPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputMattermostCaPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostCaPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputMattermostCaPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostCaPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostCaPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputMattermostCaPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostCaPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostWebhookUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputMattermostWebhookUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputMattermostWebhookUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostWebhookUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputMattermostWebhookUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostWebhookUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostWebhookUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputMattermostWebhookUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputMattermostWebhookUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<ClusterOutputNewrelicApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub base_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputNewrelicBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputNewrelicFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license_key: Option<ClusterOutputNewrelicLicenseKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputNewrelicApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputNewrelicApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputNewrelicApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputNewrelicApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputNewrelicFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputNewrelicFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicLicenseKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputNewrelicLicenseKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputNewrelicLicenseKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicLicenseKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputNewrelicLicenseKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicLicenseKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicLicenseKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputNewrelicLicenseKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNewrelicLicenseKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputNullout {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputOpensearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<ClusterOutputOpensearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub catch_transport_exception_on_retry: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<ClusterOutputOpensearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<ClusterOutputOpensearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<ClusterOutputOpensearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_opensearch_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_error_for_missing_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_error_label_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_os_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend_excon_nonblock: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_os_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_os_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputOpensearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_affinity: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<ClusterOutputOpensearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_exclude_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub truncate_caches_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_record_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_os_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOpensearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOpensearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOpensearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOpensearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOss {
    pub access_key_id: ClusterOutputOssAccessKeyId,
    pub access_key_secret: ClusterOutputOssAccessKeySecret,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<bool>,
    pub bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputOssBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_bucket: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_object: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub download_crc_enable: Option<bool>,
    pub endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputOssFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oss_sdk_log_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_crc_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warn_for_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOssAccessKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOssAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOssAccessKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOssAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeySecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputOssAccessKeySecretMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputOssAccessKeySecretValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeySecretMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOssAccessKeySecretMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeySecretMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeySecretValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputOssAccessKeySecretValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssAccessKeySecretValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputOssFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputOssFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputOssFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_duplicate_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputRedisBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_number: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputRedisFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insert_key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<ClusterOutputRedisPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strftime_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputRedisFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputRedisFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputRedisPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputRedisPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputRedisPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputRedisPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRedisPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputRelabel {
    pub label: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_credentials: Option<ClusterOutputS3AssumeRoleCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iam_retries: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<ClusterOutputS3AwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<ClusterOutputS3AwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputS3Buffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_apikey_on_start: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_object: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clustername: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<ClusterOutputS3Compress>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compute_checksums: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_transfer_acceleration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force_path_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputS3Format>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_full_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_read: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_read_acp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_write_acp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance_profile_credentials: Option<ClusterOutputS3InstanceProfileCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oneeye_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy_uri: Option<String>,
    pub s3_bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared_credentials: Option<ClusterOutputS3SharedCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signature_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_key_md5: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssekms_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify_peer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_bundled_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_server_side_encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warn_for_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AssumeRoleCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    pub role_arn: String,
    pub role_session_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputS3AwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputS3AwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputS3AwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputS3AwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputS3AwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputS3AwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputS3AwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputS3AwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3AwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3Buffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3Compress {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_compression_codec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_page_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_row_group_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3Format {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputS3FormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputS3FormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3InstanceProfileCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_open_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_read_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputS3SharedCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputSplunkHecBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<ClusterOutputSplunkHecCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_path: Option<ClusterOutputSplunkHecCaPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<ClusterOutputSplunkHecClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<ClusterOutputSplunkHecClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub coerce_to_utf8: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputSplunkHecFormat>,
    pub hec_host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hec_port: Option<i64>,
    pub hec_token: ClusterOutputSplunkHecHecToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_keys: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_value_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics_from_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub non_utf8_replacement_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ciphers: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSplunkHecCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSplunkHecCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSplunkHecCaPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSplunkHecCaPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecCaPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecCaPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecCaPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSplunkHecClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSplunkHecClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSplunkHecClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSplunkHecClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputSplunkHecFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputSplunkHecFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecHecToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSplunkHecHecTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSplunkHecHecTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecHecTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecHecTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecHecTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecHecTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSplunkHecHecTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSplunkHecHecTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<ClusterOutputSqsAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<ClusterOutputSqsAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputSqsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_queue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sqs_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_property_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSqsAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSqsAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSqsAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSqsAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSqsAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSqsAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSqsAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSqsAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSqsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputSumologicBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress_encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_dimensions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_cookies: Option<bool>,
    pub endpoint: ClusterOutputSumologicEndpoint,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_data_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host: Option<String>,
    pub source_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumo_client: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSumologicEndpointMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSumologicEndpointValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicEndpointMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSumologicEndpointMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicEndpointMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicEndpointValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSumologicEndpointValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSumologicEndpointValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_self_signed_cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<ClusterOutputSyslogBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert_path: Option<ClusterOutputSyslogClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_system_cert_store: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterOutputSyslogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    pub host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private_key_passphrase: Option<ClusterOutputSyslogPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private_key_path: Option<ClusterOutputSyslogPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trusted_ca_path: Option<ClusterOutputSyslogTrustedCaPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_fqdn: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSyslogClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSyslogClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_name_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_id_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proc_id_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rfc6587_message_size: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub structured_data_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterOutputSyslogFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOutputSyslogFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSyslogPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSyslogPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSyslogPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSyslogPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogTrustedCaPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterOutputSyslogTrustedCaPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterOutputSyslogTrustedCaPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogTrustedCaPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogTrustedCaPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogTrustedCaPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogTrustedCaPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterOutputSyslogTrustedCaPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputSyslogTrustedCaPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

