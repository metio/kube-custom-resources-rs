// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/banzaicloud/koperator/kafka.banzaicloud.io/v1alpha1/kafkatopics.yaml --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// KafkaTopicSpec defines the desired state of KafkaTopic
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "kafka.banzaicloud.io", version = "v1alpha1", kind = "KafkaTopic", plural = "kafkatopics")]
#[kube(namespaced)]
#[kube(status = "KafkaTopicStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct KafkaTopicSpec {
    /// ClusterReference states a reference to a cluster for topic/user provisioning
    #[serde(rename = "clusterRef")]
    pub cluster_ref: KafkaTopicClusterRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    pub name: String,
    /// Partitions defines the desired number of partitions; must be positive, or -1 to signify using the broker's default
    pub partitions: i32,
    /// ReplicationFactor defines the desired replication factor; must be positive, or -1 to signify using the broker's default
    #[serde(rename = "replicationFactor")]
    pub replication_factor: i32,
}

/// ClusterReference states a reference to a cluster for topic/user provisioning
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KafkaTopicClusterRef {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// KafkaTopicStatus defines the observed state of KafkaTopic
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KafkaTopicStatus {
    /// ManagedBy describes who is the manager of the Kafka topic. When its value is not "koperator" then modifications to the topic configurations of the KafkaTopic CR will not be propagated to the Kafka topic. Manager of the Kafka topic can be changed by adding the "managedBy: <manager>" annotation to the KafkaTopic CR.
    #[serde(rename = "managedBy")]
    pub managed_by: String,
    /// TopicState defines the state of a KafkaTopic
    pub state: String,
}

