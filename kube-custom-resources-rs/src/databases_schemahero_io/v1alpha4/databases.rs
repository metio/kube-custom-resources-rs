// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/schemahero/schemahero/databases.schemahero.io/v1alpha4/databases.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "databases.schemahero.io", version = "v1alpha4", kind = "Database", plural = "databases")]
#[kube(namespaced)]
#[kube(status = "DatabaseStatus")]
#[kube(schema = "disabled")]
pub struct DatabaseSpec {
    /// DatabaseConnection defines connection parameters for the database driver
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<DatabaseConnection>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploySeedData")]
    pub deploy_seed_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableShellCommand")]
    pub enable_shell_command: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "immediateDeploy")]
    pub immediate_deploy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schemahero: Option<DatabaseSchemahero>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<DatabaseTemplate>,
}

/// DatabaseConnection defines connection parameters for the database driver
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cassandra: Option<DatabaseConnectionCassandra>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cockroachdb: Option<DatabaseConnectionCockroachdb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mysql: Option<DatabaseConnectionMysql>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres: Option<DatabaseConnectionPostgres>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rqlite: Option<DatabaseConnectionRqlite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sqlite: Option<DatabaseConnectionSqlite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timescaledb: Option<DatabaseConnectionTimescaledb>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandra {
    pub hosts: Vec<String>,
    pub keyspace: DatabaseConnectionCassandraKeyspace,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionCassandraPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<DatabaseConnectionCassandraUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspace {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraKeyspaceValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraKeyspaceValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCassandraKeyspaceValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCassandraKeyspaceValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraKeyspaceValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraPasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCassandraPasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCassandraPasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraPasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsername {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraUsernameValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCassandraUsernameValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCassandraUsernameValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCassandraUsernameValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dbname: Option<DatabaseConnectionCockroachdbDbname>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<DatabaseConnectionCockroachdbHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionCockroachdbPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<DatabaseConnectionCockroachdbPort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<DatabaseConnectionCockroachdbSchema>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sslmode: Option<DatabaseConnectionCockroachdbSslmode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<DatabaseConnectionCockroachdbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DatabaseConnectionCockroachdbUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbname {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbDbnameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbDbnameValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbDbnameValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbDbnameValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbDbnameValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbHostValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbHostValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbHostValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbHostValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbHostValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbPasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbPasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPort {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPortValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPortValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbPortValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbPortValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbPortValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSchemaValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSchemaValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbSchemaValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbSchemaValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSchemaValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmode {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSslmodeValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSslmodeValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbSslmodeValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbSslmodeValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUri {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUriValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbUriValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbUriValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUriValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUserValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUserValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionCockroachdbUserValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionCockroachdbUserValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionCockroachdbUserValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dbname: Option<DatabaseConnectionMysqlDbname>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultCharset")]
    pub default_charset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTLS")]
    pub disable_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<DatabaseConnectionMysqlHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionMysqlPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<DatabaseConnectionMysqlPort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<DatabaseConnectionMysqlUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DatabaseConnectionMysqlUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbname {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlDbnameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlDbnameValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlDbnameValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlDbnameValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlDbnameValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlHostValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlHostValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlHostValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlHostValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlHostValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlHostValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlHostValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlHostValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlHostValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlHostValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlPasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlPasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPort {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPortValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPortValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlPortValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlPortValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlPortValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlPortValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPortValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPortValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlPortValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlPortValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUri {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUriValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlUriValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlUriValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlUriValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlUriValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUriValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUriValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUriValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUriValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUserValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUserValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionMysqlUserValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionMysqlUserValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionMysqlUserValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionMysqlUserValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUserValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUserValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionMysqlUserValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionMysqlUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionMysqlUserValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgres {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dbname: Option<DatabaseConnectionPostgresDbname>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<DatabaseConnectionPostgresHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionPostgresPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<DatabaseConnectionPostgresPort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<DatabaseConnectionPostgresSchema>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sslmode: Option<DatabaseConnectionPostgresSslmode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<DatabaseConnectionPostgresUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DatabaseConnectionPostgresUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbname {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresDbnameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresDbnameValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresDbnameValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresDbnameValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresDbnameValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresHostValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresHostValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresHostValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresHostValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresHostValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresHostValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresHostValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresHostValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresHostValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresHostValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresPasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresPasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPort {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPortValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPortValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresPortValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresPortValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresPortValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresPortValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPortValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPortValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresPortValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresPortValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSchemaValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSchemaValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresSchemaValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresSchemaValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSchemaValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmode {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSslmodeValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSslmodeValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresSslmodeValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresSslmodeValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresSslmodeValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUri {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUriValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresUriValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresUriValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresUriValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresUriValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUriValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUriValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUriValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUriValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUserValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUserValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionPostgresUserValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionPostgresUserValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionPostgresUserValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionPostgresUserValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUserValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUserValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionPostgresUserValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionPostgresUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionPostgresUserValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlite {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTLS")]
    pub disable_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<DatabaseConnectionRqliteHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionRqlitePassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<DatabaseConnectionRqlitePort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<DatabaseConnectionRqliteUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DatabaseConnectionRqliteUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteHostValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteHostValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionRqliteHostValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionRqliteHostValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionRqliteHostValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionRqliteHostValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteHostValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteHostValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteHostValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteHostValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionRqlitePasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionRqlitePasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePort {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePortValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePortValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionRqlitePortValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionRqlitePortValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionRqlitePortValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionRqlitePortValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePortValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePortValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqlitePortValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqlitePortValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqlitePortValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUri {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUriValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionRqliteUriValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionRqliteUriValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionRqliteUriValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionRqliteUriValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUriValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUriValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUriValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUriValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUserValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUserValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionRqliteUserValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionRqliteUserValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionRqliteUserValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionRqliteUserValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUserValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUserValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionRqliteUserValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionRqliteUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionRqliteUserValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionSqlite {
    pub dsn: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dbname: Option<DatabaseConnectionTimescaledbDbname>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<DatabaseConnectionTimescaledbHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DatabaseConnectionTimescaledbPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<DatabaseConnectionTimescaledbPort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<DatabaseConnectionTimescaledbSchema>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sslmode: Option<DatabaseConnectionTimescaledbSslmode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<DatabaseConnectionTimescaledbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DatabaseConnectionTimescaledbUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbname {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbDbnameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbDbnameValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbDbnameValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbDbnameValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbDbnameValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbHostValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbHostValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbHostValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbHostValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbHostValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPasswordValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbPasswordValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbPasswordValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPasswordValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPort {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPortValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPortValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbPortValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbPortValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbPortValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSchemaValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSchemaValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbSchemaValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbSchemaValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSchemaValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmode {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSslmodeValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSslmodeValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbSslmodeValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbSslmodeValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUri {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUriValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbUriValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbUriValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUriValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUserValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUserValueFromSecretKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssm: Option<DatabaseConnectionTimescaledbUserValueFromSsm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<DatabaseConnectionTimescaledbUserValueFromVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyId>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withDecryption")]
    pub with_decryption: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyId {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKey {
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromSsmSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseConnectionTimescaledbUserValueFromVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentInject")]
    pub agent_inject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTemplate")]
    pub connection_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuthEndpoint")]
    pub kubernetes_auth_endpoint: Option<String>,
    pub role: String,
    pub secret: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountNamespace")]
    pub service_account_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSchemahero {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<DatabaseSchemaheroTolerations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSchemaheroTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DatabaseTemplateMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// DatabaseStatus defines the observed state of Database
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseStatus {
    #[serde(rename = "isConnected")]
    pub is_connected: bool,
    #[serde(rename = "lastPing")]
    pub last_ping: String,
}

