// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/infinispan/infinispan-operator/infinispan.org/v2alpha1/restores.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// BackupSpec defines the desired state of Backup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "infinispan.org", version = "v2alpha1", kind = "Restore", plural = "restores")]
#[kube(namespaced)]
#[kube(status = "RestoreStatus")]
#[kube(schema = "disabled")]
pub struct RestoreSpec {
    /// The Infinispan Backup to restore
    pub backup: String,
    /// Infinispan cluster name
    pub cluster: String,
    /// InfinispanContainerSpec specify resource requirements per container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<RestoreContainer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<RestoreResources>,
}

/// InfinispanContainerSpec specify resource requirements per container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreContainer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliExtraJvmOpts")]
    pub cli_extra_jvm_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraJvmOpts")]
    pub extra_jvm_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerExtraJvmOpts")]
    pub router_extra_jvm_opts: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreResources {
    /// Deprecated and to be removed on subsequent release. Use .Templates instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheConfigs")]
    pub cache_configs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caches: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub counters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoSchemas")]
    pub proto_schemas: Option<Vec<String>>,
    /// Deprecated and to be removed on subsequent release. Use .Tasks instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scripts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<Vec<String>>,
}

/// RestoreStatus defines the observed state of Restore
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreStatus {
    /// Current phase of the restore operation
    pub phase: String,
    /// Reason indicates the reason for any restore related failures.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

