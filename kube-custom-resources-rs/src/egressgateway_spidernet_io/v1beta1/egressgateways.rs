// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/spidernet-io/egressgateway/egressgateway.spidernet.io/v1beta1/egressgateways.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "egressgateway.spidernet.io", version = "v1beta1", kind = "EgressGateway", plural = "egressgateways")]
#[kube(status = "EgressGatewayStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct EgressGatewaySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDefault")]
    pub cluster_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ippools: Option<EgressGatewayIppools>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<EgressGatewayNodeSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayIppools {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv4: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4DefaultEIP")]
    pub ipv4_default_eip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6DefaultEIP")]
    pub ipv6_default_eip: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayNodeSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<EgressGatewayNodeSelectorSelector>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayNodeSelectorSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<EgressGatewayNodeSelectorSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayNodeSelectorSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipUsage")]
    pub ip_usage: Option<EgressGatewayStatusIpUsage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeList")]
    pub node_list: Option<Vec<EgressGatewayStatusNodeList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayStatusIpUsage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Free")]
    pub ipv4_free: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Total")]
    pub ipv4_total: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Free")]
    pub ipv6_free: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Total")]
    pub ipv6_total: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayStatusNodeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eips: Option<Vec<EgressGatewayStatusNodeListEips>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayStatusNodeListEips {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv4: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<EgressGatewayStatusNodeListEipsPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EgressGatewayStatusNodeListEipsPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

