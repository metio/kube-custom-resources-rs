// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/Kuadrant/dns-operator/kuadrant.io/v1alpha1/managedzones.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// ManagedZoneSpec defines the desired state of ManagedZone
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "kuadrant.io", version = "v1alpha1", kind = "ManagedZone", plural = "managedzones")]
#[kube(namespaced)]
#[kube(status = "ManagedZoneStatus")]
#[kube(schema = "disabled")]
pub struct ManagedZoneSpec {
    /// Description for this ManagedZone
    pub description: String,
    #[serde(rename = "dnsProviderSecretRef")]
    pub dns_provider_secret_ref: ManagedZoneDnsProviderSecretRef,
    /// Domain name of this ManagedZone
    #[serde(rename = "domainName")]
    pub domain_name: String,
    /// ID is the provider assigned id of this  zone (i.e. route53.HostedZone.ID).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Reference to another managed zone that this managed zone belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentManagedZone")]
    pub parent_managed_zone: Option<ManagedZoneParentManagedZone>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagedZoneDnsProviderSecretRef {
    pub name: String,
}

/// Reference to another managed zone that this managed zone belongs to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagedZoneParentManagedZone {
    /// `name` is the name of the managed zone. Required
    pub name: String,
}

/// ManagedZoneStatus defines the observed state of a Zone
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagedZoneStatus {
    /// List of status conditions to indicate the status of a ManagedZone. Known condition types are `Ready`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The ID assigned by this provider for this zone (i.e. route53.HostedZone.ID)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The NameServers assigned by the provider for this zone (i.e. route53.DelegationSet.NameServers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameServers")]
    pub name_servers: Option<Vec<String>>,
    /// observedGeneration is the most recently observed generation of the ManagedZone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// The number of records in the provider zone
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordCount")]
    pub record_count: Option<i64>,
}

