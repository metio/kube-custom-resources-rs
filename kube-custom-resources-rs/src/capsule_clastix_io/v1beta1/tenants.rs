// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/clastix/capsule/capsule.clastix.io/v1beta1/tenants.yaml --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

/// TenantSpec defines the desired state of Tenant.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "capsule.clastix.io", version = "v1beta1", kind = "Tenant", plural = "tenants")]
#[kube(status = "TenantStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct TenantSpec {
    /// Specifies additional RoleBindings assigned to the Tenant. Capsule will ensure that all namespaces in the Tenant always contain the RoleBinding for the given ClusterRole. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRoleBindings")]
    pub additional_role_bindings: Option<Vec<TenantAdditionalRoleBindings>>,
    /// Specifies the trusted Image Registries assigned to the Tenant. Capsule assures that all Pods resources created in the Tenant can use only one of the allowed trusted registries. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRegistries")]
    pub container_registries: Option<TenantContainerRegistries>,
    /// Specify the allowed values for the imagePullPolicies option in Pod resources. Capsule assures that all Pod resources created in the Tenant can use only one of the allowed policy. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicies")]
    pub image_pull_policies: Option<Vec<String>>,
    /// Specifies options for the Ingress resources, such as allowed hostnames and IngressClass. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressOptions")]
    pub ingress_options: Option<TenantIngressOptions>,
    /// Specifies the resource min/max usage restrictions to the Tenant. The assigned values are inherited by any namespace created in the Tenant. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitRanges")]
    pub limit_ranges: Option<TenantLimitRanges>,
    /// Specifies options for the Namespaces, such as additional metadata or maximum number of namespaces allowed for that Tenant. Once the namespace quota assigned to the Tenant has been reached, the Tenant owner cannot create further namespaces. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceOptions")]
    pub namespace_options: Option<TenantNamespaceOptions>,
    /// Specifies the NetworkPolicies assigned to the Tenant. The assigned NetworkPolicies are inherited by any namespace created in the Tenant. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkPolicies")]
    pub network_policies: Option<TenantNetworkPolicies>,
    /// Specifies the label to control the placement of pods on a given pool of worker nodes. All namespaces created within the Tenant will have the node selector annotation. This annotation tells the Kubernetes scheduler to place pods on the nodes having the selector label. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Specifies the owners of the Tenant. Mandatory.
    pub owners: Vec<TenantOwners>,
    /// Specifies the allowed priorityClasses assigned to the Tenant. Capsule assures that all Pods resources created in the Tenant can use only one of the allowed PriorityClasses. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClasses")]
    pub priority_classes: Option<TenantPriorityClasses>,
    /// Specifies a list of ResourceQuota resources assigned to the Tenant. The assigned values are inherited by any namespace created in the Tenant. The Capsule operator aggregates ResourceQuota at Tenant level, so that the hard quota is never crossed for the given Tenant. This permits the Tenant owner to consume resources in the Tenant regardless of the namespace. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceQuotas")]
    pub resource_quotas: Option<TenantResourceQuotas>,
    /// Specifies options for the Service, such as additional metadata or block of certain type of Services. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceOptions")]
    pub service_options: Option<TenantServiceOptions>,
    /// Specifies the allowed StorageClasses assigned to the Tenant. Capsule assures that all PersistentVolumeClaim resources created in the Tenant can use only one of the allowed StorageClasses. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClasses")]
    pub storage_classes: Option<TenantStorageClasses>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantAdditionalRoleBindings {
    #[serde(rename = "clusterRoleName")]
    pub cluster_role_name: String,
    /// kubebuilder:validation:Minimum=1
    pub subjects: Vec<TenantAdditionalRoleBindingsSubjects>,
}

/// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,
/// or a value for non-objects such as user and group names.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantAdditionalRoleBindingsSubjects {
    /// APIGroup holds the API group of the referenced subject.
    /// Defaults to "" for ServiceAccount subjects.
    /// Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
    /// If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    pub kind: String,
    /// Name of the object being referenced.
    pub name: String,
    /// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
    /// the Authorizer should report an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Specifies the trusted Image Registries assigned to the Tenant. Capsule assures that all Pods resources created in the Tenant can use only one of the allowed trusted registries. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantContainerRegistries {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegex")]
    pub allowed_regex: Option<String>,
}

/// Specifies options for the Ingress resources, such as allowed hostnames and IngressClass. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantIngressOptions {
    /// Specifies the allowed IngressClasses assigned to the Tenant. Capsule assures that all Ingress resources created in the Tenant can use only one of the allowed IngressClasses. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClasses")]
    pub allowed_classes: Option<TenantIngressOptionsAllowedClasses>,
    /// Specifies the allowed hostnames in Ingresses for the given Tenant. Capsule assures that all Ingress resources created in the Tenant can use only one of the allowed hostnames. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHostnames")]
    pub allowed_hostnames: Option<TenantIngressOptionsAllowedHostnames>,
    /// Defines the scope of hostname collision check performed when Tenant Owners create Ingress with allowed hostnames.
    /// 
    /// 
    /// - Cluster: disallow the creation of an Ingress if the pair hostname and path is already used across the Namespaces managed by Capsule.
    /// 
    /// 
    /// - Tenant: disallow the creation of an Ingress if the pair hostname and path is already used across the Namespaces of the Tenant.
    /// 
    /// 
    /// - Namespace: disallow the creation of an Ingress if the pair hostname and path is already used in the Ingress Namespace.
    /// 
    /// 
    /// Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameCollisionScope")]
    pub hostname_collision_scope: Option<TenantIngressOptionsHostnameCollisionScope>,
}

/// Specifies the allowed IngressClasses assigned to the Tenant. Capsule assures that all Ingress resources created in the Tenant can use only one of the allowed IngressClasses. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantIngressOptionsAllowedClasses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegex")]
    pub allowed_regex: Option<String>,
}

/// Specifies the allowed hostnames in Ingresses for the given Tenant. Capsule assures that all Ingress resources created in the Tenant can use only one of the allowed hostnames. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantIngressOptionsAllowedHostnames {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegex")]
    pub allowed_regex: Option<String>,
}

/// Specifies options for the Ingress resources, such as allowed hostnames and IngressClass. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TenantIngressOptionsHostnameCollisionScope {
    Cluster,
    Tenant,
    Namespace,
    Disabled,
}

/// Specifies the resource min/max usage restrictions to the Tenant. The assigned values are inherited by any namespace created in the Tenant. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantLimitRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<TenantLimitRangesItems>>,
}

/// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantLimitRangesItems {
    /// Limits is the list of LimitRangeItem objects that are enforced.
    pub limits: Vec<TenantLimitRangesItemsLimits>,
}

/// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantLimitRangesItemsLimits {
    /// Default resource requirement limit value by resource name if resource limit is omitted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<BTreeMap<String, IntOrString>>,
    /// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRequest")]
    pub default_request: Option<BTreeMap<String, IntOrString>>,
    /// Max usage constraints on this kind by resource name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<BTreeMap<String, IntOrString>>,
    /// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLimitRequestRatio")]
    pub max_limit_request_ratio: Option<BTreeMap<String, IntOrString>>,
    /// Min usage constraints on this kind by resource name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<BTreeMap<String, IntOrString>>,
    /// Type of resource that this limit applies to.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Specifies options for the Namespaces, such as additional metadata or maximum number of namespaces allowed for that Tenant. Once the namespace quota assigned to the Tenant has been reached, the Tenant owner cannot create further namespaces. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNamespaceOptions {
    /// Specifies additional labels and annotations the Capsule operator places on any Namespace resource in the Tenant. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalMetadata")]
    pub additional_metadata: Option<TenantNamespaceOptionsAdditionalMetadata>,
    /// Specifies the maximum number of namespaces allowed for that Tenant. Once the namespace quota assigned to the Tenant has been reached, the Tenant owner cannot create further namespaces. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quota: Option<i32>,
}

/// Specifies additional labels and annotations the Capsule operator places on any Namespace resource in the Tenant. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNamespaceOptionsAdditionalMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Specifies the NetworkPolicies assigned to the Tenant. The assigned NetworkPolicies are inherited by any namespace created in the Tenant. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<TenantNetworkPoliciesItems>>,
}

/// NetworkPolicySpec provides the specification of a NetworkPolicy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItems {
    /// egress is a list of egress rules to be applied to the selected pods. Outgoing traffic
    /// is allowed if there are no NetworkPolicies selecting the pod (and cluster policy
    /// otherwise allows the traffic), OR if the traffic matches at least one egress rule
    /// across all of the NetworkPolicy objects whose podSelector matches the pod. If
    /// this field is empty then this NetworkPolicy limits all outgoing traffic (and serves
    /// solely to ensure that the pods it selects are isolated by default).
    /// This field is beta-level in 1.8
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<TenantNetworkPoliciesItemsEgress>>,
    /// ingress is a list of ingress rules to be applied to the selected pods.
    /// Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod
    /// (and cluster policy otherwise allows the traffic), OR if the traffic source is
    /// the pod's local node, OR if the traffic matches at least one ingress rule
    /// across all of the NetworkPolicy objects whose podSelector matches the pod. If
    /// this field is empty then this NetworkPolicy does not allow any traffic (and serves
    /// solely to ensure that the pods it selects are isolated by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<TenantNetworkPoliciesItemsIngress>>,
    /// podSelector selects the pods to which this NetworkPolicy object applies.
    /// The array of ingress rules is applied to any pods selected by this field.
    /// Multiple network policies can select the same set of pods. In this case,
    /// the ingress rules for each are combined additively.
    /// This field is NOT optional and follows standard label selector semantics.
    /// An empty podSelector matches all pods in this namespace.
    #[serde(rename = "podSelector")]
    pub pod_selector: TenantNetworkPoliciesItemsPodSelector,
    /// policyTypes is a list of rule types that the NetworkPolicy relates to.
    /// Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"].
    /// If this field is not specified, it will default based on the existence of ingress or egress rules;
    /// policies that contain an egress section are assumed to affect egress, and all policies
    /// (whether or not they contain an ingress section) are assumed to affect ingress.
    /// If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ].
    /// Likewise, if you want to write a policy that specifies that no egress is allowed,
    /// you must specify a policyTypes value that include "Egress" (since such a policy would not include
    /// an egress section and would otherwise default to just [ "Ingress" ]).
    /// This field is beta-level in 1.8
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyTypes")]
    pub policy_types: Option<Vec<String>>,
}

/// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods
/// matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to.
/// This type is beta-level in 1.8
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgress {
    /// ports is a list of destination ports for outgoing traffic.
    /// Each item in this list is combined using a logical OR. If this field is
    /// empty or missing, this rule matches all ports (traffic not restricted by port).
    /// If this field is present and contains at least one item, then this rule allows
    /// traffic only if the traffic matches at least one port in the list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<TenantNetworkPoliciesItemsEgressPorts>>,
    /// to is a list of destinations for outgoing traffic of pods selected for this rule.
    /// Items in this list are combined using a logical OR operation. If this field is
    /// empty or missing, this rule matches all destinations (traffic not restricted by
    /// destination). If this field is present and contains at least one item, this rule
    /// allows traffic only if the traffic matches at least one item in the to list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<Vec<TenantNetworkPoliciesItemsEgressTo>>,
}

/// NetworkPolicyPort describes a port to allow traffic on
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressPorts {
    /// endPort indicates that the range of ports from port to endPort if set, inclusive,
    /// should be allowed by the policy. This field cannot be defined if the port field
    /// is not defined or if the port field is defined as a named (string) port.
    /// The endPort must be equal or greater than port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endPort")]
    pub end_port: Option<i32>,
    /// port represents the port on the given protocol. This can either be a numerical or named
    /// port on a pod. If this field is not provided, this matches all port names and
    /// numbers.
    /// If present, only traffic on the specified protocol AND port will be matched.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    /// protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
    /// If not specified, this field defaults to TCP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
/// fields are allowed
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressTo {
    /// ipBlock defines policy on a particular IPBlock. If this field is set then
    /// neither of the other fields can be.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipBlock")]
    pub ip_block: Option<TenantNetworkPoliciesItemsEgressToIpBlock>,
    /// namespaceSelector selects namespaces using cluster-scoped labels. This field follows
    /// standard label selector semantics; if present but empty, it selects all namespaces.
    /// 
    /// 
    /// If podSelector is also set, then the NetworkPolicyPeer as a whole selects
    /// the pods matching podSelector in the namespaces selected by namespaceSelector.
    /// Otherwise it selects all pods in the namespaces selected by namespaceSelector.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TenantNetworkPoliciesItemsEgressToNamespaceSelector>,
    /// podSelector is a label selector which selects pods. This field follows standard label
    /// selector semantics; if present but empty, it selects all pods.
    /// 
    /// 
    /// If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
    /// the pods matching podSelector in the Namespaces selected by NamespaceSelector.
    /// Otherwise it selects the pods matching podSelector in the policy's own namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSelector")]
    pub pod_selector: Option<TenantNetworkPoliciesItemsEgressToPodSelector>,
}

/// ipBlock defines policy on a particular IPBlock. If this field is set then
/// neither of the other fields can be.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressToIpBlock {
    /// cidr is a string representing the IPBlock
    /// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    pub cidr: String,
    /// except is a slice of CIDRs that should not be included within an IPBlock
    /// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    /// Except values will be rejected if they are outside the cidr range
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub except: Option<Vec<String>>,
}

/// namespaceSelector selects namespaces using cluster-scoped labels. This field follows
/// standard label selector semantics; if present but empty, it selects all namespaces.
/// 
/// 
/// If podSelector is also set, then the NetworkPolicyPeer as a whole selects
/// the pods matching podSelector in the namespaces selected by namespaceSelector.
/// Otherwise it selects all pods in the namespaces selected by namespaceSelector.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressToNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantNetworkPoliciesItemsEgressToNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressToNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// podSelector is a label selector which selects pods. This field follows standard label
/// selector semantics; if present but empty, it selects all pods.
/// 
/// 
/// If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
/// the pods matching podSelector in the Namespaces selected by NamespaceSelector.
/// Otherwise it selects the pods matching podSelector in the policy's own namespace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressToPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantNetworkPoliciesItemsEgressToPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsEgressToPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods
/// matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngress {
    /// from is a list of sources which should be able to access the pods selected for this rule.
    /// Items in this list are combined using a logical OR operation. If this field is
    /// empty or missing, this rule matches all sources (traffic not restricted by
    /// source). If this field is present and contains at least one item, this rule
    /// allows traffic only if the traffic matches at least one item in the from list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<Vec<TenantNetworkPoliciesItemsIngressFrom>>,
    /// ports is a list of ports which should be made accessible on the pods selected for
    /// this rule. Each item in this list is combined using a logical OR. If this field is
    /// empty or missing, this rule matches all ports (traffic not restricted by port).
    /// If this field is present and contains at least one item, then this rule allows
    /// traffic only if the traffic matches at least one port in the list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<TenantNetworkPoliciesItemsIngressPorts>>,
}

/// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
/// fields are allowed
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFrom {
    /// ipBlock defines policy on a particular IPBlock. If this field is set then
    /// neither of the other fields can be.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipBlock")]
    pub ip_block: Option<TenantNetworkPoliciesItemsIngressFromIpBlock>,
    /// namespaceSelector selects namespaces using cluster-scoped labels. This field follows
    /// standard label selector semantics; if present but empty, it selects all namespaces.
    /// 
    /// 
    /// If podSelector is also set, then the NetworkPolicyPeer as a whole selects
    /// the pods matching podSelector in the namespaces selected by namespaceSelector.
    /// Otherwise it selects all pods in the namespaces selected by namespaceSelector.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<TenantNetworkPoliciesItemsIngressFromNamespaceSelector>,
    /// podSelector is a label selector which selects pods. This field follows standard label
    /// selector semantics; if present but empty, it selects all pods.
    /// 
    /// 
    /// If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
    /// the pods matching podSelector in the Namespaces selected by NamespaceSelector.
    /// Otherwise it selects the pods matching podSelector in the policy's own namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSelector")]
    pub pod_selector: Option<TenantNetworkPoliciesItemsIngressFromPodSelector>,
}

/// ipBlock defines policy on a particular IPBlock. If this field is set then
/// neither of the other fields can be.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFromIpBlock {
    /// cidr is a string representing the IPBlock
    /// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    pub cidr: String,
    /// except is a slice of CIDRs that should not be included within an IPBlock
    /// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    /// Except values will be rejected if they are outside the cidr range
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub except: Option<Vec<String>>,
}

/// namespaceSelector selects namespaces using cluster-scoped labels. This field follows
/// standard label selector semantics; if present but empty, it selects all namespaces.
/// 
/// 
/// If podSelector is also set, then the NetworkPolicyPeer as a whole selects
/// the pods matching podSelector in the namespaces selected by namespaceSelector.
/// Otherwise it selects all pods in the namespaces selected by namespaceSelector.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFromNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantNetworkPoliciesItemsIngressFromNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFromNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// podSelector is a label selector which selects pods. This field follows standard label
/// selector semantics; if present but empty, it selects all pods.
/// 
/// 
/// If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
/// the pods matching podSelector in the Namespaces selected by NamespaceSelector.
/// Otherwise it selects the pods matching podSelector in the policy's own namespace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFromPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantNetworkPoliciesItemsIngressFromPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressFromPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NetworkPolicyPort describes a port to allow traffic on
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsIngressPorts {
    /// endPort indicates that the range of ports from port to endPort if set, inclusive,
    /// should be allowed by the policy. This field cannot be defined if the port field
    /// is not defined or if the port field is defined as a named (string) port.
    /// The endPort must be equal or greater than port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endPort")]
    pub end_port: Option<i32>,
    /// port represents the port on the given protocol. This can either be a numerical or named
    /// port on a pod. If this field is not provided, this matches all port names and
    /// numbers.
    /// If present, only traffic on the specified protocol AND port will be matched.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    /// protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
    /// If not specified, this field defaults to TCP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// podSelector selects the pods to which this NetworkPolicy object applies.
/// The array of ingress rules is applied to any pods selected by this field.
/// Multiple network policies can select the same set of pods. In this case,
/// the ingress rules for each are combined additively.
/// This field is NOT optional and follows standard label selector semantics.
/// An empty podSelector matches all pods in this namespace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantNetworkPoliciesItemsPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantNetworkPoliciesItemsPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantOwners {
    /// Kind of tenant owner. Possible values are "User", "Group", and "ServiceAccount"
    pub kind: TenantOwnersKind,
    /// Name of tenant owner.
    pub name: String,
    /// Proxy settings for tenant owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxySettings")]
    pub proxy_settings: Option<Vec<TenantOwnersProxySettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TenantOwnersKind {
    User,
    Group,
    ServiceAccount,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantOwnersProxySettings {
    pub kind: TenantOwnersProxySettingsKind,
    pub operations: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TenantOwnersProxySettingsKind {
    Nodes,
    StorageClasses,
    IngressClasses,
    PriorityClasses,
}

/// Specifies the allowed priorityClasses assigned to the Tenant. Capsule assures that all Pods resources created in the Tenant can use only one of the allowed PriorityClasses. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantPriorityClasses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegex")]
    pub allowed_regex: Option<String>,
}

/// Specifies a list of ResourceQuota resources assigned to the Tenant. The assigned values are inherited by any namespace created in the Tenant. The Capsule operator aggregates ResourceQuota at Tenant level, so that the hard quota is never crossed for the given Tenant. This permits the Tenant owner to consume resources in the Tenant regardless of the namespace. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantResourceQuotas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<TenantResourceQuotasItems>>,
    /// Define if the Resource Budget should compute resource across all Namespaces in the Tenant or individually per cluster. Default is Tenant
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<TenantResourceQuotasScope>,
}

/// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantResourceQuotasItems {
    /// hard is the set of desired hard limits for each named resource.
    /// More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hard: Option<BTreeMap<String, IntOrString>>,
    /// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota
    /// but expressed using ScopeSelectorOperator in combination with possible values.
    /// For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scopeSelector")]
    pub scope_selector: Option<TenantResourceQuotasItemsScopeSelector>,
    /// A collection of filters that must match each object tracked by a quota.
    /// If not specified, the quota matches all objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
}

/// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota
/// but expressed using ScopeSelectorOperator in combination with possible values.
/// For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantResourceQuotasItemsScopeSelector {
    /// A list of scope selector requirements by scope of the resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<TenantResourceQuotasItemsScopeSelectorMatchExpressions>>,
}

/// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator
/// that relates the scope name and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantResourceQuotasItemsScopeSelectorMatchExpressions {
    /// Represents a scope's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists, DoesNotExist.
    pub operator: String,
    /// The name of the scope that the selector applies to.
    #[serde(rename = "scopeName")]
    pub scope_name: String,
    /// An array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty.
    /// This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Specifies a list of ResourceQuota resources assigned to the Tenant. The assigned values are inherited by any namespace created in the Tenant. The Capsule operator aggregates ResourceQuota at Tenant level, so that the hard quota is never crossed for the given Tenant. This permits the Tenant owner to consume resources in the Tenant regardless of the namespace. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TenantResourceQuotasScope {
    Tenant,
    Namespace,
}

/// Specifies options for the Service, such as additional metadata or block of certain type of Services. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptions {
    /// Specifies additional labels and annotations the Capsule operator places on any Service resource in the Tenant. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalMetadata")]
    pub additional_metadata: Option<TenantServiceOptionsAdditionalMetadata>,
    /// Block or deny certain type of Services. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedServices")]
    pub allowed_services: Option<TenantServiceOptionsAllowedServices>,
    /// Specifies the external IPs that can be used in Services with type ClusterIP. An empty list means no IPs are allowed. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIPs")]
    pub external_i_ps: Option<TenantServiceOptionsExternalIPs>,
    /// Define the annotations that a Tenant Owner cannot set for their Service resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forbiddenAnnotations")]
    pub forbidden_annotations: Option<TenantServiceOptionsForbiddenAnnotations>,
    /// Define the labels that a Tenant Owner cannot set for their Service resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forbiddenLabels")]
    pub forbidden_labels: Option<TenantServiceOptionsForbiddenLabels>,
}

/// Specifies additional labels and annotations the Capsule operator places on any Service resource in the Tenant. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptionsAdditionalMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Block or deny certain type of Services. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptionsAllowedServices {
    /// Specifies if ExternalName service type resources are allowed for the Tenant. Default is true. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalName")]
    pub external_name: Option<bool>,
    /// Specifies if LoadBalancer service type resources are allowed for the Tenant. Default is true. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<bool>,
    /// Specifies if NodePort service type resources are allowed for the Tenant. Default is true. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<bool>,
}

/// Specifies the external IPs that can be used in Services with type ClusterIP. An empty list means no IPs are allowed. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptionsExternalIPs {
    pub allowed: Vec<String>,
}

/// Define the annotations that a Tenant Owner cannot set for their Service resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptionsForbiddenAnnotations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denied: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deniedRegex")]
    pub denied_regex: Option<String>,
}

/// Define the labels that a Tenant Owner cannot set for their Service resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantServiceOptionsForbiddenLabels {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denied: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deniedRegex")]
    pub denied_regex: Option<String>,
}

/// Specifies the allowed StorageClasses assigned to the Tenant. Capsule assures that all PersistentVolumeClaim resources created in the Tenant can use only one of the allowed StorageClasses. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantStorageClasses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegex")]
    pub allowed_regex: Option<String>,
}

/// Returns the observed state of the Tenant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TenantStatus {
    /// List of namespaces assigned to the Tenant.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// How many namespaces are assigned to the Tenant.
    pub size: i64,
    /// The operational state of the Tenant. Possible values are "Active", "Cordoned".
    pub state: TenantStatusState,
}

/// Returns the observed state of the Tenant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TenantStatusState {
    Cordoned,
    Active,
}

