// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/antrea-io/antrea/multicluster.crd.antrea.io/v1alpha1/clusterinfoimports.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "multicluster.crd.antrea.io", version = "v1alpha1", kind = "ClusterInfoImport", plural = "clusterinfoimports")]
#[kube(namespaced)]
#[kube(status = "ClusterInfoImportStatus")]
#[kube(schema = "disabled")]
pub struct ClusterInfoImportSpec {
    /// ClusterID of the member cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterID")]
    pub cluster_id: Option<String>,
    /// GatewayInfos has information of Gateways
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayInfos")]
    pub gateway_infos: Option<Vec<ClusterInfoImportGatewayInfos>>,
    /// PodCIDRs is the Pod IP address CIDRs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podCIDRs")]
    pub pod_cid_rs: Option<Vec<String>>,
    /// ServiceCIDR is the IP ranges used by Service ClusterIP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceCIDR")]
    pub service_cidr: Option<String>,
    /// WireGuardInfo includes information of a WireGuard tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wireGuard")]
    pub wire_guard: Option<ClusterInfoImportWireGuard>,
}

/// GatewayInfo includes information of a Gateway.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterInfoImportGatewayInfos {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayIP")]
    pub gateway_ip: Option<String>,
}

/// WireGuardInfo includes information of a WireGuard tunnel.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterInfoImportWireGuard {
    /// Public key of the WireGuard tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicKey")]
    pub public_key: Option<String>,
}

/// ClusterInfoImportStatus defines the observed state of ClusterInfoImport.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterInfoImportStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ClusterInfoImportStatusConditions>>,
}

/// ResourceCondition indicates the readiness condition of a Resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterInfoImportStatusConditions {
    /// Last time the condition transited from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

