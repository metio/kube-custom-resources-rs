// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/ingresses.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "Ingress", plural = "ingresses")]
#[kube(status = "IngressStatus")]
#[kube(schema = "disabled")]
pub struct IngressSpec {
    /// appsDomain is an optional domain to use instead of the one specified in the domain field when a Route is created without specifying an explicit host. If appsDomain is nonempty, this value is used to generate default host values for Route. Unlike domain, appsDomain may be modified after installation. This assumes a new ingresscontroller has been setup with a wildcard certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appsDomain")]
    pub apps_domain: Option<String>,
    /// componentRoutes is an optional list of routes that are managed by OpenShift components that a cluster-admin is able to configure the hostname and serving certificate for. The namespace and name of each route in this list should match an existing entry in the status.componentRoutes list. 
    ///  To determine the set of configurable Routes, look at namespace and name of entries in the .status.componentRoutes list, where participating operators write the status of configurable routes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentRoutes")]
    pub component_routes: Option<Vec<IngressComponentRoutes>>,
    /// domain is used to generate a default host name for a route when the route's host name is empty. The generated host name will follow this pattern: "<route-name>.<route-namespace>.<domain>". 
    ///  It is also used as the default wildcard domain suffix for ingress. The default ingresscontroller domain will follow this pattern: "*.<domain>". 
    ///  Once set, changing domain is not currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// loadBalancer contains the load balancer details in general which are not only specific to the underlying infrastructure provider of the current cluster and are required for Ingress Controller to work on OpenShift.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<IngressLoadBalancer>,
    /// requiredHSTSPolicies specifies HSTS policies that are required to be set on newly created  or updated routes matching the domainPattern/s and namespaceSelector/s that are specified in the policy. Each requiredHSTSPolicy must have at least a domainPattern and a maxAge to validate a route HSTS Policy route annotation, and affect route admission. 
    ///  A candidate route is checked for HSTS Policies if it has the HSTS Policy route annotation: "haproxy.router.openshift.io/hsts_header" E.g. haproxy.router.openshift.io/hsts_header: max-age=31536000;preload;includeSubDomains 
    ///  - For each candidate route, if it matches a requiredHSTSPolicy domainPattern and optional namespaceSelector, then the maxAge, preloadPolicy, and includeSubdomainsPolicy must be valid to be admitted.  Otherwise, the route is rejected. - The first match, by domainPattern and optional namespaceSelector, in the ordering of the RequiredHSTSPolicies determines the route's admission status. - If the candidate route doesn't match any requiredHSTSPolicy domainPattern and optional namespaceSelector, then it may use any HSTS Policy annotation. 
    ///  The HSTS policy configuration may be changed after routes have already been created. An update to a previously admitted route may then fail if the updated route does not conform to the updated HSTS policy configuration. However, changing the HSTS policy configuration will not cause a route that is already admitted to stop working. 
    ///  Note that if there are no RequiredHSTSPolicies, any HSTS Policy annotation on the route is valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredHSTSPolicies")]
    pub required_hsts_policies: Option<Vec<IngressRequiredHstsPolicies>>,
}

/// ComponentRouteSpec allows for configuration of a route's hostname and serving certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressComponentRoutes {
    /// hostname is the hostname that should be used by the route.
    pub hostname: String,
    /// name is the logical name of the route to customize. 
    ///  The namespace and name of this componentRoute must match a corresponding entry in the list of status.componentRoutes if the route is to be customized.
    pub name: String,
    /// namespace is the namespace of the route to customize. 
    ///  The namespace and name of this componentRoute must match a corresponding entry in the list of status.componentRoutes if the route is to be customized.
    pub namespace: String,
    /// servingCertKeyPairSecret is a reference to a secret of type `kubernetes.io/tls` in the openshift-config namespace. The serving cert/key pair must match and will be used by the operator to fulfill the intent of serving with this name. If the custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingCertKeyPairSecret")]
    pub serving_cert_key_pair_secret: Option<IngressComponentRoutesServingCertKeyPairSecret>,
}

/// servingCertKeyPairSecret is a reference to a secret of type `kubernetes.io/tls` in the openshift-config namespace. The serving cert/key pair must match and will be used by the operator to fulfill the intent of serving with this name. If the custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressComponentRoutesServingCertKeyPairSecret {
    /// name is the metadata.name of the referenced secret
    pub name: String,
}

/// loadBalancer contains the load balancer details in general which are not only specific to the underlying infrastructure provider of the current cluster and are required for Ingress Controller to work on OpenShift.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressLoadBalancer {
    /// platform holds configuration specific to the underlying infrastructure provider for the ingress load balancers. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<IngressLoadBalancerPlatform>,
}

/// platform holds configuration specific to the underlying infrastructure provider for the ingress load balancers. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressLoadBalancerPlatform {
    /// aws contains settings specific to the Amazon Web Services infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<IngressLoadBalancerPlatformAws>,
    /// type is the underlying infrastructure provider for the cluster. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack", "VSphere", "oVirt", "KubeVirt", "EquinixMetal", "PowerVS", "AlibabaCloud", "Nutanix" and "None". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IngressLoadBalancerPlatformType>,
}

/// aws contains settings specific to the Amazon Web Services infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressLoadBalancerPlatformAws {
    /// type allows user to set a load balancer type. When this field is set the default ingresscontroller will get created using the specified LBType. If this field is not set then the default ingress controller of LBType Classic will be created. Valid values are: 
    ///  * "Classic": A Classic Load Balancer that makes routing decisions at either the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See the following for additional details: 
    ///  https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb 
    ///  * "NLB": A Network Load Balancer that makes routing decisions at the transport layer (TCP/SSL). See the following for additional details: 
    ///  https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb
    #[serde(rename = "type")]
    pub r#type: IngressLoadBalancerPlatformAwsType,
}

/// aws contains settings specific to the Amazon Web Services infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressLoadBalancerPlatformAwsType {
    #[serde(rename = "NLB")]
    Nlb,
    Classic,
}

/// platform holds configuration specific to the underlying infrastructure provider for the ingress load balancers. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressLoadBalancerPlatformType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressRequiredHstsPolicies {
    /// domainPatterns is a list of domains for which the desired HSTS annotations are required. If domainPatterns is specified and a route is created with a spec.host matching one of the domains, the route must specify the HSTS Policy components described in the matching RequiredHSTSPolicy. 
    ///  The use of wildcards is allowed like this: *.foo.com matches everything under foo.com. foo.com only matches foo.com, so to cover foo.com and everything under it, you must specify *both*.
    #[serde(rename = "domainPatterns")]
    pub domain_patterns: Vec<String>,
    /// includeSubDomainsPolicy means the HSTS Policy should apply to any subdomains of the host's domain name.  Thus, for the host bar.foo.com, if includeSubDomainsPolicy was set to RequireIncludeSubDomains: - the host app.bar.foo.com would inherit the HSTS Policy of bar.foo.com - the host bar.foo.com would inherit the HSTS Policy of bar.foo.com - the host foo.com would NOT inherit the HSTS Policy of bar.foo.com - the host def.foo.com would NOT inherit the HSTS Policy of bar.foo.com
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubDomainsPolicy")]
    pub include_sub_domains_policy: Option<IngressRequiredHstsPoliciesIncludeSubDomainsPolicy>,
    /// maxAge is the delta time range in seconds during which hosts are regarded as HSTS hosts. If set to 0, it negates the effect, and hosts are removed as HSTS hosts. If set to 0 and includeSubdomains is specified, all subdomains of the host are also removed as HSTS hosts. maxAge is a time-to-live value, and if this policy is not refreshed on a client, the HSTS policy will eventually expire on that client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<IngressRequiredHstsPoliciesMaxAge>,
    /// namespaceSelector specifies a label selector such that the policy applies only to those routes that are in namespaces with labels that match the selector, and are in one of the DomainPatterns. Defaults to the empty LabelSelector, which matches everything.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<IngressRequiredHstsPoliciesNamespaceSelector>,
    /// preloadPolicy directs the client to include hosts in its host preload list so that it never needs to do an initial load to get the HSTS header (note that this is not defined in RFC 6797 and is therefore client implementation-dependent).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preloadPolicy")]
    pub preload_policy: Option<IngressRequiredHstsPoliciesPreloadPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressRequiredHstsPoliciesIncludeSubDomainsPolicy {
    RequireIncludeSubDomains,
    RequireNoIncludeSubDomains,
    NoOpinion,
}

/// maxAge is the delta time range in seconds during which hosts are regarded as HSTS hosts. If set to 0, it negates the effect, and hosts are removed as HSTS hosts. If set to 0 and includeSubdomains is specified, all subdomains of the host are also removed as HSTS hosts. maxAge is a time-to-live value, and if this policy is not refreshed on a client, the HSTS policy will eventually expire on that client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressRequiredHstsPoliciesMaxAge {
    /// The largest allowed value (in seconds) of the RequiredHSTSPolicy max-age This value can be left unspecified, in which case no upper limit is enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "largestMaxAge")]
    pub largest_max_age: Option<i32>,
    /// The smallest allowed value (in seconds) of the RequiredHSTSPolicy max-age Setting max-age=0 allows the deletion of an existing HSTS header from a host.  This is a necessary tool for administrators to quickly correct mistakes. This value can be left unspecified, in which case no lower limit is enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "smallestMaxAge")]
    pub smallest_max_age: Option<i32>,
}

/// namespaceSelector specifies a label selector such that the policy applies only to those routes that are in namespaces with labels that match the selector, and are in one of the DomainPatterns. Defaults to the empty LabelSelector, which matches everything.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressRequiredHstsPoliciesNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<IngressRequiredHstsPoliciesNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressRequiredHstsPoliciesNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressRequiredHstsPoliciesPreloadPolicy {
    RequirePreload,
    RequireNoPreload,
    NoOpinion,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressStatus {
    /// componentRoutes is where participating operators place the current route status for routes whose hostnames and serving certificates can be customized by the cluster-admin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentRoutes")]
    pub component_routes: Option<Vec<IngressStatusComponentRoutes>>,
    /// defaultPlacement is set at installation time to control which nodes will host the ingress router pods by default. The options are control-plane nodes or worker nodes. 
    ///  This field works by dictating how the Cluster Ingress Operator will consider unset replicas and nodePlacement fields in IngressController resources when creating the corresponding Deployments. 
    ///  See the documentation for the IngressController replicas and nodePlacement fields for more information. 
    ///  When omitted, the default value is Workers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPlacement")]
    pub default_placement: Option<IngressStatusDefaultPlacement>,
}

/// ComponentRouteStatus contains information allowing configuration of a route's hostname and serving certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressStatusComponentRoutes {
    /// conditions are used to communicate the state of the componentRoutes entry. 
    ///  Supported conditions include Available, Degraded and Progressing. 
    ///  If available is true, the content served by the route can be accessed by users. This includes cases where a default may continue to serve content while the customized route specified by the cluster-admin is being configured. 
    ///  If Degraded is true, that means something has gone wrong trying to handle the componentRoutes entry. The currentHostnames field may or may not be in effect. 
    ///  If Progressing is true, that means the component is taking some action related to the componentRoutes entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<IngressStatusComponentRoutesConditions>>,
    /// consumingUsers is a slice of ServiceAccounts that need to have read permission on the servingCertKeyPairSecret secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumingUsers")]
    pub consuming_users: Option<Vec<String>>,
    /// currentHostnames is the list of current names used by the route. Typically, this list should consist of a single hostname, but if multiple hostnames are supported by the route the operator may write multiple entries to this list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentHostnames")]
    pub current_hostnames: Option<Vec<String>>,
    /// defaultHostname is the hostname of this route prior to customization.
    #[serde(rename = "defaultHostname")]
    pub default_hostname: String,
    /// name is the logical name of the route to customize. It does not have to be the actual name of a route resource but it cannot be renamed. 
    ///  The namespace and name of this componentRoute must match a corresponding entry in the list of spec.componentRoutes if the route is to be customized.
    pub name: String,
    /// namespace is the namespace of the route to customize. It must be a real namespace. Using an actual namespace ensures that no two components will conflict and the same component can be installed multiple times. 
    ///  The namespace and name of this componentRoute must match a corresponding entry in the list of spec.componentRoutes if the route is to be customized.
    pub namespace: String,
    /// relatedObjects is a list of resources which are useful when debugging or inspecting how spec.componentRoutes is applied.
    #[serde(rename = "relatedObjects")]
    pub related_objects: Vec<IngressStatusComponentRoutesRelatedObjects>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressStatusComponentRoutesConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: IngressStatusComponentRoutesConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressStatusComponentRoutesConditionsStatus {
    True,
    False,
    Unknown,
}

/// ObjectReference contains enough information to let you inspect or modify the referred object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IngressStatusComponentRoutesRelatedObjects {
    /// group of the referent.
    pub group: String,
    /// name of the referent.
    pub name: String,
    /// namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource of the referent.
    pub resource: String,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IngressStatusDefaultPlacement {
    ControlPlane,
    Workers,
    #[serde(rename = "")]
    KopiumEmpty,
}

