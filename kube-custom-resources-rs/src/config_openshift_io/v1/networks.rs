// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/networks.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// spec holds user settable values for configuration. As a general rule, this SHOULD NOT be read directly. Instead, you should consume the NetworkStatus, as it indicates the currently deployed configuration. Currently, most spec fields are immutable after installation. Please view the individual ones for further details on each.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "Network", plural = "networks")]
#[kube(schema = "disabled")]
pub struct NetworkSpec {
    /// IP address pool to use for pod IPs. This field is immutable after installation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNetwork")]
    pub cluster_network: Option<Vec<NetworkClusterNetwork>>,
    /// externalIP defines configuration for controllers that affect Service.ExternalIP. If nil, then ExternalIP is not allowed to be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIP")]
    pub external_ip: Option<NetworkExternalIp>,
    /// NetworkType is the plugin that is to be deployed (e.g. OpenShiftSDN). This should match a value that the cluster-network-operator understands, or else no networking will be installed. Currently supported values are: - OpenShiftSDN This field is immutable after installation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// IP address pool for services. Currently, we only support a single entry here. This field is immutable after installation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNetwork")]
    pub service_network: Option<Vec<String>>,
    /// The port range allowed for Services of type NodePort. If not specified, the default of 30000-32767 will be used. Such Services without a NodePort specified will have one automatically allocated from this range. This parameter can be updated after the cluster is installed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNodePortRange")]
    pub service_node_port_range: Option<String>,
}

/// ClusterNetworkEntry is a contiguous block of IP addresses from which pod IPs are allocated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkClusterNetwork {
    /// The complete block for pod IPs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    /// The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPrefix")]
    pub host_prefix: Option<i32>,
}

/// externalIP defines configuration for controllers that affect Service.ExternalIP. If nil, then ExternalIP is not allowed to be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExternalIp {
    /// autoAssignCIDRs is a list of CIDRs from which to automatically assign Service.ExternalIP. These are assigned when the service is of type LoadBalancer. In general, this is only useful for bare-metal clusters. In Openshift 3.x, this was misleadingly called "IngressIPs". Automatically assigned External IPs are not affected by any ExternalIPPolicy rules. Currently, only one entry may be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAssignCIDRs")]
    pub auto_assign_cid_rs: Option<Vec<String>>,
    /// policy is a set of restrictions applied to the ExternalIP field. If nil or empty, then ExternalIP is not allowed to be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkExternalIpPolicy>,
}

/// policy is a set of restrictions applied to the ExternalIP field. If nil or empty, then ExternalIP is not allowed to be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExternalIpPolicy {
    /// allowedCIDRs is the list of allowed CIDRs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCIDRs")]
    pub allowed_cid_rs: Option<Vec<String>>,
    /// rejectedCIDRs is the list of disallowed CIDRs. These take precedence over allowedCIDRs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectedCIDRs")]
    pub rejected_cid_rs: Option<Vec<String>>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatus {
    /// IP address pool to use for pod IPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNetwork")]
    pub cluster_network: Option<Vec<NetworkStatusClusterNetwork>>,
    /// ClusterNetworkMTU is the MTU for inter-pod networking.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNetworkMTU")]
    pub cluster_network_mtu: Option<i64>,
    /// Migration contains the cluster network migration configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub migration: Option<NetworkStatusMigration>,
    /// NetworkType is the plugin that is deployed (e.g. OpenShiftSDN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// IP address pool for services. Currently, we only support a single entry here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNetwork")]
    pub service_network: Option<Vec<String>>,
}

/// ClusterNetworkEntry is a contiguous block of IP addresses from which pod IPs are allocated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusClusterNetwork {
    /// The complete block for pod IPs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    /// The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPrefix")]
    pub host_prefix: Option<i32>,
}

/// Migration contains the cluster network migration configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusMigration {
    /// MTU contains the MTU migration configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<NetworkStatusMigrationMtu>,
    /// NetworkType is the target plugin that is to be deployed. Currently supported values are: OpenShiftSDN, OVNKubernetes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<NetworkStatusMigrationNetworkType>,
}

/// MTU contains the MTU migration configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusMigrationMtu {
    /// Machine contains MTU migration configuration for the machine's uplink.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machine: Option<NetworkStatusMigrationMtuMachine>,
    /// Network contains MTU migration configuration for the default network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<NetworkStatusMigrationMtuNetwork>,
}

/// Machine contains MTU migration configuration for the machine's uplink.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusMigrationMtuMachine {
    /// From is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// To is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// Network contains MTU migration configuration for the default network.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusMigrationMtuNetwork {
    /// From is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// To is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// Migration contains the cluster network migration configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NetworkStatusMigrationNetworkType {
    #[serde(rename = "OpenShiftSDN")]
    OpenShiftSdn,
    #[serde(rename = "OVNKubernetes")]
    OvnKubernetes,
}

