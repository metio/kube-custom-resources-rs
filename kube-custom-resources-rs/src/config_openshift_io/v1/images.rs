// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/images.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "Image", plural = "images")]
#[kube(status = "ImageStatus")]
#[kube(schema = "disabled")]
pub struct ImageSpec {
    /// additionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted during imagestream import, pod image pull, build image pull, and imageregistry pullthrough. The namespace for this config map is openshift-config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalTrustedCA")]
    pub additional_trusted_ca: Option<ImageAdditionalTrustedCa>,
    /// allowedRegistriesForImport limits the container image registries that normal users may import images from. Set this list to the registries that you trust to contain valid Docker images and that you want applications to be able to import from. Users with permission to create Images or ImageStreamMappings via the API are not affected by this policy - typically only administrators or system integrations will have those permissions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegistriesForImport")]
    pub allowed_registries_for_import: Option<Vec<ImageAllowedRegistriesForImport>>,
    /// externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in 'publicDockerImageRepository' field in ImageStreams. The value must be in "hostname[:port]" format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalRegistryHostnames")]
    pub external_registry_hostnames: Option<Vec<String>>,
    /// registrySources contains configuration that determines how the container runtime should treat individual registries when accessing images for builds+pods. (e.g. whether or not to allow insecure access).  It does not contain configuration for the internal cluster registry.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrySources")]
    pub registry_sources: Option<ImageRegistrySources>,
}

/// additionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted during imagestream import, pod image pull, build image pull, and imageregistry pullthrough. The namespace for this config map is openshift-config.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageAdditionalTrustedCa {
    /// name is the metadata.name of the referenced config map
    pub name: String,
}

/// RegistryLocation contains a location of the registry specified by the registry domain name. The domain name might include wildcards, like '*' or '??'.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageAllowedRegistriesForImport {
    /// domainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
}

/// registrySources contains configuration that determines how the container runtime should treat individual registries when accessing images for builds+pods. (e.g. whether or not to allow insecure access).  It does not contain configuration for the internal cluster registry.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageRegistrySources {
    /// allowedRegistries are the only registries permitted for image pull and push actions. All other registries are denied. 
    ///  Only one of BlockedRegistries or AllowedRegistries may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedRegistries")]
    pub allowed_registries: Option<Vec<String>>,
    /// blockedRegistries cannot be used for image pull and push actions. All other registries are permitted. 
    ///  Only one of BlockedRegistries or AllowedRegistries may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockedRegistries")]
    pub blocked_registries: Option<Vec<String>>,
    /// containerRuntimeSearchRegistries are registries that will be searched when pulling images that do not have fully qualified domains in their pull specs. Registries will be searched in the order provided in the list. Note: this search list only works with the container runtime, i.e CRI-O. Will NOT work with builds or imagestream imports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRuntimeSearchRegistries")]
    pub container_runtime_search_registries: Option<Vec<String>>,
    /// insecureRegistries are registries which do not have a valid TLS certificates or only support HTTP connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureRegistries")]
    pub insecure_registries: Option<Vec<String>>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageStatus {
    /// externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in 'publicDockerImageRepository' field in ImageStreams. The value must be in "hostname[:port]" format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalRegistryHostnames")]
    pub external_registry_hostnames: Option<Vec<String>>,
    /// internalRegistryHostname sets the hostname for the default internal image registry. The value must be in "hostname[:port]" format. This value is set by the image registry operator which controls the internal registry hostname.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalRegistryHostname")]
    pub internal_registry_hostname: Option<String>,
}

