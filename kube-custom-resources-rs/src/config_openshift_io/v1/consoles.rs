// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/consoles.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "Console", plural = "consoles")]
#[kube(status = "ConsoleStatus")]
#[kube(schema = "disabled")]
pub struct ConsoleSpec {
    /// ConsoleAuthentication defines a list of optional configuration for console authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<ConsoleAuthentication>,
}

/// ConsoleAuthentication defines a list of optional configuration for console authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConsoleAuthentication {
    /// An optional, absolute URL to redirect web browsers to after logging out of the console. If not specified, it will redirect to the default login page. This is required when using an identity provider that supports single sign-on (SSO) such as: - OpenID (Keycloak, Azure) - RequestHeader (GSSAPI, SSPI, SAML) - OAuth (GitHub, GitLab, Google) Logging out of the console will destroy the user's token. The logoutRedirect provides the user the option to perform single logout (SLO) through the identity provider to destroy their single sign-on session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutRedirect")]
    pub logout_redirect: Option<String>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConsoleStatus {
    /// The URL for the console. This will be derived from the host for the route that is created for the console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consoleURL")]
    pub console_url: Option<String>,
}

