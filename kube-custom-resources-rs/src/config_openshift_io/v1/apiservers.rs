// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/apiservers.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "APIServer", plural = "apiservers")]
#[kube(status = "APIServerStatus")]
#[kube(schema = "disabled")]
pub struct APIServerSpec {
    /// additionalCORSAllowedOrigins lists additional, user-defined regular expressions describing hosts for which the API server allows access using the CORS headers. This may be needed to access the API and the integrated OAuth server from JavaScript applications. The values are regular expressions that correspond to the Golang regular expression language.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalCORSAllowedOrigins")]
    pub additional_cors_allowed_origins: Option<Vec<String>>,
    /// audit specifies the settings for audit configuration to be applied to all OpenShift-provided API servers in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audit: Option<APIServerAudit>,
    /// clientCA references a ConfigMap containing a certificate bundle for the signers that will be recognized for incoming client certificates in addition to the operator managed signers. If this is empty, then only operator managed signers are valid. You usually only have to set this if you have your own PKI you wish to honor client certificates from. The ConfigMap must exist in the openshift-config namespace and contain the following required fields: - ConfigMap.Data["ca-bundle.crt"] - CA bundle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCA")]
    pub client_ca: Option<APIServerClientCa>,
    /// encryption allows the configuration of encryption of resources at the datastore layer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption: Option<APIServerEncryption>,
    /// servingCert is the TLS cert info for serving secure traffic. If not specified, operator managed certificates will be used for serving secure traffic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingCerts")]
    pub serving_certs: Option<APIServerServingCerts>,
    /// tlsSecurityProfile specifies settings for TLS connections for externally exposed servers. 
    ///  If unset, a default (which may change between releases) is chosen. Note that only Old, Intermediate and Custom profiles are currently supported, and the maximum available minTLSVersion is VersionTLS12.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecurityProfile")]
    pub tls_security_profile: Option<APIServerTlsSecurityProfile>,
}

/// audit specifies the settings for audit configuration to be applied to all OpenShift-provided API servers in the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerAudit {
    /// customRules specify profiles per group. These profile take precedence over the top-level profile field if they apply. They are evaluation from top to bottom and the first one that matches, applies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRules")]
    pub custom_rules: Option<Vec<APIServerAuditCustomRules>>,
    /// profile specifies the name of the desired top-level audit profile to be applied to all requests sent to any of the OpenShift-provided API servers in the cluster (kube-apiserver, openshift-apiserver and oauth-apiserver), with the exception of those requests that match one or more of the customRules. 
    ///  The following profiles are provided: - Default: default policy which means MetaData level logging with the exception of events (not logged at all), oauthaccesstokens and oauthauthorizetokens (both logged at RequestBody level). - WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). - None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens. 
    ///  Warning: It is not recommended to disable audit logging by using the `None` profile unless you are fully aware of the risks of not logging data that can be beneficial when troubleshooting issues. If you disable audit logging and a support situation arises, you might need to enable audit logging and reproduce the issue in order to troubleshoot properly. 
    ///  If unset, the 'Default' profile is used as the default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<APIServerAuditProfile>,
}

/// AuditCustomRule describes a custom rule for an audit profile that takes precedence over the top-level profile.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerAuditCustomRules {
    /// group is a name of group a request user must be member of in order to this profile to apply.
    pub group: String,
    /// profile specifies the name of the desired audit policy configuration to be deployed to all OpenShift-provided API servers in the cluster. 
    ///  The following profiles are provided: - Default: the existing default policy. - WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). - None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens. 
    ///  If unset, the 'Default' profile is used as the default.
    pub profile: APIServerAuditCustomRulesProfile,
}

/// AuditCustomRule describes a custom rule for an audit profile that takes precedence over the top-level profile.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum APIServerAuditCustomRulesProfile {
    Default,
    WriteRequestBodies,
    AllRequestBodies,
    None,
}

/// audit specifies the settings for audit configuration to be applied to all OpenShift-provided API servers in the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum APIServerAuditProfile {
    Default,
    WriteRequestBodies,
    AllRequestBodies,
    None,
}

/// clientCA references a ConfigMap containing a certificate bundle for the signers that will be recognized for incoming client certificates in addition to the operator managed signers. If this is empty, then only operator managed signers are valid. You usually only have to set this if you have your own PKI you wish to honor client certificates from. The ConfigMap must exist in the openshift-config namespace and contain the following required fields: - ConfigMap.Data["ca-bundle.crt"] - CA bundle.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerClientCa {
    /// name is the metadata.name of the referenced config map
    pub name: String,
}

/// encryption allows the configuration of encryption of resources at the datastore layer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerEncryption {
    /// type defines what encryption type should be used to encrypt resources at the datastore layer. When this field is unset (i.e. when it is set to the empty string), identity is implied. The behavior of unset can and will change over time.  Even if encryption is enabled by default, the meaning of unset may change to a different encryption type based on changes in best practices. 
    ///  When encryption is enabled, all sensitive resources shipped with the platform are encrypted. This list of sensitive resources can and will change over time.  The current authoritative list is: 
    ///  1. secrets 2. configmaps 3. routes.route.openshift.io 4. oauthaccesstokens.oauth.openshift.io 5. oauthauthorizetokens.oauth.openshift.io
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<APIServerEncryptionType>,
}

/// encryption allows the configuration of encryption of resources at the datastore layer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum APIServerEncryptionType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "identity")]
    Identity,
    #[serde(rename = "aescbc")]
    Aescbc,
    #[serde(rename = "aesgcm")]
    Aesgcm,
}

/// servingCert is the TLS cert info for serving secure traffic. If not specified, operator managed certificates will be used for serving secure traffic.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerServingCerts {
    /// namedCertificates references secrets containing the TLS cert info for serving secure traffic to specific hostnames. If no named certificates are provided, or no named certificates match the server name as understood by a client, the defaultServingCertificate will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedCertificates")]
    pub named_certificates: Option<Vec<APIServerServingCertsNamedCertificates>>,
}

/// APIServerNamedServingCert maps a server DNS name, as understood by a client, to a certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerServingCertsNamedCertificates {
    /// names is a optional list of explicit DNS names (leading wildcards allowed) that should use this certificate to serve secure traffic. If no names are provided, the implicit names will be extracted from the certificates. Exact names trump over wildcard names. Explicit names defined here trump over extracted implicit names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    /// servingCertificate references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic. The secret must exist in the openshift-config namespace and contain the following required fields: - Secret.Data["tls.key"] - TLS private key. - Secret.Data["tls.crt"] - TLS certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servingCertificate")]
    pub serving_certificate: Option<APIServerServingCertsNamedCertificatesServingCertificate>,
}

/// servingCertificate references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic. The secret must exist in the openshift-config namespace and contain the following required fields: - Secret.Data["tls.key"] - TLS private key. - Secret.Data["tls.crt"] - TLS certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerServingCertsNamedCertificatesServingCertificate {
    /// name is the metadata.name of the referenced secret
    pub name: String,
}

/// tlsSecurityProfile specifies settings for TLS connections for externally exposed servers. 
///  If unset, a default (which may change between releases) is chosen. Note that only Old, Intermediate and Custom profiles are currently supported, and the maximum available minTLSVersion is VersionTLS12.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerTlsSecurityProfile {
    /// custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: 
    ///  ciphers: 
    ///  - ECDHE-ECDSA-CHACHA20-POLY1305 
    ///  - ECDHE-RSA-CHACHA20-POLY1305 
    ///  - ECDHE-RSA-AES128-GCM-SHA256 
    ///  - ECDHE-ECDSA-AES128-GCM-SHA256 
    ///  minTLSVersion: VersionTLS11
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<APIServerTlsSecurityProfileCustom>,
    /// intermediate is a TLS security profile based on: 
    ///  https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 
    ///  and looks like this (yaml): 
    ///  ciphers: 
    ///  - TLS_AES_128_GCM_SHA256 
    ///  - TLS_AES_256_GCM_SHA384 
    ///  - TLS_CHACHA20_POLY1305_SHA256 
    ///  - ECDHE-ECDSA-AES128-GCM-SHA256 
    ///  - ECDHE-RSA-AES128-GCM-SHA256 
    ///  - ECDHE-ECDSA-AES256-GCM-SHA384 
    ///  - ECDHE-RSA-AES256-GCM-SHA384 
    ///  - ECDHE-ECDSA-CHACHA20-POLY1305 
    ///  - ECDHE-RSA-CHACHA20-POLY1305 
    ///  - DHE-RSA-AES128-GCM-SHA256 
    ///  - DHE-RSA-AES256-GCM-SHA384 
    ///  minTLSVersion: VersionTLS12
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub intermediate: Option<APIServerTlsSecurityProfileIntermediate>,
    /// modern is a TLS security profile based on: 
    ///  https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility 
    ///  and looks like this (yaml): 
    ///  ciphers: 
    ///  - TLS_AES_128_GCM_SHA256 
    ///  - TLS_AES_256_GCM_SHA384 
    ///  - TLS_CHACHA20_POLY1305_SHA256 
    ///  minTLSVersion: VersionTLS13
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modern: Option<APIServerTlsSecurityProfileModern>,
    /// old is a TLS security profile based on: 
    ///  https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility 
    ///  and looks like this (yaml): 
    ///  ciphers: 
    ///  - TLS_AES_128_GCM_SHA256 
    ///  - TLS_AES_256_GCM_SHA384 
    ///  - TLS_CHACHA20_POLY1305_SHA256 
    ///  - ECDHE-ECDSA-AES128-GCM-SHA256 
    ///  - ECDHE-RSA-AES128-GCM-SHA256 
    ///  - ECDHE-ECDSA-AES256-GCM-SHA384 
    ///  - ECDHE-RSA-AES256-GCM-SHA384 
    ///  - ECDHE-ECDSA-CHACHA20-POLY1305 
    ///  - ECDHE-RSA-CHACHA20-POLY1305 
    ///  - DHE-RSA-AES128-GCM-SHA256 
    ///  - DHE-RSA-AES256-GCM-SHA384 
    ///  - DHE-RSA-CHACHA20-POLY1305 
    ///  - ECDHE-ECDSA-AES128-SHA256 
    ///  - ECDHE-RSA-AES128-SHA256 
    ///  - ECDHE-ECDSA-AES128-SHA 
    ///  - ECDHE-RSA-AES128-SHA 
    ///  - ECDHE-ECDSA-AES256-SHA384 
    ///  - ECDHE-RSA-AES256-SHA384 
    ///  - ECDHE-ECDSA-AES256-SHA 
    ///  - ECDHE-RSA-AES256-SHA 
    ///  - DHE-RSA-AES128-SHA256 
    ///  - DHE-RSA-AES256-SHA256 
    ///  - AES128-GCM-SHA256 
    ///  - AES256-GCM-SHA384 
    ///  - AES128-SHA256 
    ///  - AES256-SHA256 
    ///  - AES128-SHA 
    ///  - AES256-SHA 
    ///  - DES-CBC3-SHA 
    ///  minTLSVersion: VersionTLS10
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub old: Option<APIServerTlsSecurityProfileOld>,
    /// type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: 
    ///  https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations 
    ///  The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. 
    ///  Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<APIServerTlsSecurityProfileType>,
}

/// custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: 
///  ciphers: 
///  - ECDHE-ECDSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-AES128-GCM-SHA256 
///  - ECDHE-ECDSA-AES128-GCM-SHA256 
///  minTLSVersion: VersionTLS11
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerTlsSecurityProfileCustom {
    /// ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml): 
    ///  ciphers: - DES-CBC3-SHA
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ciphers: Option<Vec<String>>,
    /// minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): 
    ///  minTLSVersion: VersionTLS11 
    ///  NOTE: currently the highest minTLSVersion allowed is VersionTLS12
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTLSVersion")]
    pub min_tls_version: Option<APIServerTlsSecurityProfileCustomMinTlsVersion>,
}

/// custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: 
///  ciphers: 
///  - ECDHE-ECDSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-AES128-GCM-SHA256 
///  - ECDHE-ECDSA-AES128-GCM-SHA256 
///  minTLSVersion: VersionTLS11
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum APIServerTlsSecurityProfileCustomMinTlsVersion {
    #[serde(rename = "VersionTLS10")]
    VersionTls10,
    #[serde(rename = "VersionTLS11")]
    VersionTls11,
    #[serde(rename = "VersionTLS12")]
    VersionTls12,
    #[serde(rename = "VersionTLS13")]
    VersionTls13,
}

/// intermediate is a TLS security profile based on: 
///  https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 
///  and looks like this (yaml): 
///  ciphers: 
///  - TLS_AES_128_GCM_SHA256 
///  - TLS_AES_256_GCM_SHA384 
///  - TLS_CHACHA20_POLY1305_SHA256 
///  - ECDHE-ECDSA-AES128-GCM-SHA256 
///  - ECDHE-RSA-AES128-GCM-SHA256 
///  - ECDHE-ECDSA-AES256-GCM-SHA384 
///  - ECDHE-RSA-AES256-GCM-SHA384 
///  - ECDHE-ECDSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-CHACHA20-POLY1305 
///  - DHE-RSA-AES128-GCM-SHA256 
///  - DHE-RSA-AES256-GCM-SHA384 
///  minTLSVersion: VersionTLS12
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerTlsSecurityProfileIntermediate {
}

/// modern is a TLS security profile based on: 
///  https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility 
///  and looks like this (yaml): 
///  ciphers: 
///  - TLS_AES_128_GCM_SHA256 
///  - TLS_AES_256_GCM_SHA384 
///  - TLS_CHACHA20_POLY1305_SHA256 
///  minTLSVersion: VersionTLS13
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerTlsSecurityProfileModern {
}

/// old is a TLS security profile based on: 
///  https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility 
///  and looks like this (yaml): 
///  ciphers: 
///  - TLS_AES_128_GCM_SHA256 
///  - TLS_AES_256_GCM_SHA384 
///  - TLS_CHACHA20_POLY1305_SHA256 
///  - ECDHE-ECDSA-AES128-GCM-SHA256 
///  - ECDHE-RSA-AES128-GCM-SHA256 
///  - ECDHE-ECDSA-AES256-GCM-SHA384 
///  - ECDHE-RSA-AES256-GCM-SHA384 
///  - ECDHE-ECDSA-CHACHA20-POLY1305 
///  - ECDHE-RSA-CHACHA20-POLY1305 
///  - DHE-RSA-AES128-GCM-SHA256 
///  - DHE-RSA-AES256-GCM-SHA384 
///  - DHE-RSA-CHACHA20-POLY1305 
///  - ECDHE-ECDSA-AES128-SHA256 
///  - ECDHE-RSA-AES128-SHA256 
///  - ECDHE-ECDSA-AES128-SHA 
///  - ECDHE-RSA-AES128-SHA 
///  - ECDHE-ECDSA-AES256-SHA384 
///  - ECDHE-RSA-AES256-SHA384 
///  - ECDHE-ECDSA-AES256-SHA 
///  - ECDHE-RSA-AES256-SHA 
///  - DHE-RSA-AES128-SHA256 
///  - DHE-RSA-AES256-SHA256 
///  - AES128-GCM-SHA256 
///  - AES256-GCM-SHA384 
///  - AES128-SHA256 
///  - AES256-SHA256 
///  - AES128-SHA 
///  - AES256-SHA 
///  - DES-CBC3-SHA 
///  minTLSVersion: VersionTLS10
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerTlsSecurityProfileOld {
}

/// tlsSecurityProfile specifies settings for TLS connections for externally exposed servers. 
///  If unset, a default (which may change between releases) is chosen. Note that only Old, Intermediate and Custom profiles are currently supported, and the maximum available minTLSVersion is VersionTLS12.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum APIServerTlsSecurityProfileType {
    Old,
    Intermediate,
    Modern,
    Custom,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct APIServerStatus {
}

