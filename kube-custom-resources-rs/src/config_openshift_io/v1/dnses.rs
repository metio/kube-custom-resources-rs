// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/config.openshift.io/v1/dnses.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "config.openshift.io", version = "v1", kind = "DNS", plural = "dnses")]
#[kube(status = "DNSStatus")]
#[kube(schema = "disabled")]
pub struct DNSSpec {
    /// baseDomain is the base domain of the cluster. All managed DNS records will be sub-domains of this base. 
    ///  For example, given the base domain `openshift.example.com`, an API server DNS record may be created for `cluster-api.openshift.example.com`. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseDomain")]
    pub base_domain: Option<String>,
    /// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<DNSPlatform>,
    /// privateZone is the location where all the DNS records that are only available internally to the cluster exist. 
    ///  If this field is nil, no private records should be created. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateZone")]
    pub private_zone: Option<DNSPrivateZone>,
    /// publicZone is the location where all the DNS records that are publicly accessible to the internet exist. 
    ///  If this field is nil, no public records should be created. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicZone")]
    pub public_zone: Option<DNSPublicZone>,
}

/// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSPlatform {
    /// aws contains DNS configuration specific to the Amazon Web Services cloud provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<DNSPlatformAws>,
    /// type is the underlying infrastructure provider for the cluster. Allowed values: "", "AWS". 
    ///  Individual components may not support all platforms, and must handle unrecognized platforms with best-effort defaults.
    #[serde(rename = "type")]
    pub r#type: DNSPlatformType,
}

/// aws contains DNS configuration specific to the Amazon Web Services cloud provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSPlatformAws {
    /// privateZoneIAMRole contains the ARN of an IAM role that should be assumed when performing operations on the cluster's private hosted zone specified in the cluster DNS config. When left empty, no role should be assumed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateZoneIAMRole")]
    pub private_zone_iam_role: Option<String>,
}

/// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DNSPlatformType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// privateZone is the location where all the DNS records that are only available internally to the cluster exist. 
///  If this field is nil, no private records should be created. 
///  Once set, this field cannot be changed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSPrivateZone {
    /// id is the identifier that can be used to find the DNS hosted zone. 
    ///  on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// tags can be used to query the DNS hosted zone. 
    ///  on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// publicZone is the location where all the DNS records that are publicly accessible to the internet exist. 
///  If this field is nil, no public records should be created. 
///  Once set, this field cannot be changed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSPublicZone {
    /// id is the identifier that can be used to find the DNS hosted zone. 
    ///  on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// tags can be used to query the DNS hosted zone. 
    ///  on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSStatus {
}

