// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/machineconfiguration.openshift.io/v1/containerruntimeconfigs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// ContainerRuntimeConfigSpec defines the desired state of ContainerRuntimeConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "machineconfiguration.openshift.io", version = "v1", kind = "ContainerRuntimeConfig", plural = "containerruntimeconfigs")]
#[kube(status = "ContainerRuntimeConfigStatus")]
#[kube(schema = "disabled")]
pub struct ContainerRuntimeConfigSpec {
    /// ContainerRuntimeConfiguration defines the tuneables of the container runtime
    #[serde(rename = "containerRuntimeConfig")]
    pub container_runtime_config: ContainerRuntimeConfigContainerRuntimeConfig,
    /// MachineConfigPoolSelector selects which pools the ContainerRuntimeConfig shoud apply to. A nil selector will result in no pools being selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineConfigPoolSelector")]
    pub machine_config_pool_selector: Option<ContainerRuntimeConfigMachineConfigPoolSelector>,
}

/// ContainerRuntimeConfiguration defines the tuneables of the container runtime
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ContainerRuntimeConfigContainerRuntimeConfig {
    /// defaultRuntime is the name of the OCI runtime to be used as the default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultRuntime")]
    pub default_runtime: Option<String>,
    /// logLevel specifies the verbosity of the logs based on the level it is set to. Options are fatal, panic, error, warn, info, and debug.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
    /// logSizeMax specifies the Maximum size allowed for the container log file. Negative numbers indicate that no size limit is imposed. If it is positive, it must be >= 8192 to match/exceed conmon's read buffer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSizeMax")]
    pub log_size_max: Option<IntOrString>,
    /// overlaySize specifies the maximum size of a container image. This flag can be used to set quota on the size of container images. (default: 10GB)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overlaySize")]
    pub overlay_size: Option<IntOrString>,
    /// pidsLimit specifies the maximum number of processes allowed in a container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pidsLimit")]
    pub pids_limit: Option<i64>,
}

/// MachineConfigPoolSelector selects which pools the ContainerRuntimeConfig shoud apply to. A nil selector will result in no pools being selected.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ContainerRuntimeConfigMachineConfigPoolSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ContainerRuntimeConfigMachineConfigPoolSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ContainerRuntimeConfigMachineConfigPoolSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ContainerRuntimeConfigStatus defines the observed state of a ContainerRuntimeConfig
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ContainerRuntimeConfigStatus {
    /// conditions represents the latest available observations of current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ContainerRuntimeConfigStatusConditions>>,
    /// observedGeneration represents the generation observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// ContainerRuntimeConfigCondition defines the state of the ContainerRuntimeConfig
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ContainerRuntimeConfigStatusConditions {
    /// lastTransitionTime is the time of the last update to the current status object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// message provides additional information about the current condition. This is only to be consumed by humans.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// reason is the reason for the condition's last transition.  Reasons are PascalCase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// status of the condition, one of True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// type specifies the state of the operator's reconciliation functionality.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

