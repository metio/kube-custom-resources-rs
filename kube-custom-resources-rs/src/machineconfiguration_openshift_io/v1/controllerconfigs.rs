// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/machineconfiguration.openshift.io/v1/controllerconfigs.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// ControllerConfigSpec is the spec for ControllerConfig resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "machineconfiguration.openshift.io", version = "v1", kind = "ControllerConfig", plural = "controllerconfigs")]
#[kube(status = "ControllerConfigStatus")]
#[kube(schema = "disabled")]
pub struct ControllerConfigSpec {
    /// additionalTrustBundle is a certificate bundle that will be added to the nodes trusted certificate store.
    #[serde(rename = "additionalTrustBundle")]
    pub additional_trust_bundle: String,
    /// BaseOSContainerImage is the new-format container image for operating system updates.
    #[serde(rename = "baseOSContainerImage")]
    pub base_os_container_image: String,
    /// BaseOSExtensionsContainerImage is the matching extensions container for the new-format container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseOSExtensionsContainerImage")]
    pub base_os_extensions_container_image: Option<String>,
    /// cloudProvider specifies the cloud provider CA data
    #[serde(rename = "cloudProviderCAData")]
    pub cloud_provider_ca_data: String,
    /// cloudProviderConfig is the configuration for the given cloud provider
    #[serde(rename = "cloudProviderConfig")]
    pub cloud_provider_config: String,
    /// clusterDNSIP is the cluster DNS IP address
    #[serde(rename = "clusterDNSIP")]
    pub cluster_dnsip: String,
    /// dns holds the cluster dns details
    pub dns: ControllerConfigDns,
    /// etcdDiscoveryDomain is deprecated, use Infra.Status.EtcdDiscoveryDomain instead
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etcdDiscoveryDomain")]
    pub etcd_discovery_domain: Option<String>,
    /// imageRegistryBundleData is the ImageRegistryData
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRegistryBundleData")]
    pub image_registry_bundle_data: Option<Vec<ControllerConfigImageRegistryBundleData>>,
    /// imageRegistryBundleUserData is Image Registry Data provided by the user
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRegistryBundleUserData")]
    pub image_registry_bundle_user_data: Option<Vec<ControllerConfigImageRegistryBundleUserData>>,
    /// images is map of images that are used by the controller to render templates under ./templates/
    pub images: BTreeMap<String, String>,
    /// infra holds the infrastructure details
    pub infra: ControllerConfigInfra,
    /// internalRegistryPullSecret is the pull secret for the internal registry, used by rpm-ostree to pull images from the internal registry if present
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalRegistryPullSecret")]
    pub internal_registry_pull_secret: Option<String>,
    /// ipFamilies indicates the IP families in use by the cluster network
    #[serde(rename = "ipFamilies")]
    pub ip_families: String,
    /// kubeAPIServerServingCAData managed Kubelet to API Server Cert... Rotated automatically
    #[serde(rename = "kubeAPIServerServingCAData")]
    pub kube_api_server_serving_ca_data: String,
    /// Network contains additional network related information
    pub network: ControllerConfigNetwork,
    /// networkType holds the type of network the cluster is using XXX: this is temporary and will be dropped as soon as possible in favor of a better support to start network related services the proper way. Nobody is also changing this once the cluster is up and running the first time, so, disallow regeneration if this changes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// OSImageURL is the old-format container image that contains the OS update payload.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osImageURL")]
    pub os_image_url: Option<String>,
    /// platform is deprecated, use Infra.Status.PlatformStatus.Type instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// proxy holds the current proxy configuration for the nodes
    pub proxy: ControllerConfigProxy,
    /// pullSecret is the default pull secret that needs to be installed on all machines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullSecret")]
    pub pull_secret: Option<ControllerConfigPullSecret>,
    /// releaseImage is the image used when installing the cluster
    #[serde(rename = "releaseImage")]
    pub release_image: String,
    /// rootCAData specifies the root CA data
    #[serde(rename = "rootCAData")]
    pub root_ca_data: String,
}

/// dns holds the cluster dns details
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDns {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ControllerConfigDnsMetadata>,
    /// spec holds user settable values for configuration
    pub spec: ControllerConfigDnsSpec,
    /// status holds observed values from the cluster. They may not be overridden.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ControllerConfigDnsStatus>,
}

/// metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsMetadata {
}

/// spec holds user settable values for configuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsSpec {
    /// baseDomain is the base domain of the cluster. All managed DNS records will be sub-domains of this base. 
    ///  For example, given the base domain `openshift.example.com`, an API server DNS record may be created for `cluster-api.openshift.example.com`. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseDomain")]
    pub base_domain: Option<String>,
    /// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<ControllerConfigDnsSpecPlatform>,
    /// privateZone is the location where all the DNS records that are only available internally to the cluster exist. 
    ///  If this field is nil, no private records should be created. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateZone")]
    pub private_zone: Option<ControllerConfigDnsSpecPrivateZone>,
    /// publicZone is the location where all the DNS records that are publicly accessible to the internet exist. 
    ///  If this field is nil, no public records should be created. 
    ///  Once set, this field cannot be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicZone")]
    pub public_zone: Option<ControllerConfigDnsSpecPublicZone>,
}

/// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsSpecPlatform {
    /// aws contains DNS configuration specific to the Amazon Web Services cloud provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ControllerConfigDnsSpecPlatformAws>,
    /// type is the underlying infrastructure provider for the cluster. Allowed values: "", "AWS". 
    ///  Individual components may not support all platforms, and must handle unrecognized platforms with best-effort defaults.
    #[serde(rename = "type")]
    pub r#type: ControllerConfigDnsSpecPlatformType,
}

/// aws contains DNS configuration specific to the Amazon Web Services cloud provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsSpecPlatformAws {
    /// privateZoneIAMRole contains the ARN of an IAM role that should be assumed when performing operations on the cluster's private hosted zone specified in the cluster DNS config. When left empty, no role should be assumed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateZoneIAMRole")]
    pub private_zone_iam_role: Option<String>,
}

/// platform holds configuration specific to the underlying infrastructure provider for DNS. When omitted, this means the user has no opinion and the platform is left to choose reasonable defaults. These defaults are subject to change over time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigDnsSpecPlatformType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// privateZone is the location where all the DNS records that are only available internally to the cluster exist. 
///  If this field is nil, no private records should be created. 
///  Once set, this field cannot be changed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsSpecPrivateZone {
    /// id is the identifier that can be used to find the DNS hosted zone. 
    ///  on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// tags can be used to query the DNS hosted zone. 
    ///  on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// publicZone is the location where all the DNS records that are publicly accessible to the internet exist. 
///  If this field is nil, no public records should be created. 
///  Once set, this field cannot be changed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsSpecPublicZone {
    /// id is the identifier that can be used to find the DNS hosted zone. 
    ///  on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// tags can be used to query the DNS hosted zone. 
    ///  on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigDnsStatus {
}

/// ImageRegistryBundle contains information for writing image registry certificates
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigImageRegistryBundleData {
    /// data holds the contents of the bundle that will be written to the file location
    pub data: String,
    /// file holds the name of the file where the bundle will be written to disk
    pub file: String,
}

/// ImageRegistryBundle contains information for writing image registry certificates
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigImageRegistryBundleUserData {
    /// data holds the contents of the bundle that will be written to the file location
    pub data: String,
    /// file holds the name of the file where the bundle will be written to disk
    pub file: String,
}

/// infra holds the infrastructure details
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfra {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ControllerConfigInfraMetadata>,
    /// spec holds user settable values for configuration
    pub spec: ControllerConfigInfraSpec,
    /// status holds observed values from the cluster. They may not be overridden.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ControllerConfigInfraStatus>,
}

/// metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraMetadata {
}

/// spec holds user settable values for configuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpec {
    /// cloudConfig is a reference to a ConfigMap containing the cloud provider configuration file. This configuration file is used to configure the Kubernetes cloud provider integration when using the built-in cloud provider integration or the external cloud controller manager. The namespace for this config map is openshift-config. 
    ///  cloudConfig should only be consumed by the kube_cloud_config controller. The controller is responsible for using the user configuration in the spec for various platforms and combining that with the user provided ConfigMap in this field to create a stitched kube cloud config. The controller generates a ConfigMap `kube-cloud-config` in `openshift-config-managed` namespace with the kube cloud config is stored in `cloud.conf` key. All the clients are expected to use the generated ConfigMap only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudConfig")]
    pub cloud_config: Option<ControllerConfigInfraSpecCloudConfig>,
    /// platformSpec holds desired information specific to the underlying infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformSpec")]
    pub platform_spec: Option<ControllerConfigInfraSpecPlatformSpec>,
}

/// cloudConfig is a reference to a ConfigMap containing the cloud provider configuration file. This configuration file is used to configure the Kubernetes cloud provider integration when using the built-in cloud provider integration or the external cloud controller manager. The namespace for this config map is openshift-config. 
///  cloudConfig should only be consumed by the kube_cloud_config controller. The controller is responsible for using the user configuration in the spec for various platforms and combining that with the user provided ConfigMap in this field to create a stitched kube cloud config. The controller generates a ConfigMap `kube-cloud-config` in `openshift-config-managed` namespace with the kube cloud config is stored in `cloud.conf` key. All the clients are expected to use the generated ConfigMap only.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecCloudConfig {
    /// Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// platformSpec holds desired information specific to the underlying infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpec {
    /// AlibabaCloud contains settings specific to the Alibaba Cloud infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alibabaCloud")]
    pub alibaba_cloud: Option<ControllerConfigInfraSpecPlatformSpecAlibabaCloud>,
    /// AWS contains settings specific to the Amazon Web Services infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ControllerConfigInfraSpecPlatformSpecAws>,
    /// Azure contains settings specific to the Azure infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ControllerConfigInfraSpecPlatformSpecAzure>,
    /// BareMetal contains settings specific to the BareMetal platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub baremetal: Option<ControllerConfigInfraSpecPlatformSpecBaremetal>,
    /// EquinixMetal contains settings specific to the Equinix Metal infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "equinixMetal")]
    pub equinix_metal: Option<ControllerConfigInfraSpecPlatformSpecEquinixMetal>,
    /// ExternalPlatformType represents generic infrastructure provider. Platform-specific components should be supplemented separately.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<ControllerConfigInfraSpecPlatformSpecExternal>,
    /// GCP contains settings specific to the Google Cloud Platform infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<ControllerConfigInfraSpecPlatformSpecGcp>,
    /// IBMCloud contains settings specific to the IBMCloud infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ibmcloud: Option<ControllerConfigInfraSpecPlatformSpecIbmcloud>,
    /// Kubevirt contains settings specific to the kubevirt infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<ControllerConfigInfraSpecPlatformSpecKubevirt>,
    /// Nutanix contains settings specific to the Nutanix infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<ControllerConfigInfraSpecPlatformSpecNutanix>,
    /// OpenStack contains settings specific to the OpenStack infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openstack: Option<ControllerConfigInfraSpecPlatformSpecOpenstack>,
    /// Ovirt contains settings specific to the oVirt infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovirt: Option<ControllerConfigInfraSpecPlatformSpecOvirt>,
    /// PowerVS contains settings specific to the IBM Power Systems Virtual Servers infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub powervs: Option<ControllerConfigInfraSpecPlatformSpecPowervs>,
    /// type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack", "VSphere", "oVirt", "KubeVirt", "EquinixMetal", "PowerVS", "AlibabaCloud", "Nutanix" and "None". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ControllerConfigInfraSpecPlatformSpecType>,
    /// VSphere contains settings specific to the VSphere infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<ControllerConfigInfraSpecPlatformSpecVsphere>,
}

/// AlibabaCloud contains settings specific to the Alibaba Cloud infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecAlibabaCloud {
}

/// AWS contains settings specific to the Amazon Web Services infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecAws {
    /// serviceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoints")]
    pub service_endpoints: Option<Vec<ControllerConfigInfraSpecPlatformSpecAwsServiceEndpoints>>,
}

/// AWSServiceEndpoint store the configuration of a custom url to override existing defaults of AWS Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecAwsServiceEndpoints {
    /// name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Azure contains settings specific to the Azure infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecAzure {
}

/// BareMetal contains settings specific to the BareMetal platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecBaremetal {
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.apiServerInternalIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.ingressIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes. Each network is provided in the CIDR format and should be IPv4 or IPv6, for example "10.0.0.0/8" or "fd00::/8".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
}

/// EquinixMetal contains settings specific to the Equinix Metal infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecEquinixMetal {
}

/// ExternalPlatformType represents generic infrastructure provider. Platform-specific components should be supplemented separately.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecExternal {
    /// PlatformName holds the arbitrary string representing the infrastructure provider name, expected to be set at the installation time. This field is solely for informational and reporting purposes and is not expected to be used for decision-making.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformName")]
    pub platform_name: Option<String>,
}

/// GCP contains settings specific to the Google Cloud Platform infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecGcp {
}

/// IBMCloud contains settings specific to the IBMCloud infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecIbmcloud {
}

/// Kubevirt contains settings specific to the kubevirt infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecKubevirt {
}

/// Nutanix contains settings specific to the Nutanix infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanix {
    /// failureDomains configures failure domains information for the Nutanix platform. When set, the failure domains defined here may be used to spread Machines across prism element clusters to improve fault tolerance of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureDomains")]
    pub failure_domains: Option<Vec<ControllerConfigInfraSpecPlatformSpecNutanixFailureDomains>>,
    /// prismCentral holds the endpoint address and port to access the Nutanix Prism Central. When a cluster-wide proxy is installed, by default, this endpoint will be accessed via the proxy. Should you wish for communication with this endpoint not to be proxied, please add the endpoint to the proxy spec.noProxy list.
    #[serde(rename = "prismCentral")]
    pub prism_central: ControllerConfigInfraSpecPlatformSpecNutanixPrismCentral,
    /// prismElements holds one or more endpoint address and port data to access the Nutanix Prism Elements (clusters) of the Nutanix Prism Central. Currently we only support one Prism Element (cluster) for an OpenShift cluster, where all the Nutanix resources (VMs, subnets, volumes, etc.) used in the OpenShift cluster are located. In the future, we may support Nutanix resources (VMs, etc.) spread over multiple Prism Elements (clusters) of the Prism Central.
    #[serde(rename = "prismElements")]
    pub prism_elements: Vec<ControllerConfigInfraSpecPlatformSpecNutanixPrismElements>,
}

/// NutanixFailureDomain configures failure domain information for the Nutanix platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixFailureDomains {
    /// cluster is to identify the cluster (the Prism Element under management of the Prism Central), in which the Machine's VM will be created. The cluster identifier (uuid or name) can be obtained from the Prism Central console or using the prism_central API.
    pub cluster: ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsCluster,
    /// name defines the unique name of a failure domain. Name is required and must be at most 64 characters in length. It must consist of only lower case alphanumeric characters and hyphens (-). It must start and end with an alphanumeric character. This value is arbitrary and is used to identify the failure domain within the platform.
    pub name: String,
    /// subnets holds a list of identifiers (one or more) of the cluster's network subnets for the Machine's VM to connect to. The subnet identifiers (uuid or name) can be obtained from the Prism Central console or using the prism_central API.
    pub subnets: Vec<ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsSubnets>,
}

/// cluster is to identify the cluster (the Prism Element under management of the Prism Central), in which the Machine's VM will be created. The cluster identifier (uuid or name) can be obtained from the Prism Central console or using the prism_central API.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsCluster {
    /// name is the resource name in the PC. It cannot be empty if the type is Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// type is the identifier type to use for this resource.
    #[serde(rename = "type")]
    pub r#type: ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsClusterType,
    /// uuid is the UUID of the resource in the PC. It cannot be empty if the type is UUID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// cluster is to identify the cluster (the Prism Element under management of the Prism Central), in which the Machine's VM will be created. The cluster identifier (uuid or name) can be obtained from the Prism Central console or using the prism_central API.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsClusterType {
    #[serde(rename = "UUID")]
    Uuid,
    Name,
}

/// NutanixResourceIdentifier holds the identity of a Nutanix PC resource (cluster, image, subnet, etc.)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsSubnets {
    /// name is the resource name in the PC. It cannot be empty if the type is Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// type is the identifier type to use for this resource.
    #[serde(rename = "type")]
    pub r#type: ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsSubnetsType,
    /// uuid is the UUID of the resource in the PC. It cannot be empty if the type is UUID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// NutanixResourceIdentifier holds the identity of a Nutanix PC resource (cluster, image, subnet, etc.)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraSpecPlatformSpecNutanixFailureDomainsSubnetsType {
    #[serde(rename = "UUID")]
    Uuid,
    Name,
}

/// prismCentral holds the endpoint address and port to access the Nutanix Prism Central. When a cluster-wide proxy is installed, by default, this endpoint will be accessed via the proxy. Should you wish for communication with this endpoint not to be proxied, please add the endpoint to the proxy spec.noProxy list.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixPrismCentral {
    /// address is the endpoint address (DNS name or IP address) of the Nutanix Prism Central or Element (cluster)
    pub address: String,
    /// port is the port number to access the Nutanix Prism Central or Element (cluster)
    pub port: i32,
}

/// NutanixPrismElementEndpoint holds the name and endpoint data for a Prism Element (cluster)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixPrismElements {
    /// endpoint holds the endpoint address and port data of the Prism Element (cluster). When a cluster-wide proxy is installed, by default, this endpoint will be accessed via the proxy. Should you wish for communication with this endpoint not to be proxied, please add the endpoint to the proxy spec.noProxy list.
    pub endpoint: ControllerConfigInfraSpecPlatformSpecNutanixPrismElementsEndpoint,
    /// name is the name of the Prism Element (cluster). This value will correspond with the cluster field configured on other resources (eg Machines, PVCs, etc).
    pub name: String,
}

/// endpoint holds the endpoint address and port data of the Prism Element (cluster). When a cluster-wide proxy is installed, by default, this endpoint will be accessed via the proxy. Should you wish for communication with this endpoint not to be proxied, please add the endpoint to the proxy spec.noProxy list.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecNutanixPrismElementsEndpoint {
    /// address is the endpoint address (DNS name or IP address) of the Nutanix Prism Central or Element (cluster)
    pub address: String,
    /// port is the port number to access the Nutanix Prism Central or Element (cluster)
    pub port: i32,
}

/// OpenStack contains settings specific to the OpenStack infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecOpenstack {
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.apiServerInternalIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.ingressIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes. Each network is provided in the CIDR format and should be IPv4 or IPv6, for example "10.0.0.0/8" or "fd00::/8".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
}

/// Ovirt contains settings specific to the oVirt infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecOvirt {
}

/// PowerVS contains settings specific to the IBM Power Systems Virtual Servers infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecPowervs {
    /// serviceEndpoints is a list of custom endpoints which will override the default service endpoints of a Power VS service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoints")]
    pub service_endpoints: Option<Vec<ControllerConfigInfraSpecPlatformSpecPowervsServiceEndpoints>>,
}

/// PowervsServiceEndpoint stores the configuration of a custom url to override existing defaults of PowerVS Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecPowervsServiceEndpoints {
    /// name is the name of the Power VS service. Few of the services are IAM - https://cloud.ibm.com/apidocs/iam-identity-token-api ResourceController - https://cloud.ibm.com/apidocs/resource-controller/resource-controller Power Cloud - https://cloud.ibm.com/apidocs/power-cloud
    pub name: String,
    /// url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
    pub url: String,
}

/// platformSpec holds desired information specific to the underlying infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraSpecPlatformSpecType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// VSphere contains settings specific to the VSphere infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphere {
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.apiServerInternalIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// failureDomains contains the definition of region, zone and the vCenter topology. If this is omitted failure domains (regions and zones) will not be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureDomains")]
    pub failure_domains: Option<Vec<ControllerConfigInfraSpecPlatformSpecVsphereFailureDomains>>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IP addresses, one from IPv4 family and one from IPv6. In single stack clusters a single IP address is expected. When omitted, values from the status.ingressIPs will be used. Once set, the list cannot be completely removed (but its second entry can).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes. Each network is provided in the CIDR format and should be IPv4 or IPv6, for example "10.0.0.0/8" or "fd00::/8".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
    /// nodeNetworking contains the definition of internal and external network constraints for assigning the node's networking. If this field is omitted, networking defaults to the legacy address selection behavior which is to only support a single address and return the first one found.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeNetworking")]
    pub node_networking: Option<ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworking>,
    /// vcenters holds the connection details for services to communicate with vCenter. Currently, only a single vCenter is supported. ---
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vcenters: Option<Vec<ControllerConfigInfraSpecPlatformSpecVsphereVcenters>>,
}

/// VSpherePlatformFailureDomainSpec holds the region and zone failure domain and the vCenter topology of that failure domain.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereFailureDomains {
    /// name defines the arbitrary but unique name of a failure domain.
    pub name: String,
    /// region defines the name of a region tag that will be attached to a vCenter datacenter. The tag category in vCenter must be named openshift-region.
    pub region: String,
    /// server is the fully-qualified domain name or the IP address of the vCenter server. ---
    pub server: String,
    /// Topology describes a given failure domain using vSphere constructs
    pub topology: ControllerConfigInfraSpecPlatformSpecVsphereFailureDomainsTopology,
    /// zone defines the name of a zone tag that will be attached to a vCenter cluster. The tag category in vCenter must be named openshift-zone.
    pub zone: String,
}

/// Topology describes a given failure domain using vSphere constructs
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereFailureDomainsTopology {
    /// computeCluster the absolute path of the vCenter cluster in which virtual machine will be located. The absolute path is of the form /<datacenter>/host/<cluster>. The maximum length of the path is 2048 characters.
    #[serde(rename = "computeCluster")]
    pub compute_cluster: String,
    /// datacenter is the name of vCenter datacenter in which virtual machines will be located. The maximum length of the datacenter name is 80 characters.
    pub datacenter: String,
    /// datastore is the absolute path of the datastore in which the virtual machine is located. The absolute path is of the form /<datacenter>/datastore/<datastore> The maximum length of the path is 2048 characters.
    pub datastore: String,
    /// folder is the absolute path of the folder where virtual machines are located. The absolute path is of the form /<datacenter>/vm/<folder>. The maximum length of the path is 2048 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<String>,
    /// networks is the list of port group network names within this failure domain. Currently, we only support a single interface per RHCOS virtual machine. The available networks (port groups) can be listed using `govc ls 'network/*'` The single interface should be the absolute path of the form /<datacenter>/network/<portgroup>.
    pub networks: Vec<String>,
    /// resourcePool is the absolute path of the resource pool where virtual machines will be created. The absolute path is of the form /<datacenter>/host/<cluster>/Resources/<resourcepool>. The maximum length of the path is 2048 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePool")]
    pub resource_pool: Option<String>,
}

/// nodeNetworking contains the definition of internal and external network constraints for assigning the node's networking. If this field is omitted, networking defaults to the legacy address selection behavior which is to only support a single address and return the first one found.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworking {
    /// external represents the network configuration of the node that is externally routable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworkingExternal>,
    /// internal represents the network configuration of the node that is routable only within the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub internal: Option<ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworkingInternal>,
}

/// external represents the network configuration of the node that is externally routable.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworkingExternal {
    /// excludeNetworkSubnetCidr IP addresses in subnet ranges will be excluded when selecting the IP address from the VirtualMachine's VM for use in the status.addresses fields. ---
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeNetworkSubnetCidr")]
    pub exclude_network_subnet_cidr: Option<Vec<String>>,
    /// network VirtualMachine's VM Network names that will be used to when searching for status.addresses fields. Note that if internal.networkSubnetCIDR and external.networkSubnetCIDR are not set, then the vNIC associated to this network must only have a single IP address assigned to it. The available networks (port groups) can be listed using `govc ls 'network/*'`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// networkSubnetCidr IP address on VirtualMachine's network interfaces included in the fields' CIDRs that will be used in respective status.addresses fields. ---
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSubnetCidr")]
    pub network_subnet_cidr: Option<Vec<String>>,
}

/// internal represents the network configuration of the node that is routable only within the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereNodeNetworkingInternal {
    /// excludeNetworkSubnetCidr IP addresses in subnet ranges will be excluded when selecting the IP address from the VirtualMachine's VM for use in the status.addresses fields. ---
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeNetworkSubnetCidr")]
    pub exclude_network_subnet_cidr: Option<Vec<String>>,
    /// network VirtualMachine's VM Network names that will be used to when searching for status.addresses fields. Note that if internal.networkSubnetCIDR and external.networkSubnetCIDR are not set, then the vNIC associated to this network must only have a single IP address assigned to it. The available networks (port groups) can be listed using `govc ls 'network/*'`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// networkSubnetCidr IP address on VirtualMachine's network interfaces included in the fields' CIDRs that will be used in respective status.addresses fields. ---
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkSubnetCidr")]
    pub network_subnet_cidr: Option<Vec<String>>,
}

/// VSpherePlatformVCenterSpec stores the vCenter connection fields. This is used by the vSphere CCM.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraSpecPlatformSpecVsphereVcenters {
    /// The vCenter Datacenters in which the RHCOS vm guests are located. This field will be used by the Cloud Controller Manager. Each datacenter listed here should be used within a topology.
    pub datacenters: Vec<String>,
    /// port is the TCP port that will be used to communicate to the vCenter endpoint. When omitted, this means the user has no opinion and it is up to the platform to choose a sensible default, which is subject to change over time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// server is the fully-qualified domain name or the IP address of the vCenter server. ---
    pub server: String,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatus {
    /// apiServerInternalURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerInternalURL can be used by components like kubelets, to contact the Kubernetes API server using the infrastructure provider rather than Kubernetes networking.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalURI")]
    pub api_server_internal_uri: Option<String>,
    /// apiServerURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerURL can be used by components like the web console to tell users where to find the Kubernetes API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerURL")]
    pub api_server_url: Option<String>,
    /// controlPlaneTopology expresses the expectations for operands that normally run on control nodes. The default is 'HighlyAvailable', which represents the behavior operators have in a "normal" cluster. The 'SingleReplica' mode will be used in single-node deployments and the operators should not configure the operand for highly-available operation The 'External' mode indicates that the control plane is hosted externally to the cluster and that its components are not visible within the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneTopology")]
    pub control_plane_topology: Option<ControllerConfigInfraStatusControlPlaneTopology>,
    /// cpuPartitioning expresses if CPU partitioning is a currently enabled feature in the cluster. CPU Partitioning means that this cluster can support partitioning workloads to specific CPU Sets. Valid values are "None" and "AllNodes". When omitted, the default value is "None". The default value of "None" indicates that no nodes will be setup with CPU partitioning. The "AllNodes" value indicates that all nodes have been setup with CPU partitioning, and can then be further configured via the PerformanceProfile API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuPartitioning")]
    pub cpu_partitioning: Option<ControllerConfigInfraStatusCpuPartitioning>,
    /// etcdDiscoveryDomain is the domain used to fetch the SRV records for discovering etcd servers and clients. For more info: https://github.com/etcd-io/etcd/blob/329be66e8b3f9e2e6af83c123ff89297e49ebd15/Documentation/op-guide/clustering.md#dns-discovery deprecated: as of 4.7, this field is no longer set or honored.  It will be removed in a future release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etcdDiscoveryDomain")]
    pub etcd_discovery_domain: Option<String>,
    /// infrastructureName uniquely identifies a cluster with a human friendly name. Once set it should not be changed. Must be of max length 27 and must have only alphanumeric or hyphen characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureName")]
    pub infrastructure_name: Option<String>,
    /// infrastructureTopology expresses the expectations for infrastructure services that do not run on control plane nodes, usually indicated by a node selector for a `role` value other than `master`. The default is 'HighlyAvailable', which represents the behavior operators have in a "normal" cluster. The 'SingleReplica' mode will be used in single-node deployments and the operators should not configure the operand for highly-available operation NOTE: External topology mode is not applicable for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureTopology")]
    pub infrastructure_topology: Option<ControllerConfigInfraStatusInfrastructureTopology>,
    /// platform is the underlying infrastructure provider for the cluster. 
    ///  Deprecated: Use platformStatus.type instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<ControllerConfigInfraStatusPlatform>,
    /// platformStatus holds status information specific to the underlying infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformStatus")]
    pub platform_status: Option<ControllerConfigInfraStatusPlatformStatus>,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusControlPlaneTopology {
    HighlyAvailable,
    SingleReplica,
    External,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusCpuPartitioning {
    None,
    AllNodes,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusInfrastructureTopology {
    HighlyAvailable,
    SingleReplica,
}

/// status holds observed values from the cluster. They may not be overridden.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatform {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// platformStatus holds status information specific to the underlying infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatus {
    /// AlibabaCloud contains settings specific to the Alibaba Cloud infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alibabaCloud")]
    pub alibaba_cloud: Option<ControllerConfigInfraStatusPlatformStatusAlibabaCloud>,
    /// AWS contains settings specific to the Amazon Web Services infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ControllerConfigInfraStatusPlatformStatusAws>,
    /// Azure contains settings specific to the Azure infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ControllerConfigInfraStatusPlatformStatusAzure>,
    /// BareMetal contains settings specific to the BareMetal platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub baremetal: Option<ControllerConfigInfraStatusPlatformStatusBaremetal>,
    /// EquinixMetal contains settings specific to the Equinix Metal infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "equinixMetal")]
    pub equinix_metal: Option<ControllerConfigInfraStatusPlatformStatusEquinixMetal>,
    /// External contains settings specific to the generic External infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<ControllerConfigInfraStatusPlatformStatusExternal>,
    /// GCP contains settings specific to the Google Cloud Platform infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<ControllerConfigInfraStatusPlatformStatusGcp>,
    /// IBMCloud contains settings specific to the IBMCloud infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ibmcloud: Option<ControllerConfigInfraStatusPlatformStatusIbmcloud>,
    /// Kubevirt contains settings specific to the kubevirt infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubevirt: Option<ControllerConfigInfraStatusPlatformStatusKubevirt>,
    /// Nutanix contains settings specific to the Nutanix infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<ControllerConfigInfraStatusPlatformStatusNutanix>,
    /// OpenStack contains settings specific to the OpenStack infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openstack: Option<ControllerConfigInfraStatusPlatformStatusOpenstack>,
    /// Ovirt contains settings specific to the oVirt infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovirt: Option<ControllerConfigInfraStatusPlatformStatusOvirt>,
    /// PowerVS contains settings specific to the Power Systems Virtual Servers infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub powervs: Option<ControllerConfigInfraStatusPlatformStatusPowervs>,
    /// type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack", "VSphere", "oVirt", "EquinixMetal", "PowerVS", "AlibabaCloud", "Nutanix" and "None". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform. 
    ///  This value will be synced with to the `status.platform` and `status.platformStatus.type`. Currently this value cannot be changed once set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ControllerConfigInfraStatusPlatformStatusType>,
    /// VSphere contains settings specific to the VSphere infrastructure provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<ControllerConfigInfraStatusPlatformStatusVsphere>,
}

/// AlibabaCloud contains settings specific to the Alibaba Cloud infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAlibabaCloud {
    /// region specifies the region for Alibaba Cloud resources created for the cluster.
    pub region: String,
    /// resourceGroupID is the ID of the resource group for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupID")]
    pub resource_group_id: Option<String>,
    /// resourceTags is a list of additional tags to apply to Alibaba Cloud resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<Vec<ControllerConfigInfraStatusPlatformStatusAlibabaCloudResourceTags>>,
}

/// AlibabaCloudResourceTag is the set of tags to add to apply to resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAlibabaCloudResourceTags {
    /// key is the key of the tag.
    pub key: String,
    /// value is the value of the tag.
    pub value: String,
}

/// AWS contains settings specific to the Amazon Web Services infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAws {
    /// region holds the default AWS region for new AWS resources created by the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// resourceTags is a list of additional tags to apply to AWS resources created for the cluster. See https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html for information on tagging AWS resources. AWS supports a maximum of 50 tags per resource. OpenShift reserves 25 tags for its use, leaving 25 tags available for the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<Vec<ControllerConfigInfraStatusPlatformStatusAwsResourceTags>>,
    /// ServiceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoints")]
    pub service_endpoints: Option<Vec<ControllerConfigInfraStatusPlatformStatusAwsServiceEndpoints>>,
}

/// AWSResourceTag is a tag to apply to AWS resources created for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAwsResourceTags {
    /// key is the key of the tag
    pub key: String,
    /// value is the value of the tag. Some AWS service do not support empty values. Since tags are added to resources in many services, the length of the tag value must meet the requirements of all services.
    pub value: String,
}

/// AWSServiceEndpoint store the configuration of a custom url to override existing defaults of AWS Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAwsServiceEndpoints {
    /// name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Azure contains settings specific to the Azure infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAzure {
    /// armEndpoint specifies a URL to use for resource management in non-soverign clouds such as Azure Stack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "armEndpoint")]
    pub arm_endpoint: Option<String>,
    /// cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to `AzurePublicCloud`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudName")]
    pub cloud_name: Option<ControllerConfigInfraStatusPlatformStatusAzureCloudName>,
    /// networkResourceGroupName is the Resource Group for network resources like the Virtual Network and Subnets used by the cluster. If empty, the value is same as ResourceGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkResourceGroupName")]
    pub network_resource_group_name: Option<String>,
    /// resourceGroupName is the Resource Group for new Azure resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupName")]
    pub resource_group_name: Option<String>,
    /// resourceTags is a list of additional tags to apply to Azure resources created for the cluster. See https://docs.microsoft.com/en-us/rest/api/resources/tags for information on tagging Azure resources. Due to limitations on Automation, Content Delivery Network, DNS Azure resources, a maximum of 15 tags may be applied. OpenShift reserves 5 tags for internal use, allowing 10 tags for user configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<Vec<ControllerConfigInfraStatusPlatformStatusAzureResourceTags>>,
}

/// Azure contains settings specific to the Azure infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatformStatusAzureCloudName {
    #[serde(rename = "")]
    KopiumEmpty,
    AzurePublicCloud,
    #[serde(rename = "AzureUSGovernmentCloud")]
    AzureUsGovernmentCloud,
    AzureChinaCloud,
    AzureGermanCloud,
    AzureStackCloud,
}

/// AzureResourceTag is a tag to apply to Azure resources created for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusAzureResourceTags {
    /// key is the key part of the tag. A tag key can have a maximum of 128 characters and cannot be empty. Key must begin with a letter, end with a letter, number or underscore, and must contain only alphanumeric characters and the following special characters `_ . -`.
    pub key: String,
    /// value is the value part of the tag. A tag value can have a maximum of 256 characters and cannot be empty. Value must contain only alphanumeric characters and the following special characters `_ + , - . / : ; < = > ? @`.
    pub value: String,
}

/// BareMetal contains settings specific to the BareMetal platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusBaremetal {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers. 
    ///  Deprecated: Use APIServerInternalIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names. 
    ///  Deprecated: Use IngressIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
    /// nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for BareMetal deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeDNSIP")]
    pub node_dnsip: Option<String>,
}

/// EquinixMetal contains settings specific to the Equinix Metal infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusEquinixMetal {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
}

/// External contains settings specific to the generic External infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusExternal {
    /// cloudControllerManager contains settings specific to the external Cloud Controller Manager (a.k.a. CCM or CPI). When omitted, new nodes will be not tainted and no extra initialization from the cloud controller manager is expected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudControllerManager")]
    pub cloud_controller_manager: Option<ControllerConfigInfraStatusPlatformStatusExternalCloudControllerManager>,
}

/// cloudControllerManager contains settings specific to the external Cloud Controller Manager (a.k.a. CCM or CPI). When omitted, new nodes will be not tainted and no extra initialization from the cloud controller manager is expected.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusExternalCloudControllerManager {
    /// state determines whether or not an external Cloud Controller Manager is expected to be installed within the cluster. https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/#running-cloud-controller-manager 
    ///  Valid values are "External", "None" and omitted. When set to "External", new nodes will be tainted as uninitialized when created, preventing them from running workloads until they are initialized by the cloud controller manager. When omitted or set to "None", new nodes will be not tainted and no extra initialization from the cloud controller manager is expected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<ControllerConfigInfraStatusPlatformStatusExternalCloudControllerManagerState>,
}

/// cloudControllerManager contains settings specific to the external Cloud Controller Manager (a.k.a. CCM or CPI). When omitted, new nodes will be not tainted and no extra initialization from the cloud controller manager is expected.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatformStatusExternalCloudControllerManagerState {
    #[serde(rename = "")]
    KopiumEmpty,
    External,
    None,
}

/// GCP contains settings specific to the Google Cloud Platform infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusGcp {
    /// resourceGroupName is the Project ID for new GCP resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectID")]
    pub project_id: Option<String>,
    /// region holds the region for new GCP resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// IBMCloud contains settings specific to the IBMCloud infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusIbmcloud {
    /// CISInstanceCRN is the CRN of the Cloud Internet Services instance managing the DNS zone for the cluster's base domain
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cisInstanceCRN")]
    pub cis_instance_crn: Option<String>,
    /// DNSInstanceCRN is the CRN of the DNS Services instance managing the DNS zone for the cluster's base domain
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsInstanceCRN")]
    pub dns_instance_crn: Option<String>,
    /// Location is where the cluster has been deployed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// ProviderType indicates the type of cluster that was created
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerType")]
    pub provider_type: Option<String>,
    /// ResourceGroupName is the Resource Group for new IBMCloud resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupName")]
    pub resource_group_name: Option<String>,
    /// serviceEndpoints is a list of custom endpoints which will override the default service endpoints of an IBM Cloud service. These endpoints are consumed by components within the cluster to reach the respective IBM Cloud Services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoints")]
    pub service_endpoints: Option<Vec<ControllerConfigInfraStatusPlatformStatusIbmcloudServiceEndpoints>>,
}

/// IBMCloudServiceEndpoint stores the configuration of a custom url to override existing defaults of IBM Cloud Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusIbmcloudServiceEndpoints {
    /// name is the name of the IBM Cloud service. Possible values are: CIS, COS, DNSServices, GlobalSearch, GlobalTagging, HyperProtect, IAM, KeyProtect, ResourceController, ResourceManager, or VPC. For example, the IBM Cloud Private IAM service could be configured with the service `name` of `IAM` and `url` of `https://private.iam.cloud.ibm.com` Whereas the IBM Cloud Private VPC service for US South (Dallas) could be configured with the service `name` of `VPC` and `url` of `https://us.south.private.iaas.cloud.ibm.com`
    pub name: ControllerConfigInfraStatusPlatformStatusIbmcloudServiceEndpointsName,
    /// url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
    pub url: String,
}

/// IBMCloudServiceEndpoint stores the configuration of a custom url to override existing defaults of IBM Cloud Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatformStatusIbmcloudServiceEndpointsName {
    #[serde(rename = "CIS")]
    Cis,
    #[serde(rename = "COS")]
    Cos,
    #[serde(rename = "DNSServices")]
    DnsServices,
    GlobalSearch,
    GlobalTagging,
    HyperProtect,
    #[serde(rename = "IAM")]
    Iam,
    KeyProtect,
    ResourceController,
    ResourceManager,
    #[serde(rename = "VPC")]
    Vpc,
}

/// Kubevirt contains settings specific to the kubevirt infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusKubevirt {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
}

/// Nutanix contains settings specific to the Nutanix infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusNutanix {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers. 
    ///  Deprecated: Use APIServerInternalIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names. 
    ///  Deprecated: Use IngressIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
}

/// OpenStack contains settings specific to the OpenStack infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusOpenstack {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers. 
    ///  Deprecated: Use APIServerInternalIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// cloudName is the name of the desired OpenStack cloud in the client configuration file (`clouds.yaml`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudName")]
    pub cloud_name: Option<String>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names. 
    ///  Deprecated: Use IngressIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// loadBalancer defines how the load balancer used by the cluster is configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<ControllerConfigInfraStatusPlatformStatusOpenstackLoadBalancer>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
    /// nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for OpenStack deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeDNSIP")]
    pub node_dnsip: Option<String>,
}

/// loadBalancer defines how the load balancer used by the cluster is configured.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusOpenstackLoadBalancer {
    /// type defines the type of load balancer used by the cluster on OpenStack platform which can be a user-managed or openshift-managed load balancer that is to be used for the OpenShift API and Ingress endpoints. When set to OpenShiftManagedDefault the static pods in charge of API and Ingress traffic load-balancing defined in the machine config operator will be deployed. When set to UserManaged these static pods will not be deployed and it is expected that the load balancer is configured out of band by the deployer. When omitted, this means no opinion and the platform is left to choose a reasonable default. The default value is OpenShiftManagedDefault.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ControllerConfigInfraStatusPlatformStatusOpenstackLoadBalancerType>,
}

/// loadBalancer defines how the load balancer used by the cluster is configured.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatformStatusOpenstackLoadBalancerType {
    OpenShiftManagedDefault,
    UserManaged,
}

/// Ovirt contains settings specific to the oVirt infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusOvirt {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers. 
    ///  Deprecated: Use APIServerInternalIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names. 
    ///  Deprecated: Use IngressIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// deprecated: as of 4.6, this field is no longer set or honored.  It will be removed in a future release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeDNSIP")]
    pub node_dnsip: Option<String>,
}

/// PowerVS contains settings specific to the Power Systems Virtual Servers infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusPowervs {
    /// CISInstanceCRN is the CRN of the Cloud Internet Services instance managing the DNS zone for the cluster's base domain
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cisInstanceCRN")]
    pub cis_instance_crn: Option<String>,
    /// DNSInstanceCRN is the CRN of the DNS Services instance managing the DNS zone for the cluster's base domain
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsInstanceCRN")]
    pub dns_instance_crn: Option<String>,
    /// region holds the default Power VS region for new Power VS resources created by the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// resourceGroup is the resource group name for new IBMCloud resources created for a cluster. The resource group specified here will be used by cluster-image-registry-operator to set up a COS Instance in IBMCloud for the cluster registry. More about resource groups can be found here: https://cloud.ibm.com/docs/account?topic=account-rgs. When omitted, the image registry operator won't be able to configure storage, which results in the image registry cluster operator not being in an available state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<String>,
    /// serviceEndpoints is a list of custom endpoints which will override the default service endpoints of a Power VS service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoints")]
    pub service_endpoints: Option<Vec<ControllerConfigInfraStatusPlatformStatusPowervsServiceEndpoints>>,
    /// zone holds the default zone for the new Power VS resources created by the cluster. Note: Currently only single-zone OCP clusters are supported
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// PowervsServiceEndpoint stores the configuration of a custom url to override existing defaults of PowerVS Services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusPowervsServiceEndpoints {
    /// name is the name of the Power VS service. Few of the services are IAM - https://cloud.ibm.com/apidocs/iam-identity-token-api ResourceController - https://cloud.ibm.com/apidocs/resource-controller/resource-controller Power Cloud - https://cloud.ibm.com/apidocs/power-cloud
    pub name: String,
    /// url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.
    pub url: String,
}

/// platformStatus holds status information specific to the underlying infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControllerConfigInfraStatusPlatformStatusType {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// VSphere contains settings specific to the VSphere infrastructure provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigInfraStatusPlatformStatusVsphere {
    /// apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers. 
    ///  Deprecated: Use APIServerInternalIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIP")]
    pub api_server_internal_ip: Option<String>,
    /// apiServerInternalIPs are the IP addresses to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. These are the IPs for a self-hosted load balancer in front of the API servers. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiServerInternalIPs")]
    pub api_server_internal_i_ps: Option<Vec<String>>,
    /// ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names. 
    ///  Deprecated: Use IngressIPs instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIP")]
    pub ingress_ip: Option<String>,
    /// ingressIPs are the external IPs which route to the default ingress controller. The IPs are suitable targets of a wildcard DNS record used to resolve default route host names. In dual stack clusters this list contains two IPs otherwise only one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressIPs")]
    pub ingress_i_ps: Option<Vec<String>>,
    /// machineNetworks are IP networks used to connect all the OpenShift cluster nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineNetworks")]
    pub machine_networks: Option<Vec<String>>,
    /// nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for vSphere deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeDNSIP")]
    pub node_dnsip: Option<String>,
}

/// Network contains additional network related information
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigNetwork {
    /// MTUMigration contains the MTU migration configuration.
    #[serde(rename = "mtuMigration")]
    pub mtu_migration: ControllerConfigNetworkMtuMigration,
}

/// MTUMigration contains the MTU migration configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigNetworkMtuMigration {
    /// Machine contains MTU migration configuration for the machine's uplink.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machine: Option<ControllerConfigNetworkMtuMigrationMachine>,
    /// Network contains MTU migration configuration for the default network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<ControllerConfigNetworkMtuMigrationNetwork>,
}

/// Machine contains MTU migration configuration for the machine's uplink.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigNetworkMtuMigrationMachine {
    /// From is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// To is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// Network contains MTU migration configuration for the default network.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigNetworkMtuMigrationNetwork {
    /// From is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// To is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// proxy holds the current proxy configuration for the nodes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigProxy {
    /// httpProxy is the URL of the proxy for HTTP requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<String>,
    /// httpsProxy is the URL of the proxy for HTTPS requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsProxy")]
    pub https_proxy: Option<String>,
    /// noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    pub no_proxy: Option<String>,
}

/// pullSecret is the default pull secret that needs to be installed on all machines.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigPullSecret {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// ControllerConfigStatus is the status for ControllerConfig
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigStatus {
    /// conditions represents the latest available observations of current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ControllerConfigStatusConditions>>,
    /// controllerCertificates represents the latest available observations of the automatically rotating certificates in the MCO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerCertificates")]
    pub controller_certificates: Option<Vec<ControllerConfigStatusControllerCertificates>>,
    /// observedGeneration represents the generation observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// ControllerConfigStatusCondition contains condition information for ControllerConfigStatus
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigStatusConditions {
    /// lastTransitionTime is the time of the last update to the current status object.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message provides additional information about the current condition. This is only to be consumed by humans.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// reason is the reason for the condition's last transition.  Reasons are PascalCase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// status of the condition, one of True, False, Unknown.
    pub status: String,
    /// type specifies the state of the operator's reconciliation functionality.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ControllerCertificate contains info about a specific cert.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControllerConfigStatusControllerCertificates {
    /// bundleFile is the larger bundle a cert comes from
    #[serde(rename = "bundleFile")]
    pub bundle_file: String,
    /// notAfter is the upper boundary for validity
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    pub not_after: Option<String>,
    /// notBefore is the lower boundary for validity
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<String>,
    /// signer is the  cert Issuer
    pub signer: String,
    /// subject is the cert subject
    pub subject: String,
}

