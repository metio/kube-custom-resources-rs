// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/cluster-api-provider-ibmcloud/infrastructure.cluster.x-k8s.io/v1beta1/ibmpowervsimages.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// IBMPowerVSImageSpec defines the desired state of IBMPowerVSImage.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "infrastructure.cluster.x-k8s.io", version = "v1beta1", kind = "IBMPowerVSImage", plural = "ibmpowervsimages")]
#[kube(namespaced)]
#[kube(status = "IBMPowerVSImageStatus")]
#[kube(schema = "disabled")]
pub struct IBMPowerVSImageSpec {
    /// Cloud Object Storage bucket name; bucket-name[/optional/folder]
    pub bucket: String,
    /// ClusterName is the name of the Cluster this object belongs to.
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    /// DeletePolicy defines the policy used to identify images to be preserved beyond the lifecycle of associated cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletePolicy")]
    pub delete_policy: Option<IBMPowerVSImageDeletePolicy>,
    /// Cloud Object Storage image filename.
    pub object: String,
    /// Cloud Object Storage region.
    pub region: String,
    /// ServiceInstanceID is the id of the power cloud instance where the image will get imported.
    #[serde(rename = "serviceInstanceID")]
    pub service_instance_id: String,
    /// Type of storage, storage pool with the most available space will be selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<IBMPowerVSImageStorageType>,
}

/// IBMPowerVSImageSpec defines the desired state of IBMPowerVSImage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMPowerVSImageDeletePolicy {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "retain")]
    Retain,
}

/// IBMPowerVSImageSpec defines the desired state of IBMPowerVSImage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMPowerVSImageStorageType {
    #[serde(rename = "tier1")]
    Tier1,
    #[serde(rename = "tier3")]
    Tier3,
}

/// IBMPowerVSImageStatus defines the observed state of IBMPowerVSImage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMPowerVSImageStatus {
    /// Conditions defines current service state of the IBMPowerVSImage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<IBMPowerVSImageStatusConditions>>,
    /// ImageID is the id of the imported image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageID")]
    pub image_id: Option<String>,
    /// ImageState is the status of the imported image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageState")]
    pub image_state: Option<String>,
    /// JobID is the job ID of an import operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobID")]
    pub job_id: Option<String>,
    /// Ready is true when the provider resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// Condition defines an observation of a Cluster API resource operational state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMPowerVSImageStatusConditions {
    /// Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// A human readable message indicating details about the transition. This field may be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
    #[serde(rename = "type")]
    pub r#type: String,
}

