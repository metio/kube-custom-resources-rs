// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/cluster-api-provider-ibmcloud/infrastructure.cluster.x-k8s.io/v1beta2/ibmvpcclusters.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IBMVPCClusterSpec defines the desired state of IBMVPCCluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "infrastructure.cluster.x-k8s.io", version = "v1beta2", kind = "IBMVPCCluster", plural = "ibmvpcclusters")]
#[kube(namespaced)]
#[kube(status = "IBMVPCClusterStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct IBMVPCClusterSpec {
    /// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneEndpoint")]
    pub control_plane_endpoint: Option<IBMVPCClusterControlPlaneEndpoint>,
    /// ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior.
    /// Use this for legacy support, use Network.LoadBalancers for the extended VPC support.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneLoadBalancer")]
    pub control_plane_load_balancer: Option<IBMVPCClusterControlPlaneLoadBalancer>,
    /// image represents the Image details used for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<IBMVPCClusterImage>,
    /// network represents the VPC network to use for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<IBMVPCClusterNetwork>,
    /// The IBM Cloud Region the cluster lives in.
    pub region: String,
    /// The VPC resources should be created under the resource group.
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    /// The Name of VPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<String>,
    /// The Name of availability zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneEndpoint {
    /// The hostname on which the API server is serving.
    pub host: String,
    /// The port on which the API server is serving.
    pub port: i32,
}

/// ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior.
/// Use this for legacy support, use Network.LoadBalancers for the extended VPC support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancer {
    /// AdditionalListeners sets the additional listeners for the control plane load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalListeners")]
    pub additional_listeners: Option<Vec<IBMVPCClusterControlPlaneLoadBalancerAdditionalListeners>>,
    /// backendPools defines the load balancer's backend pools.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendPools")]
    pub backend_pools: Option<Vec<IBMVPCClusterControlPlaneLoadBalancerBackendPools>>,
    /// id of the loadbalancer
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name sets the name of the VPC load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// public indicates that load balancer is public or private
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    /// securityGroups defines the Security Groups to attach to the load balancer.
    /// Security Groups defined here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<IBMVPCClusterControlPlaneLoadBalancerSecurityGroups>>,
    /// subnets defines the VPC Subnets to attach to the load balancer.
    /// Subnets defiens here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<IBMVPCClusterControlPlaneLoadBalancerSubnets>>,
}

/// AdditionalListenerSpec defines the desired state of an
/// additional listener on an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerAdditionalListeners {
    /// defaultPoolName defines the name of a VPC Load Balancer Backend Pool to use for the VPC Load Balancer Listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPoolName")]
    pub default_pool_name: Option<String>,
    /// Port sets the port for the additional listener.
    pub port: i64,
    /// protocol defines the protocol to use for the VPC Load Balancer Listener.
    /// Will default to TCP protocol if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IBMVPCClusterControlPlaneLoadBalancerAdditionalListenersProtocol>,
}

/// AdditionalListenerSpec defines the desired state of an
/// additional listener on an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterControlPlaneLoadBalancerAdditionalListenersProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerBackendPools {
    /// algorithm defines the load balancing algorithm to use.
    pub algorithm: IBMVPCClusterControlPlaneLoadBalancerBackendPoolsAlgorithm,
    /// healthMonitor defines the backend pool's health monitor.
    #[serde(rename = "healthMonitor")]
    pub health_monitor: IBMVPCClusterControlPlaneLoadBalancerBackendPoolsHealthMonitor,
    /// name defines the name of the Backend Pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// protocol defines the protocol to use for the Backend Pool.
    pub protocol: IBMVPCClusterControlPlaneLoadBalancerBackendPoolsProtocol,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterControlPlaneLoadBalancerBackendPoolsAlgorithm {
    #[serde(rename = "least_connections")]
    LeastConnections,
    #[serde(rename = "round_robin")]
    RoundRobin,
    #[serde(rename = "weighted_round_robin")]
    WeightedRoundRobin,
}

/// healthMonitor defines the backend pool's health monitor.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerBackendPoolsHealthMonitor {
    /// delay defines the seconds to wait between health checks.
    pub delay: i64,
    /// port defines the port to perform health monitoring on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// retries defines the max retries for health check.
    pub retries: i64,
    /// timeout defines the seconds to wait for a health check response.
    pub timeout: i64,
    /// type defines the protocol used for health checks.
    #[serde(rename = "type")]
    pub r#type: IBMVPCClusterControlPlaneLoadBalancerBackendPoolsHealthMonitorType,
    /// urlPath defines the URL to use for health monitoring.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlPath")]
    pub url_path: Option<String>,
}

/// healthMonitor defines the backend pool's health monitor.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterControlPlaneLoadBalancerBackendPoolsHealthMonitorType {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterControlPlaneLoadBalancerBackendPoolsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCResource represents a VPC resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerSecurityGroups {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VPCResource represents a VPC resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerSubnets {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// image represents the Image details used for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterImage {
    /// cosBucket is the name of the IBM Cloud COS Bucket containing the source of the image, if necessary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cosBucket")]
    pub cos_bucket: Option<String>,
    /// cosBucketRegion is the COS region the bucket is in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cosBucketRegion")]
    pub cos_bucket_region: Option<String>,
    /// cosInstance is the name of the IBM Cloud COS Instance containing the source of the image, if necessary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cosInstance")]
    pub cos_instance: Option<String>,
    /// cosObject is the name of a IBM Cloud COS Object used as the source of the image, if necessary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cosObject")]
    pub cos_object: Option<String>,
    /// crn is the IBM Cloud CRN of the existing VPC Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub crn: Option<String>,
    /// name is the name of the desired VPC Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// operatingSystem is the Custom Image's Operating System name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatingSystem")]
    pub operating_system: Option<String>,
    /// resourceGroup is the Resource Group to create the Custom Image in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterImageResourceGroup>,
}

/// resourceGroup is the Resource Group to create the Custom Image in.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterImageResourceGroup {
    /// id defines the IBM Cloud Resource ID.
    pub id: String,
    /// name defines the IBM Cloud Resource Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// network represents the VPC network to use for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetwork {
    /// controlPlaneSubnets is a set of Subnet's which define the Control Plane subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneSubnets")]
    pub control_plane_subnets: Option<Vec<IBMVPCClusterNetworkControlPlaneSubnets>>,
    /// loadBalancers is a set of VPC Load Balancer definitions to use for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancers")]
    pub load_balancers: Option<Vec<IBMVPCClusterNetworkLoadBalancers>>,
    /// resourceGroup is the Resource Group containing all of the newtork resources.
    /// This can be different than the Resource Group containing the remaining cluster resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterNetworkResourceGroup>,
    /// securityGroups is a set of VPCSecurityGroup's which define the VPC Security Groups that manage traffic within and out of the VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<IBMVPCClusterNetworkSecurityGroups>>,
    /// vpc defines the IBM Cloud VPC for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterNetworkVpc>,
    /// workerSubnets is a set of Subnet's which define the Worker subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerSubnets")]
    pub worker_subnets: Option<Vec<IBMVPCClusterNetworkWorkerSubnets>>,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkControlPlaneSubnets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// VPCLoadBalancerSpec defines the desired state of an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancers {
    /// AdditionalListeners sets the additional listeners for the control plane load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalListeners")]
    pub additional_listeners: Option<Vec<IBMVPCClusterNetworkLoadBalancersAdditionalListeners>>,
    /// backendPools defines the load balancer's backend pools.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendPools")]
    pub backend_pools: Option<Vec<IBMVPCClusterNetworkLoadBalancersBackendPools>>,
    /// id of the loadbalancer
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name sets the name of the VPC load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// public indicates that load balancer is public or private
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    /// securityGroups defines the Security Groups to attach to the load balancer.
    /// Security Groups defined here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<IBMVPCClusterNetworkLoadBalancersSecurityGroups>>,
    /// subnets defines the VPC Subnets to attach to the load balancer.
    /// Subnets defiens here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<IBMVPCClusterNetworkLoadBalancersSubnets>>,
}

/// AdditionalListenerSpec defines the desired state of an
/// additional listener on an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancersAdditionalListeners {
    /// defaultPoolName defines the name of a VPC Load Balancer Backend Pool to use for the VPC Load Balancer Listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPoolName")]
    pub default_pool_name: Option<String>,
    /// Port sets the port for the additional listener.
    pub port: i64,
    /// protocol defines the protocol to use for the VPC Load Balancer Listener.
    /// Will default to TCP protocol if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IBMVPCClusterNetworkLoadBalancersAdditionalListenersProtocol>,
}

/// AdditionalListenerSpec defines the desired state of an
/// additional listener on an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkLoadBalancersAdditionalListenersProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancersBackendPools {
    /// algorithm defines the load balancing algorithm to use.
    pub algorithm: IBMVPCClusterNetworkLoadBalancersBackendPoolsAlgorithm,
    /// healthMonitor defines the backend pool's health monitor.
    #[serde(rename = "healthMonitor")]
    pub health_monitor: IBMVPCClusterNetworkLoadBalancersBackendPoolsHealthMonitor,
    /// name defines the name of the Backend Pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// protocol defines the protocol to use for the Backend Pool.
    pub protocol: IBMVPCClusterNetworkLoadBalancersBackendPoolsProtocol,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkLoadBalancersBackendPoolsAlgorithm {
    #[serde(rename = "least_connections")]
    LeastConnections,
    #[serde(rename = "round_robin")]
    RoundRobin,
    #[serde(rename = "weighted_round_robin")]
    WeightedRoundRobin,
}

/// healthMonitor defines the backend pool's health monitor.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancersBackendPoolsHealthMonitor {
    /// delay defines the seconds to wait between health checks.
    pub delay: i64,
    /// port defines the port to perform health monitoring on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// retries defines the max retries for health check.
    pub retries: i64,
    /// timeout defines the seconds to wait for a health check response.
    pub timeout: i64,
    /// type defines the protocol used for health checks.
    #[serde(rename = "type")]
    pub r#type: IBMVPCClusterNetworkLoadBalancersBackendPoolsHealthMonitorType,
    /// urlPath defines the URL to use for health monitoring.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlPath")]
    pub url_path: Option<String>,
}

/// healthMonitor defines the backend pool's health monitor.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkLoadBalancersBackendPoolsHealthMonitorType {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
}

/// VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkLoadBalancersBackendPoolsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCResource represents a VPC resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancersSecurityGroups {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VPCResource represents a VPC resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkLoadBalancersSubnets {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// resourceGroup is the Resource Group containing all of the newtork resources.
/// This can be different than the Resource Group containing the remaining cluster resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkResourceGroup {
    /// id defines the IBM Cloud Resource ID.
    pub id: String,
    /// name defines the IBM Cloud Resource Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VPCSecurityGroup defines a VPC Security Group that should exist or be created within the specified VPC, with the specified Security Group Rules.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroups {
    /// id of the Security Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the Security Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// rules are the Security Group Rules for the Security Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<IBMVPCClusterNetworkSecurityGroupsRules>>,
    /// tags are tags to add to the Security Group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

/// VPCSecurityGroupRule defines a VPC Security Group Rule for a specified Security Group.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRules {
    /// action defines whether to allow or deny traffic defined by the Security Group Rule.
    pub action: IBMVPCClusterNetworkSecurityGroupsRulesAction,
    /// destination is a VPCSecurityGroupRulePrototype which defines the destination of outbound traffic for the Security Group Rule.
    /// Only used when direction is VPCSecurityGroupRuleDirectionOutbound.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<IBMVPCClusterNetworkSecurityGroupsRulesDestination>,
    /// direction defines whether the traffic is inbound or outbound for the Security Group Rule.
    pub direction: IBMVPCClusterNetworkSecurityGroupsRulesDirection,
    /// securityGroupID is the ID of the Security Group for the Security Group Rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupID")]
    pub security_group_id: Option<String>,
    /// source is a VPCSecurityGroupRulePrototype which defines the source of inbound traffic for the Security Group Rule.
    /// Only used when direction is VPCSecurityGroupRuleDirectionInbound.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<IBMVPCClusterNetworkSecurityGroupsRulesSource>,
}

/// VPCSecurityGroupRule defines a VPC Security Group Rule for a specified Security Group.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesAction {
    #[serde(rename = "allow")]
    Allow,
    #[serde(rename = "deny")]
    Deny,
}

/// destination is a VPCSecurityGroupRulePrototype which defines the destination of outbound traffic for the Security Group Rule.
/// Only used when direction is VPCSecurityGroupRuleDirectionOutbound.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesDestination {
    /// icmpCode is the ICMP code for the Rule.
    /// Only used when Protocol is VPCSecurityGroupRuleProtocolIcmp.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<i64>,
    /// icmpType is the ICMP type for the Rule.
    /// Only used when Protocol is VPCSecurityGroupRuleProtocolIcmp.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<i64>,
    /// portRange is a range of ports allowed for the Rule's remote.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<IBMVPCClusterNetworkSecurityGroupsRulesDestinationPortRange>,
    /// protocol defines the traffic protocol used for the Security Group Rule.
    pub protocol: IBMVPCClusterNetworkSecurityGroupsRulesDestinationProtocol,
    /// remotes is a set of VPCSecurityGroupRuleRemote's that define the traffic allowed by the Rule's remote.
    /// Specifying multiple VPCSecurityGroupRuleRemote's creates a unique Security Group Rule with the shared Protocol, PortRange, etc.
    /// This allows for easier management of Security Group Rule's for sets of CIDR's, IP's, etc.
    pub remotes: Vec<IBMVPCClusterNetworkSecurityGroupsRulesDestinationRemotes>,
}

/// portRange is a range of ports allowed for the Rule's remote.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesDestinationPortRange {
    /// maximumPort is the inclusive upper range of ports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumPort")]
    pub maximum_port: Option<i64>,
    /// minimumPort is the inclusive lower range of ports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumPort")]
    pub minimum_port: Option<i64>,
}

/// destination is a VPCSecurityGroupRulePrototype which defines the destination of outbound traffic for the Security Group Rule.
/// Only used when direction is VPCSecurityGroupRuleDirectionOutbound.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesDestinationProtocol {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "icmp")]
    Icmp,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.
/// The type of remote defines the additional remote details where are used for defining the remote.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesDestinationRemotes {
    ///  address is the address to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeAddress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// cidrSubnetName is the name of the VPC Subnet to retrieve the CIDR from, to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeCIDR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrSubnetName")]
    pub cidr_subnet_name: Option<String>,
    /// remoteType defines the type of filter to define for the remote's destination/source.
    #[serde(rename = "remoteType")]
    pub remote_type: IBMVPCClusterNetworkSecurityGroupsRulesDestinationRemotesRemoteType,
    /// securityGroupName is the name of the VPC Security Group to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeSG
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupName")]
    pub security_group_name: Option<String>,
}

/// VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.
/// The type of remote defines the additional remote details where are used for defining the remote.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesDestinationRemotesRemoteType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "cidr")]
    Cidr,
    #[serde(rename = "address")]
    Address,
    #[serde(rename = "sg")]
    Sg,
}

/// VPCSecurityGroupRule defines a VPC Security Group Rule for a specified Security Group.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesDirection {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

/// source is a VPCSecurityGroupRulePrototype which defines the source of inbound traffic for the Security Group Rule.
/// Only used when direction is VPCSecurityGroupRuleDirectionInbound.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesSource {
    /// icmpCode is the ICMP code for the Rule.
    /// Only used when Protocol is VPCSecurityGroupRuleProtocolIcmp.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<i64>,
    /// icmpType is the ICMP type for the Rule.
    /// Only used when Protocol is VPCSecurityGroupRuleProtocolIcmp.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<i64>,
    /// portRange is a range of ports allowed for the Rule's remote.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<IBMVPCClusterNetworkSecurityGroupsRulesSourcePortRange>,
    /// protocol defines the traffic protocol used for the Security Group Rule.
    pub protocol: IBMVPCClusterNetworkSecurityGroupsRulesSourceProtocol,
    /// remotes is a set of VPCSecurityGroupRuleRemote's that define the traffic allowed by the Rule's remote.
    /// Specifying multiple VPCSecurityGroupRuleRemote's creates a unique Security Group Rule with the shared Protocol, PortRange, etc.
    /// This allows for easier management of Security Group Rule's for sets of CIDR's, IP's, etc.
    pub remotes: Vec<IBMVPCClusterNetworkSecurityGroupsRulesSourceRemotes>,
}

/// portRange is a range of ports allowed for the Rule's remote.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesSourcePortRange {
    /// maximumPort is the inclusive upper range of ports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumPort")]
    pub maximum_port: Option<i64>,
    /// minimumPort is the inclusive lower range of ports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumPort")]
    pub minimum_port: Option<i64>,
}

/// source is a VPCSecurityGroupRulePrototype which defines the source of inbound traffic for the Security Group Rule.
/// Only used when direction is VPCSecurityGroupRuleDirectionInbound.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesSourceProtocol {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "icmp")]
    Icmp,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.
/// The type of remote defines the additional remote details where are used for defining the remote.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct IBMVPCClusterNetworkSecurityGroupsRulesSourceRemotes {
    ///  address is the address to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeAddress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// cidrSubnetName is the name of the VPC Subnet to retrieve the CIDR from, to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeCIDR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrSubnetName")]
    pub cidr_subnet_name: Option<String>,
    /// remoteType defines the type of filter to define for the remote's destination/source.
    #[serde(rename = "remoteType")]
    pub remote_type: IBMVPCClusterNetworkSecurityGroupsRulesSourceRemotesRemoteType,
    /// securityGroupName is the name of the VPC Security Group to use for the remote's destination/source.
    /// Only used when remoteType is VPCSecurityGroupRuleRemoteTypeSG
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupName")]
    pub security_group_name: Option<String>,
}

/// VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.
/// The type of remote defines the additional remote details where are used for defining the remote.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IBMVPCClusterNetworkSecurityGroupsRulesSourceRemotesRemoteType {
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "cidr")]
    Cidr,
    #[serde(rename = "address")]
    Address,
    #[serde(rename = "sg")]
    Sg,
}

/// vpc defines the IBM Cloud VPC for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkVpc {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkWorkerSubnets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// IBMVPCClusterStatus defines the observed state of IBMVPCCluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatus {
    /// Conditions defines current service state of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ControlPlaneLoadBalancerState is the status of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneLoadBalancerState")]
    pub control_plane_load_balancer_state: Option<String>,
    /// image is the status of the VPC Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<IBMVPCClusterStatusImage>,
    /// network is the status of the VPC network resources for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<IBMVPCClusterStatusNetwork>,
    /// Ready is true when the provider resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
    /// resourceGroup is the status of the cluster's Resource Group for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterStatusResourceGroup>,
    /// Subnet describes a subnet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<IBMVPCClusterStatusSubnet>,
    /// Important: Run "make" to regenerate code after modifying this file
    /// dep: rely on Network instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterStatusVpc>,
    /// VPCEndpoint describes a VPCEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcEndpoint")]
    pub vpc_endpoint: Option<IBMVPCClusterStatusVpcEndpoint>,
}

/// image is the status of the VPC Custom Image.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusImage {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// network is the status of the VPC network resources for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetwork {
    /// controlPlaneSubnets references the VPC Subnets for the cluster's Control Plane.
    /// The map simplifies lookups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneSubnets")]
    pub control_plane_subnets: Option<BTreeMap<String, IBMVPCClusterStatusNetworkControlPlaneSubnets>>,
    /// loadBalancers references the VPC Load Balancer's for the cluster.
    /// The map simplifies lookups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancers")]
    pub load_balancers: Option<BTreeMap<String, IBMVPCClusterStatusNetworkLoadBalancers>>,
    /// publicGateways references the VPC Public Gateways for the cluster.
    /// The map simplifies lookups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicGateways")]
    pub public_gateways: Option<BTreeMap<String, IBMVPCClusterStatusNetworkPublicGateways>>,
    /// resourceGroup references the Resource Group for Network resources for the cluster.
    /// This can be the same or unique from the cluster's Resource Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterStatusNetworkResourceGroup>,
    /// securityGroups references the VPC Security Groups for the cluster.
    /// The map simplifies lookups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<BTreeMap<String, IBMVPCClusterStatusNetworkSecurityGroups>>,
    /// vpc references the status of the IBM Cloud VPC as part of the extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterStatusNetworkVpc>,
    /// workerSubnets references the VPC Subnets for the cluster's Data Plane.
    /// The map simplifies lookups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerSubnets")]
    pub worker_subnets: Option<BTreeMap<String, IBMVPCClusterStatusNetworkWorkerSubnets>>,
}

/// controlPlaneSubnets references the VPC Subnets for the cluster's Control Plane.
/// The map simplifies lookups.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkControlPlaneSubnets {
    /// id defines the Id of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// loadBalancers references the VPC Load Balancer's for the cluster.
/// The map simplifies lookups.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkLoadBalancers {
    /// controllerCreated indicates whether the resource is created by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerCreated")]
    pub controller_created: Option<bool>,
    /// hostname is the hostname of load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// id of VPC load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// State is the status of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// publicGateways references the VPC Public Gateways for the cluster.
/// The map simplifies lookups.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkPublicGateways {
    /// id defines the Id of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// resourceGroup references the Resource Group for Network resources for the cluster.
/// This can be the same or unique from the cluster's Resource Group.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkResourceGroup {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// securityGroups references the VPC Security Groups for the cluster.
/// The map simplifies lookups.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkSecurityGroups {
    /// id defines the Id of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// vpc references the status of the IBM Cloud VPC as part of the extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkVpc {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// workerSubnets references the VPC Subnets for the cluster's Data Plane.
/// The map simplifies lookups.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkWorkerSubnets {
    /// id defines the Id of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// resourceGroup is the status of the cluster's Resource Group for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusResourceGroup {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusSubnet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Important: Run "make" to regenerate code after modifying this file
/// dep: rely on Network instead.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusVpc {
    pub id: String,
    pub name: String,
}

/// VPCEndpoint describes a VPCEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusVpcEndpoint {
    pub address: String,
    /// Deprecated: This field has no function and is going to be removed in the next release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "floatingIPID")]
    pub floating_ipid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIPID")]
    pub load_balancer_ipid: Option<String>,
}

