// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/cluster-api-provider-ibmcloud/infrastructure.cluster.x-k8s.io/v1beta2/ibmvpcclusters.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IBMVPCClusterSpec defines the desired state of IBMVPCCluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "infrastructure.cluster.x-k8s.io", version = "v1beta2", kind = "IBMVPCCluster", plural = "ibmvpcclusters")]
#[kube(namespaced)]
#[kube(status = "IBMVPCClusterStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct IBMVPCClusterSpec {
    /// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneEndpoint")]
    pub control_plane_endpoint: Option<IBMVPCClusterControlPlaneEndpoint>,
    /// ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneLoadBalancer")]
    pub control_plane_load_balancer: Option<IBMVPCClusterControlPlaneLoadBalancer>,
    /// network represents the VPC network to use for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<IBMVPCClusterNetwork>,
    /// The IBM Cloud Region the cluster lives in.
    pub region: String,
    /// The VPC resources should be created under the resource group.
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    /// The Name of VPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<String>,
    /// The Name of availability zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneEndpoint {
    /// The hostname on which the API server is serving.
    pub host: String,
    /// The port on which the API server is serving.
    pub port: i32,
}

/// ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancer {
    /// AdditionalListeners sets the additional listeners for the control plane load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalListeners")]
    pub additional_listeners: Option<Vec<IBMVPCClusterControlPlaneLoadBalancerAdditionalListeners>>,
    /// id of the loadbalancer
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name sets the name of the VPC load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// public indicates that load balancer is public or private
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
}

/// AdditionalListenerSpec defines the desired state of an
/// additional listener on an VPC load balancer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterControlPlaneLoadBalancerAdditionalListeners {
    /// Port sets the port for the additional listener.
    pub port: i64,
}

/// network represents the VPC network to use for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetwork {
    /// controlPlaneSubnets is a set of Subnet's which define the Control Plane subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneSubnets")]
    pub control_plane_subnets: Option<Vec<IBMVPCClusterNetworkControlPlaneSubnets>>,
    /// resourceGroup is the name of the Resource Group containing all of the newtork resources.
    /// This can be different than the Resource Group containing the remaining cluster resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<String>,
    /// vpc defines the IBM Cloud VPC for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterNetworkVpc>,
    /// workerSubnets is a set of Subnet's which define the Worker subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerSubnets")]
    pub worker_subnets: Option<Vec<IBMVPCClusterNetworkWorkerSubnets>>,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkControlPlaneSubnets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// vpc defines the IBM Cloud VPC for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkVpc {
    /// id of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// name of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterNetworkWorkerSubnets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// IBMVPCClusterStatus defines the observed state of IBMVPCCluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatus {
    /// Conditions defines current service state of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ControlPlaneLoadBalancerState is the status of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneLoadBalancerState")]
    pub control_plane_load_balancer_state: Option<String>,
    /// network is the status of the VPC network resources for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<IBMVPCClusterStatusNetwork>,
    /// Ready is true when the provider resource is ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
    /// resourceGroup is the status of the cluster's Resource Group for extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterStatusResourceGroup>,
    /// Subnet describes a subnet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<IBMVPCClusterStatusSubnet>,
    /// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
    /// Important: Run "make" to regenerate code after modifying this file
    /// dep: rely on Network instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterStatusVpc>,
    /// VPCEndpoint describes a VPCEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcEndpoint")]
    pub vpc_endpoint: Option<IBMVPCClusterStatusVpcEndpoint>,
}

/// network is the status of the VPC network resources for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetwork {
    /// resourceGroup references the Resource Group for Network resources for the cluster.
    /// This can be the same or unique from the cluster's Resource Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<IBMVPCClusterStatusNetworkResourceGroup>,
    /// vpc references the status of the IBM Cloud VPC as part of the extended VPC Infrastructure support.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<IBMVPCClusterStatusNetworkVpc>,
}

/// resourceGroup references the Resource Group for Network resources for the cluster.
/// This can be the same or unique from the cluster's Resource Group.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkResourceGroup {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// vpc references the status of the IBM Cloud VPC as part of the extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusNetworkVpc {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// resourceGroup is the status of the cluster's Resource Group for extended VPC Infrastructure support.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusResourceGroup {
    /// id defines the Id of the IBM Cloud resource status.
    pub id: String,
    /// name defines the name of the IBM Cloud resource status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// ready defines whether the IBM Cloud resource is ready.
    pub ready: bool,
}

/// Subnet describes a subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusSubnet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
/// Important: Run "make" to regenerate code after modifying this file
/// dep: rely on Network instead.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusVpc {
    pub id: String,
    pub name: String,
}

/// VPCEndpoint describes a VPCEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IBMVPCClusterStatusVpcEndpoint {
    pub address: String,
    /// Deprecated: This field has no function and is going to be removed in the next release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "floatingIPID")]
    pub floating_ipid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIPID")]
    pub load_balancer_ipid: Option<String>,
}

