// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/cluster-api-provider-kubevirt/infrastructure.cluster.x-k8s.io/v1alpha1/kubevirtmachines.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// KubevirtMachineSpec defines the desired state of KubevirtMachine.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "infrastructure.cluster.x-k8s.io", version = "v1alpha1", kind = "KubevirtMachine", plural = "kubevirtmachines")]
#[kube(namespaced)]
#[kube(status = "KubevirtMachineStatus")]
#[kube(schema = "disabled")]
pub struct KubevirtMachineSpec {
    /// InfraClusterSecretRef is a reference to a secret with a kubeconfig for external cluster used for infra. When nil, this defaults to the value present in the KubevirtCluster object's spec associated with this machine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infraClusterSecretRef")]
    pub infra_cluster_secret_ref: Option<KubevirtMachineInfraClusterSecretRef>,
    /// ProviderID TBD what to use for Kubevirt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerID")]
    pub provider_id: Option<String>,
    /// BootstrapCheckSpec defines how the CAPK controller is checking CAPI Sentinel file inside the VM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineBootstrapCheck")]
    pub virtual_machine_bootstrap_check: Option<KubevirtMachineVirtualMachineBootstrapCheck>,
    /// VirtualMachineTemplateSpec defines the desired state of the kubevirt VM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineTemplate")]
    pub virtual_machine_template: Option<KubevirtMachineVirtualMachineTemplate>,
}

/// InfraClusterSecretRef is a reference to a secret with a kubeconfig for external cluster used for infra. When nil, this defaults to the value present in the KubevirtCluster object's spec associated with this machine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineInfraClusterSecretRef {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// BootstrapCheckSpec defines how the CAPK controller is checking CAPI Sentinel file inside the VM.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineBootstrapCheck {
    /// CheckStrategy describes how CAPK controller will validate a successful CAPI bootstrap. Following specified method, CAPK will try to retrieve the state of the CAPI Sentinel file from the VM. Possible values are: "none" or "ssh" (default is "ssh") and this value is validated by apiserver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkStrategy")]
    pub check_strategy: Option<KubevirtMachineVirtualMachineBootstrapCheckCheckStrategy>,
}

/// BootstrapCheckSpec defines how the CAPK controller is checking CAPI Sentinel file inside the VM.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KubevirtMachineVirtualMachineBootstrapCheckCheckStrategy {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "ssh")]
    Ssh,
}

/// VirtualMachineTemplateSpec defines the desired state of the kubevirt VM.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    /// VirtualMachineSpec contains the VirtualMachine specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<KubevirtMachineVirtualMachineTemplateSpec>,
}

/// VirtualMachineSpec contains the VirtualMachine specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpec {
    /// dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataVolumeTemplates")]
    pub data_volume_templates: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplates>>,
    /// InstancetypeMatcher references a instancetype that is used to fill fields in Template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instancetype: Option<KubevirtMachineVirtualMachineTemplateSpecInstancetype>,
    /// LiveUpdateFeatures references a configuration of hotpluggable resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "liveUpdateFeatures")]
    pub live_update_features: Option<KubevirtMachineVirtualMachineTemplateSpecLiveUpdateFeatures>,
    /// PreferenceMatcher references a set of preference that is used to fill fields in Template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<KubevirtMachineVirtualMachineTemplateSpecPreference>,
    /// Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runStrategy")]
    pub run_strategy: Option<String>,
    /// Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
    /// Template is the direct specification of VirtualMachineInstance
    pub template: KubevirtMachineVirtualMachineTemplateSpecTemplate,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplates {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    /// DataVolumeSpec contains the DataVolume specification.
    pub spec: KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpec,
    /// DataVolumeTemplateDummyStatus is here simply for backwards compatibility with a previous API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesStatus>,
}

/// DataVolumeSpec contains the DataVolume specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpec {
    /// Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checkpoints: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecCheckpoints>>,
    /// DataVolumeContentType options: "kubevirt", "archive"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecContentType>,
    /// FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalCheckpoint")]
    pub final_checkpoint: Option<bool>,
    /// Preallocation controls whether storage for DataVolumes should be allocated in advance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preallocation: Option<bool>,
    /// PriorityClassName for Importer, Cloner and Uploader pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// PVC is the PVC specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvc>,
    /// Source is the src of the data for the requested DataVolume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSource>,
    /// SourceRef is an indirect reference to the source of data for the requested DataVolume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRef")]
    pub source_ref: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceRef>,
    /// Storage is the requested storage specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorage>,
}

/// DataVolumeCheckpoint defines a stage in a warm migration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecCheckpoints {
    /// Current is the identifier of the snapshot created for this checkpoint.
    pub current: String,
    /// Previous is the identifier of the snapshot from the previous checkpoint.
    pub previous: String,
}

/// DataVolumeSpec contains the DataVolume specification.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecContentType {
    #[serde(rename = "kubevirt")]
    Kubevirt,
    #[serde(rename = "archive")]
    Archive,
}

/// PVC is the PVC specification
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvc {
    /// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcDataSource>,
    /// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcDataSourceRef>,
    /// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcResources>,
    /// selector is a label query over volumes to consider for binding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcSelector>,
    /// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    /// volumeName is the binding reference to the PersistentVolume backing this claim.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcDataSource {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcDataSourceRef {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
    /// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// selector is a label query over volumes to consider for binding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecPvcSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Source is the src of the data for the requested DataVolume
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSource {
    /// DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blank: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceBlank>,
    /// DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceGcs>,
    /// DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceHttp>,
    /// DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub imageio: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceImageio>,
    /// DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourcePvc>,
    /// DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceRegistry>,
    /// DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceS3>,
    /// DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceSnapshot>,
    /// DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceUpload>,
    /// DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vddk: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceVddk>,
}

/// DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceBlank {
}

/// DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceGcs {
    /// SecretRef provides the secret reference needed to access the GCS source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// URL is the url of the GCS source
    pub url: String,
}

/// DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceHttp {
    /// CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    /// ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraHeaders")]
    pub extra_headers: Option<Vec<String>>,
    /// SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretExtraHeaders")]
    pub secret_extra_headers: Option<Vec<String>>,
    /// SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// URL is the URL of the http(s) endpoint
    pub url: String,
}

/// DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceImageio {
    /// CertConfigMap provides a reference to the CA cert
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    /// DiskID provides id of a disk to be imported
    #[serde(rename = "diskId")]
    pub disk_id: String,
    /// SecretRef provides the secret reference needed to access the ovirt-engine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// URL is the URL of the ovirt-engine
    pub url: String,
}

/// DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourcePvc {
    /// The name of the source PVC
    pub name: String,
    /// The namespace of the source PVC
    pub namespace: String,
}

/// DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceRegistry {
    /// CertConfigMap provides a reference to the Registry certs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    /// ImageStream is the name of image stream for import
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageStream")]
    pub image_stream: Option<String>,
    /// PullMethod can be either "pod" (default import), or "node" (node docker cache based import)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullMethod")]
    pub pull_method: Option<String>,
    /// SecretRef provides the secret reference needed to access the Registry source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// URL is the url of the registry source (starting with the scheme: docker, oci-archive)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceS3 {
    /// CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    /// SecretRef provides the secret reference needed to access the S3 source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// URL is the url of the S3 source
    pub url: String,
}

/// DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceSnapshot {
    /// The name of the source VolumeSnapshot
    pub name: String,
    /// The namespace of the source VolumeSnapshot
    pub namespace: String,
}

/// DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceUpload {
}

/// DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceVddk {
    /// BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backingFile")]
    pub backing_file: Option<String>,
    /// InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initImageURL")]
    pub init_image_url: Option<String>,
    /// SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    /// Thumbprint is the certificate thumbprint of the vCenter or ESXi host
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thumbprint: Option<String>,
    /// URL is the URL of the vCenter or ESXi host with the VM to migrate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// SourceRef is an indirect reference to the source of data for the requested DataVolume
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecSourceRef {
    /// The kind of the source reference, currently only "DataSource" is supported
    pub kind: String,
    /// The name of the source reference
    pub name: String,
    /// The namespace of the source reference, defaults to the DataVolume namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Storage is the requested storage specification
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorage {
    /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageDataSource>,
    /// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageDataSourceRef>,
    /// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageResources>,
    /// A label query over volumes to consider for binding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageSelector>,
    /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    /// VolumeName is the binding reference to the PersistentVolume backing this claim.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageDataSource {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageDataSourceRef {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
    /// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// A label query over volumes to consider for binding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesSpecStorageSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// DataVolumeTemplateDummyStatus is here simply for backwards compatibility with a previous API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecDataVolumeTemplatesStatus {
}

/// InstancetypeMatcher references a instancetype that is used to fill fields in Template
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecInstancetype {
    /// InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferFromVolume")]
    pub infer_from_volume: Option<String>,
    /// Kind specifies which instancetype resource is referenced. Allowed values are: "VirtualMachineInstancetype" and "VirtualMachineClusterInstancetype". If not specified, "VirtualMachineClusterInstancetype" is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    pub revision_name: Option<String>,
}

/// LiveUpdateFeatures references a configuration of hotpluggable resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecLiveUpdateFeatures {
    /// LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<KubevirtMachineVirtualMachineTemplateSpecLiveUpdateFeaturesCpu>,
}

/// LiveUpdateCPU holds hotplug configuration for the CPU resource. Empty struct indicates that default will be used for maxSockets. Default is specified on cluster level. Absence of the struct means opt-out from CPU hotplug functionality.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecLiveUpdateFeaturesCpu {
    /// The maximum amount of sockets that can be hot-plugged to the Virtual Machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSockets")]
    pub max_sockets: Option<i32>,
}

/// PreferenceMatcher references a set of preference that is used to fill fields in Template
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecPreference {
    /// InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferFromVolume")]
    pub infer_from_volume: Option<String>,
    /// Kind specifies which preference resource is referenced. Allowed values are: "VirtualMachinePreference" and "VirtualMachineClusterPreference". If not specified, "VirtualMachineClusterPreference" is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    pub revision_name: Option<String>,
}

/// Template is the direct specification of VirtualMachineInstance
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    /// VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpec>,
}

/// VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpec {
    /// Specifies a set of public keys to inject into the vm guest
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessCredentials")]
    pub access_credentials: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentials>>,
    /// If affinity is specifies, obey all the affinity rules
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinity>,
    /// Specifies the architecture of the vm guest you are attempting to run. Defaults to the compiled architecture of the KubeVirt components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDnsConfig>,
    /// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// Specification of the desired behavior of the VirtualMachineInstance on the host.
    pub domain: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomain,
    /// EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evictionStrategy")]
    pub eviction_strategy: Option<String>,
    /// Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbe>,
    /// List of networks that can be attached to a vm's virtual interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworks>>,
    /// NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbe>,
    /// If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// StartStrategy can be set to "Paused" if Virtual Machine should be started in paused state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startStrategy")]
    pub start_strategy: Option<String>,
    /// If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subdomain: Option<String>,
    /// Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// If toleration is specified, obey all the toleration rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTolerations>>,
    /// TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraints>>,
    /// List of volumes that can be mounted by disks belonging to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumes>>,
}

/// AccessCredential represents a credential source that can be used to authorize remote access to the vm guest Only one of its members may be specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentials {
    /// SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshPublicKey")]
    pub ssh_public_key: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKey>,
    /// UserPassword represents the source and method for applying a guest user's password
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPassword")]
    pub user_password: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPassword>,
}

/// SSHPublicKey represents the source and method of applying a ssh public key into a guest virtual machine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKey {
    /// PropagationMethod represents how the public key is injected into the vm guest.
    #[serde(rename = "propagationMethod")]
    pub propagation_method: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod,
    /// Source represents where the public keys are pulled from
    pub source: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeySource,
}

/// PropagationMethod represents how the public key is injected into the vm guest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod {
    /// ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configDrive")]
    pub config_drive: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodConfigDrive>,
    /// QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qemuGuestAgent")]
    pub qemu_guest_agent: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>,
}

/// ConfigDrivePropagation means that the ssh public keys are injected into the VM using metadata using the configDrive cloud-init provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodConfigDrive {
}

/// QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
    /// Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file.
    pub users: Vec<String>,
}

/// Source represents where the public keys are pulled from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeySource {
    /// Secret means that the access credential is pulled from a kubernetes secret
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret>,
}

/// Secret means that the access credential is pulled from a kubernetes secret
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsSshPublicKeySourceSecret {
    /// SecretName represents the name of the secret in the VMI's namespace
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// UserPassword represents the source and method for applying a guest user's password
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPassword {
    /// propagationMethod represents how the user passwords are injected into the vm guest.
    #[serde(rename = "propagationMethod")]
    pub propagation_method: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod,
    /// Source represents where the user passwords are pulled from
    pub source: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordSource,
}

/// propagationMethod represents how the user passwords are injected into the vm guest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethod {
    /// QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qemuGuestAgent")]
    pub qemu_guest_agent: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodQemuGuestAgent>,
}

/// QemuGuestAgentAccessCredentailPropagation means passwords are dynamically injected into the vm at runtime via the qemu guest agent. This feature requires the qemu guest agent to be running within the guest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordPropagationMethodQemuGuestAgent {
}

/// Source represents where the user passwords are pulled from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordSource {
    /// Secret means that the access credential is pulled from a kubernetes secret
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret>,
}

/// Secret means that the access credential is pulled from a kubernetes secret
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAccessCredentialsUserPasswordSourceSecret {
    /// SecretName represents the name of the secret in the VMI's namespace
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// If affinity is specifies, obey all the affinity rules
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinity {
    /// Describes node affinity scheduling rules for the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinity>,
    /// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinity>,
    /// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinity>,
}

/// Describes node affinity scheduling rules for the pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// A node selector term, associated with the corresponding weight.
    pub preference: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    /// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    pub weight: i32,
}

/// A node selector term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /// A list of node selector requirements by node's labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    /// A list of node selector requirements by node's fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Required. A list of node selector terms. The terms are ORed.
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    /// A list of node selector requirements by node's labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    /// A list of node selector requirements by node's fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    /// The label key that the selector applies to.
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Required. A pod affinity term, associated with the corresponding weight.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    pub weight: i32,
}

/// Required. A pod affinity term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinity {
    /// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Required. A pod affinity term, associated with the corresponding weight.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    pub weight: i32,
}

/// Required. A pod affinity term, associated with the corresponding weight.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// A label query over a set of resources, in this case pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    /// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// A label query over a set of resources, in this case pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDnsConfig {
    /// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDnsConfigOptions {
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Specification of the desired behavior of the VirtualMachineInstance on the host.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomain {
    /// Chassis specifies the chassis info passed to the domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chassis: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainChassis>,
    /// Clock sets the clock and timers of the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clock: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClock>,
    /// CPU allow specified the detailed CPU topology inside the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpu>,
    /// Devices allows adding disks, network interfaces, and others
    pub devices: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevices,
    /// Features like acpi, apic, hyperv, smm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeatures>,
    /// Firmware.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub firmware: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmware>,
    /// Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioThreadsPolicy")]
    pub io_threads_policy: Option<String>,
    /// Launch Security setting of the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchSecurity")]
    pub launch_security: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecurity>,
    /// Machine type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machine: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMachine>,
    /// Memory allow specifying the VMI memory features.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMemory>,
    /// Resources describes the Compute Resources required by this vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainResources>,
}

/// Chassis specifies the chassis info passed to the domain.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainChassis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Clock sets the clock and timers of the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClock {
    /// Timer specifies whih timers are attached to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timer: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimer>,
    /// Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York').
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockUtc>,
}

/// Timer specifies whih timers are attached to the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimer {
    /// HPET (High Precision Event Timer) - multiple timers with periodic interrupts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hpet: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerHpet>,
    /// Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hyperv: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerHyperv>,
    /// KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kvm: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerKvm>,
    /// PIT (Programmable Interval Timer) - a timer with periodic interrupts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pit: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerPit>,
    /// RTC (Real Time Clock) - a continuously running timer with periodic interrupts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rtc: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerRtc>,
}

/// HPET (High Precision Event Timer) - multiple timers with periodic interrupts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerHpet {
    /// Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    /// TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "merge", "discard".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
}

/// Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerHyperv {
    /// Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
}

/// KVM 	(KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerKvm {
    /// Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
}

/// PIT (Programmable Interval Timer) - a timer with periodic interrupts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerPit {
    /// Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    /// TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup", "discard".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
}

/// RTC (Real Time Clock) - a continuously running timer with periodic interrupts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockTimerRtc {
    /// Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    /// TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of "delay", "catchup".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
    /// Track the guest or the wall clock.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub track: Option<String>,
}

/// UTC sets the guest clock to UTC on each boot. If an offset is specified, guest changes to the clock will be kept during reboots and are not reset.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainClockUtc {
    /// OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offsetSeconds")]
    pub offset_seconds: Option<i64>,
}

/// CPU allow specified the detailed CPU topology inside the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpu {
    /// Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cores: Option<i32>,
    /// DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedCpuPlacement")]
    pub dedicated_cpu_placement: Option<bool>,
    /// Features specifies the CPU features list inside the VMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuFeatures>>,
    /// IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isolateEmulatorThread")]
    pub isolate_emulator_thread: Option<bool>,
    /// MaxSockets specifies the maximum amount of sockets that can be hotplugged
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSockets")]
    pub max_sockets: Option<i32>,
    /// Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// NUMA allows specifying settings for the guest NUMA topology
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numa: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuNuma>,
    /// Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realtime: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuRealtime>,
    /// Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sockets: Option<i32>,
    /// Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threads: Option<i32>,
}

/// CPUFeature allows specifying a CPU feature.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuFeatures {
    /// Name of the CPU feature
    pub name: String,
    /// Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
}

/// NUMA allows specifying settings for the guest NUMA topology
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuNuma {
    /// GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestMappingPassthrough")]
    pub guest_mapping_passthrough: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuNumaGuestMappingPassthrough>,
}

/// GuestMappingPassthrough will create an efficient guest topology based on host CPUs exclusively assigned to a pod. The created topology ensures that memory and CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuNumaGuestMappingPassthrough {
}

/// Realtime instructs the virt-launcher to tune the VMI for lower latency, optional for real time workloads
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainCpuRealtime {
    /// Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: "0-3,^1","0,2,3","2-3"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mask: Option<String>,
}

/// Devices allows adding disks, network interfaces, and others
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevices {
    /// Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachGraphicsDevice")]
    pub autoattach_graphics_device: Option<bool>,
    /// Whether to attach an Input Device. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachInputDevice")]
    pub autoattach_input_device: Option<bool>,
    /// Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachMemBalloon")]
    pub autoattach_mem_balloon: Option<bool>,
    /// Whether to attach a pod network interface. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachPodInterface")]
    pub autoattach_pod_interface: Option<bool>,
    /// Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachSerialConsole")]
    pub autoattach_serial_console: Option<bool>,
    /// Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachVSOCK")]
    pub autoattach_vsock: Option<bool>,
    /// Whether or not to enable virtio multi-queue for block devices. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockMultiQueue")]
    pub block_multi_queue: Option<bool>,
    /// To configure and access client devices such as redirecting USB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPassthrough")]
    pub client_passthrough: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesClientPassthrough>,
    /// DisableHotplug disabled the ability to hotplug disks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHotplug")]
    pub disable_hotplug: Option<bool>,
    /// Disks describes disks, cdroms and luns which are connected to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disks: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisks>>,
    /// Filesystems describes filesystem which is connected to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filesystems: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesFilesystems>>,
    /// Whether to attach a GPU device to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gpus: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpus>>,
    /// Whether to attach a host device to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostDevices")]
    pub host_devices: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesHostDevices>>,
    /// Inputs describe input devices
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInputs>>,
    /// Interfaces describe network interfaces which are added to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfaces>>,
    /// If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceMultiqueue")]
    pub network_interface_multiqueue: Option<bool>,
    /// Whether to have random number generator from host
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rng: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesRng>,
    /// Whether to emulate a sound device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sound: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesSound>,
    /// Whether to emulate a TPM device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tpm: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesTpm>,
    /// Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useVirtioTransitional")]
    pub use_virtio_transitional: Option<bool>,
    /// Watchdog describes a watchdog device which can be added to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watchdog: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesWatchdog>,
}

/// To configure and access client devices such as redirecting USB
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesClientPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisks {
    /// If specified, the virtual disk will be presented with the given block sizes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSize")]
    pub block_size: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSize>,
    /// BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOrder")]
    pub boot_order: Option<i64>,
    /// Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Attach a volume as a cdrom to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cdrom: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksCdrom>,
    /// dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedIOThread")]
    pub dedicated_io_thread: Option<bool>,
    /// Attach a volume as a disk to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksDisk>,
    /// IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub io: Option<String>,
    /// Attach a volume as a LUN to the vmi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksLun>,
    /// Name is the device name
    pub name: String,
    /// Serial provides the ability to specify a serial number for the disk device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// If specified the disk is made sharable and multiple write from different VMs are permitted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shareable: Option<bool>,
    /// If specified, disk address and its tag will be provided to the guest via config drive metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// If specified, the virtual disk will be presented with the given block sizes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSize {
    /// CustomBlockSize represents the desired logical and physical block size for a VM disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSizeCustom>,
    /// Represents if a feature is enabled or disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchVolume")]
    pub match_volume: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume>,
}

/// CustomBlockSize represents the desired logical and physical block size for a VM disk.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSizeCustom {
    pub logical: i64,
    pub physical: i64,
}

/// Represents if a feature is enabled or disabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksBlockSizeMatchVolume {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Attach a volume as a cdrom to the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksCdrom {
    /// Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    /// ReadOnly. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    /// Tray indicates if the tray of the device is open or closed. Allowed values are "open" and "closed". Defaults to closed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tray: Option<String>,
}

/// Attach a volume as a disk to the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksDisk {
    /// Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    /// If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pciAddress")]
    pub pci_address: Option<String>,
    /// ReadOnly. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
}

/// Attach a volume as a LUN to the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesDisksLun {
    /// Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    /// ReadOnly. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    /// Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reservation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesFilesystems {
    /// Name is the device name
    pub name: String,
    /// Virtiofs is supported
    pub virtiofs: KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesFilesystemsVirtiofs,
}

/// Virtiofs is supported
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesFilesystemsVirtiofs {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpus {
    #[serde(rename = "deviceName")]
    pub device_name: String,
    /// Name of the GPU device as exposed by a device plugin
    pub name: String,
    /// If specified, the virtual network interface address and its tag will be provided to the guest via config drive
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGPUOptions")]
    pub virtual_gpu_options: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplay>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplay {
    /// Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramFB")]
    pub ram_fb: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplayRamFb>,
}

/// Enables a boot framebuffer, until the guest OS loads a real GPU driver Defaults to true.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplayRamFb {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesHostDevices {
    /// DeviceName is the resource name of the host device exposed by a device plugin
    #[serde(rename = "deviceName")]
    pub device_name: String,
    pub name: String,
    /// If specified, the virtual network interface address and its tag will be provided to the guest via config drive
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInputs {
    /// Bus indicates the bus of input device to emulate. Supported values: virtio, usb.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    /// Name is the device name
    pub name: String,
    /// Type indicated the type of input device. Supported values: tablet.
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfaces {
    /// If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acpiIndex")]
    pub acpi_index: Option<i64>,
    /// BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOrder")]
    pub boot_order: Option<i64>,
    /// InterfaceBridge connects to a given network via a linux bridge.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bridge: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesBridge>,
    /// If specified the network interface will pass additional DHCP options to the VMI
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dhcpOptions")]
    pub dhcp_options: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesDhcpOptions>,
    /// Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "macAddress")]
    pub mac_address: Option<String>,
    /// InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub macvtap: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesMacvtap>,
    /// InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub masquerade: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesMasquerade>,
    /// Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. TODO:(ihar) switch to enums once opengen-api supports them. See: https://github.com/kubernetes/kube-openapi/issues/51
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.
    pub name: String,
    /// InterfacePasst connects to a given network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passt: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesPasst>,
    /// If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pciAddress")]
    pub pci_address: Option<String>,
    /// List of ports to be forwarded to the virtual machine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesPorts>>,
    /// InterfaceSlirp connects to a given network using QEMU user networking mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slirp: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesSlirp>,
    /// InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sriov: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesSriov>,
    /// State represents the requested operational state of the interface. The (only) value supported is `absent`, expressing a request to remove the interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// If specified, the virtual network interface address and its tag will be provided to the guest via config drive
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// InterfaceBridge connects to a given network via a linux bridge.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesBridge {
}

/// If specified the network interface will pass additional DHCP options to the VMI
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesDhcpOptions {
    /// If specified will pass option 67 to interface's DHCP server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootFileName")]
    pub boot_file_name: Option<String>,
    /// If specified will pass the configured NTP server to the VM via DHCP option 042.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntpServers")]
    pub ntp_servers: Option<Vec<String>>,
    /// If specified will pass extra DHCP options for private use, range: 224-254
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateOptions")]
    pub private_options: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>>,
    /// If specified will pass option 66 to interface's DHCP server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tftpServerName")]
    pub tftp_server_name: Option<String>,
}

/// DHCPExtraOptions defines Extra DHCP options for a VM.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
    /// Option is an Integer value from 224-254 Required.
    pub option: i64,
    /// Value is a String value for the Option provided Required.
    pub value: String,
}

/// InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesMacvtap {
}

/// InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesMasquerade {
}

/// InterfacePasst connects to a given network.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesPasst {
}

/// Port represents a port to expose from the virtual machine. Default protocol TCP. The port field is mandatory
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesPorts {
    /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.
    pub port: i32,
    /// Protocol for port. Must be UDP or TCP. Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// InterfaceSlirp connects to a given network using QEMU user networking mode.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesSlirp {
}

/// InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesInterfacesSriov {
}

/// Whether to have random number generator from host
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesRng {
}

/// Whether to emulate a sound device.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesSound {
    /// We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// User's defined name for this sound device
    pub name: String,
}

/// Whether to emulate a TPM device.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesTpm {
    /// Persistent indicates the state of the TPM device should be kept accross reboots Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persistent: Option<bool>,
}

/// Watchdog describes a watchdog device which can be added to the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesWatchdog {
    /// i6300esb watchdog device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub i6300esb: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesWatchdogI6300esb>,
    /// Name of the watchdog.
    pub name: String,
}

/// i6300esb watchdog device.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainDevicesWatchdogI6300esb {
    /// The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
}

/// Features like acpi, apic, hyperv, smm.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeatures {
    /// ACPI enables/disables ACPI inside the guest. Defaults to enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acpi: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesAcpi>,
    /// Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apic: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesApic>,
    /// Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hyperv: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHyperv>,
    /// Configure how KVM presence is exposed to the guest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kvm: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesKvm>,
    /// Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvspinlock: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesPvspinlock>,
    /// SMM enables/disables System Management Mode. TSEG not yet implemented.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub smm: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesSmm>,
}

/// ACPI enables/disables ACPI inside the guest. Defaults to enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesAcpi {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesApic {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endOfInterrupt")]
    pub end_of_interrupt: Option<bool>,
}

/// Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHyperv {
    /// EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evmcs: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervEvmcs>,
    /// Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub frequencies: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervFrequencies>,
    /// IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipi: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervIpi>,
    /// Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reenlightenment: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervReenlightenment>,
    /// Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relaxed: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervRelaxed>,
    /// Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reset: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervReset>,
    /// Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervRuntime>,
    /// Spinlocks allows to configure the spinlock retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spinlocks: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSpinlocks>,
    /// SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub synic: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynic>,
    /// SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub synictimer: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynictimer>,
    /// TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlbflush: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervTlbflush>,
    /// VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vapic: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVapic>,
    /// VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendorid: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVendorid>,
    /// VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpindex: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVpindex>,
}

/// EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires vapic. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervEvmcs {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervFrequencies {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// IPI improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervIpi {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Reenlightenment enables the notifications on TSC frequency changes. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervReenlightenment {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervRelaxed {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervReset {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Runtime improves the time accounting to improve scheduling in the guest. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervRuntime {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Spinlocks allows to configure the spinlock retry attempts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSpinlocks {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spinlocks: Option<i32>,
}

/// SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynic {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynictimer {
    /// Represents if a feature is enabled or disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direct: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynictimerDirect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Represents if a feature is enabled or disabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervSynictimerDirect {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// TLBFlush improves performances in overcommited environments. Requires vpindex. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervTlbflush {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// VAPIC improves the paravirtualized handling of interrupts. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVapic {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// VendorID allows setting the hypervisor vendor id. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVendorid {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendorid: Option<String>,
}

/// VPIndex enables the Virtual Processor Index to help windows identifying virtual processors. Defaults to the machine type setting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesHypervVpindex {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Configure how KVM presence is exposed to the guest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesKvm {
    /// Hide the KVM hypervisor from standard MSR based discovery. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
}

/// Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesPvspinlock {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// SMM enables/disables System Management Mode. TSEG not yet implemented.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFeaturesSmm {
    /// Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Firmware.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmware {
    /// Settings to control the bootloader that is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bootloader: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloader>,
    /// Settings to set the kernel for booting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelBoot")]
    pub kernel_boot: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareKernelBoot>,
    /// The system-serial-number in SMBIOS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// UUID reported by the vmi bios. Defaults to a random generated uid.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// Settings to control the bootloader that is used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloader {
    /// If set (default), BIOS will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bios: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloaderBios>,
    /// If set, EFI will be used instead of BIOS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub efi: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloaderEfi>,
}

/// If set (default), BIOS will be used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloaderBios {
    /// If set, the BIOS output will be transmitted over serial
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSerial")]
    pub use_serial: Option<bool>,
}

/// If set, EFI will be used instead of BIOS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareBootloaderEfi {
    /// If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secureBoot")]
    pub secure_boot: Option<bool>,
}

/// Settings to set the kernel for booting.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareKernelBoot {
    /// Container defines the container that containes kernel artifacts
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareKernelBootContainer>,
    /// Arguments to be passed to the kernel at boot time
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelArgs")]
    pub kernel_args: Option<String>,
}

/// Container defines the container that containes kernel artifacts
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainFirmwareKernelBootContainer {
    /// Image that contains initrd / kernel files.
    pub image: String,
    /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<String>,
    /// the fully-qualified path to the ramdisk image in the host OS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initrdPath")]
    pub initrd_path: Option<String>,
    /// The fully-qualified path to the kernel image in the host OS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelPath")]
    pub kernel_path: Option<String>,
}

/// Launch Security setting of the vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecurity {
    /// AMD Secure Encrypted Virtualization (SEV).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sev: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecuritySev>,
}

/// AMD Secure Encrypted Virtualization (SEV).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecuritySev {
    /// Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecuritySevPolicy>,
}

/// Guest policy flags as defined in AMD SEV API specification. Note: due to security reasons it is not allowed to enable guest debugging. Therefore NoDebug flag is not exposed to users and is always true.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainLaunchSecuritySevPolicy {
    /// SEV-ES is required. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptedState")]
    pub encrypted_state: Option<bool>,
}

/// Machine type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMachine {
    /// QEMU machine type is the actual chipset of the VirtualMachineInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Memory allow specifying the VMI memory features.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMemory {
    /// Guest allows to specifying the amount of memory which is visible inside the Guest OS. The Guest must lie between Requests and Limits from the resources section. Defaults to the requested memory in the resources section if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub guest: Option<IntOrString>,
    /// Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hugepages: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMemoryHugepages>,
}

/// Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainMemoryHugepages {
    /// PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageSize")]
    pub page_size: Option<String>,
}

/// Resources describes the Compute Resources required by this vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecDomainResources {
    /// Limits describes the maximum amount of compute resources allowed. Valid resource keys are "memory" and "cpu".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overcommitGuestOverhead")]
    pub overcommit_guest_overhead: Option<bool>,
    /// Requests is a description of the initial vmi resources. Valid resource keys are "memory" and "cpu".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbe {
    /// One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GuestAgentPing contacts the qemu-guest-agent for availability checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAgentPing")]
    pub guest_agent_ping: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeGuestAgentPing>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeHttpGet>,
    /// Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeTcpSocket>,
    /// Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GuestAgentPing contacts the qemu-guest-agent for availability checks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeGuestAgentPing {
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecLivenessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// Network represents a network type and a resource that should be connected to the vm.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworks {
    /// Represents the multus cni network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multus: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworksMultus>,
    /// Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    pub name: String,
    /// Represents the stock pod network interface.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworksPod>,
}

/// Represents the multus cni network.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworksMultus {
    /// Select the default network and add it to the multus-cni.io/default-network annotation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    /// References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed.
    #[serde(rename = "networkName")]
    pub network_name: String,
}

/// Represents the stock pod network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecNetworksPod {
    /// IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmIPv6NetworkCIDR")]
    pub vm_i_pv6_network_cidr: Option<String>,
    /// CIDR for vm network. Default 10.0.2.0/24 if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmNetworkCIDR")]
    pub vm_network_cidr: Option<String>,
}

/// Periodic probe of VirtualMachineInstance service readiness. VirtualmachineInstances will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbe {
    /// One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GuestAgentPing contacts the qemu-guest-agent for availability checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAgentPing")]
    pub guest_agent_ping: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeGuestAgentPing>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeHttpGet>,
    /// Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeTcpSocket>,
    /// Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// One and only one of the following should be specified. Exec specifies the action to take, it will be executed on the guest through the qemu-guest-agent. If the guest agent is not available, this probe will fail.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GuestAgentPing contacts the qemu-guest-agent for availability checks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeGuestAgentPing {
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecReadinessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraints {
    /// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraintsLabelSelector>,
    /// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
    ///  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    /// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
    #[serde(rename = "maxSkew")]
    pub max_skew: i32,
    /// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
    ///  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
    ///  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i32>,
    /// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
    ///  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityPolicy")]
    pub node_affinity_policy: Option<String>,
    /// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
    ///  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    /// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
    /// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    #[serde(rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: String,
}

/// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Volume represents a named volume in a vmi.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumes {
    /// CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudInitConfigDrive")]
    pub cloud_init_config_drive: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDrive>,
    /// CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudInitNoCloud")]
    pub cloud_init_no_cloud: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloud>,
    /// ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesConfigMap>,
    /// ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerDisk")]
    pub container_disk: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesContainerDisk>,
    /// DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataVolume")]
    pub data_volume: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDataVolume>,
    /// DownwardAPI represents downward API about the pod that should populate this volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApi>,
    /// DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardMetrics")]
    pub downward_metrics: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardMetrics>,
    /// EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDisk")]
    pub empty_disk: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEmptyDisk>,
    /// Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEphemeral>,
    /// HostDisk represents a disk created on the cluster level
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostDisk")]
    pub host_disk: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesHostDisk>,
    /// MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryDump")]
    pub memory_dump: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesMemoryDump>,
    /// Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    pub name: String,
    /// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesPersistentVolumeClaim>,
    /// SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSecret>,
    /// ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesServiceAccount>,
    /// Represents a Sysprep volume source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysprep: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprep>,
}

/// CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDrive {
    /// NetworkData contains config drive inline cloud-init networkdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkData")]
    pub network_data: Option<String>,
    /// NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDataBase64")]
    pub network_data_base64: Option<String>,
    /// NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDataSecretRef")]
    pub network_data_secret_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>,
    /// UserDataSecretRef references a k8s secret that contains config drive userdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef>,
    /// UserData contains config drive inline cloud-init userdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    pub user_data: Option<String>,
    /// UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    pub user_data_base64: Option<String>,
}

/// NetworkDataSecretRef references a k8s secret that contains config drive networkdata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// UserDataSecretRef references a k8s secret that contains config drive userdata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitConfigDriveSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloud {
    /// NetworkData contains NoCloud inline cloud-init networkdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkData")]
    pub network_data: Option<String>,
    /// NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDataBase64")]
    pub network_data_base64: Option<String>,
    /// NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDataSecretRef")]
    pub network_data_secret_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef>,
    /// UserDataSecretRef references a k8s secret that contains NoCloud userdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloudSecretRef>,
    /// UserData contains NoCloud inline cloud-init userdata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    pub user_data: Option<String>,
    /// UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    pub user_data_base64: Option<String>,
}

/// NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// UserDataSecretRef references a k8s secret that contains NoCloud userdata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesCloudInitNoCloudSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesConfigMap {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or it's keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

/// ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesContainerDisk {
    /// Image is the name of the image with the embedded disk.
    pub image: String,
    /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<String>,
    /// Path defines the path to disk file in the container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDataVolume {
    /// Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    /// Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.
    pub name: String,
}

/// DownwardAPI represents downward API about the pod that should populate this volume
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApi {
    /// Fields is a list of downward API volume file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFields>>,
    /// The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFields {
    /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFieldsFieldRef>,
    /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    pub path: String,
    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFieldsResourceFieldRef>,
}

/// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFieldsFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardApiFieldsResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// DownwardMetrics adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesDownwardMetrics {
}

/// EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEmptyDisk {
    /// Capacity of the sparse disk.
    pub capacity: IntOrString,
}

/// Ephemeral is a special volume source that "wraps" specified source and provides copy-on-write image on top of it.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEphemeral {
    /// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim>,
}

/// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesEphemeralPersistentVolumeClaim {
    /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(rename = "claimName")]
    pub claim_name: String,
    /// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// HostDisk represents a disk created on the cluster level
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesHostDisk {
    /// Capacity of the sparse disk
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// The path to HostDisk image located on the cluster
    pub path: String,
    /// Shared indicate whether the path is shared between nodes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
    /// Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'
    #[serde(rename = "type")]
    pub r#type: String,
}

/// MemoryDump is attached to the virt launcher and is populated with a memory dump of the vmi
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesMemoryDump {
    /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(rename = "claimName")]
    pub claim_name: String,
    /// Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    /// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesPersistentVolumeClaim {
    /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(rename = "claimName")]
    pub claim_name: String,
    /// Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    /// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSecret {
    /// Specify whether the Secret or it's keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are "cidata" (cloud-init), "config-2" (cloud-init) or "OEMDRV" (kickstart).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

/// ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesServiceAccount {
    /// Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
}

/// Represents a Sysprep volume source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprep {
    /// ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprepConfigMap>,
    /// Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprepSecret>,
}

/// ConfigMap references a ConfigMap that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprepConfigMap {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Secret references a k8s Secret that contains Sysprep answer file named autounattend.xml that should be attached as disk of CDROM type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineVirtualMachineTemplateSpecTemplateSpecVolumesSysprepSecret {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// KubevirtMachineStatus defines the observed state of KubevirtMachine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineStatus {
    /// Addresses contains the associated addresses for the machine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<KubevirtMachineStatusAddresses>>,
    /// Conditions defines current service state of the KubevirtMachine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
    ///  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
    ///  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureMessage")]
    pub failure_message: Option<String>,
    /// FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
    ///  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
    ///  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureReason")]
    pub failure_reason: Option<String>,
    /// LoadBalancerConfigured denotes that the machine has been added to the load balancer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerConfigured")]
    pub load_balancer_configured: Option<bool>,
    /// NodeUpdated denotes that the ProviderID is updated on Node of this KubevirtMachine
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodeupdated: Option<bool>,
    /// Ready denotes that the machine is ready
    pub ready: bool,
}

/// MachineAddress contains information for the node's address.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubevirtMachineStatusAddresses {
    /// The machine address.
    pub address: String,
    /// Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
    #[serde(rename = "type")]
    pub r#type: String,
}

