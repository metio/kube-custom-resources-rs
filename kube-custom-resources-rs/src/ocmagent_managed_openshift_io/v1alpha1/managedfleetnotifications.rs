// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/ocm-agent-operator/ocmagent.managed.openshift.io/v1alpha1/managedfleetnotifications.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "ocmagent.managed.openshift.io", version = "v1alpha1", kind = "ManagedFleetNotification", plural = "managedfleetnotifications")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct ManagedFleetNotificationSpec {
    /// FleetNotification defines the desired spec of ManagedFleetNotification
    #[serde(rename = "fleetNotification")]
    pub fleet_notification: ManagedFleetNotificationFleetNotification,
}

/// FleetNotification defines the desired spec of ManagedFleetNotification
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagedFleetNotificationFleetNotification {
    /// Whether or not limited support should be sent for this notification
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitedSupport")]
    pub limited_support: Option<bool>,
    /// LogType is a categorization property that can be used to group service logs for aggregation and managing notification preferences.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    pub log_type: Option<String>,
    /// The name of the notification used to associate with an alert
    pub name: String,
    /// The body text of the notification when the alert is active
    #[serde(rename = "notificationMessage")]
    pub notification_message: String,
    /// References useful for context or remediation - this could be links to documentation, KB articles, etc
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<String>>,
    /// Measured in hours. The minimum time interval that must elapse between active notifications
    #[serde(rename = "resendWait")]
    pub resend_wait: i32,
    /// Re-use the severity definitation in managednotification_types
    pub severity: ManagedFleetNotificationFleetNotificationSeverity,
    /// The summary line of the notification
    pub summary: String,
}

/// FleetNotification defines the desired spec of ManagedFleetNotification
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagedFleetNotificationFleetNotificationSeverity {
    Debug,
    Info,
    Warning,
    Error,
    Fatal,
}

