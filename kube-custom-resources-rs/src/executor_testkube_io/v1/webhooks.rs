// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubeshop/testkube-operator/executor.testkube.io/v1/webhooks.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// WebhookSpec defines the desired state of Webhook
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "executor.testkube.io", version = "v1", kind = "Webhook", plural = "webhooks")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct WebhookSpec {
    /// Disabled will disable the webhook
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Events declare list if events on which webhook should be called
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    /// webhook headers (golang template supported)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    /// OnStateChange will trigger the webhook only when the result of the current execution differs from the previous result of the same test/test suite/workflow
    /// Deprecated: field is not used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onStateChange")]
    pub on_state_change: Option<bool>,
    /// will load the generated payload for notification inside the object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadObjectField")]
    pub payload_object_field: Option<String>,
    /// golang based template for notification payload
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadTemplate")]
    pub payload_template: Option<String>,
    /// name of the template resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadTemplateReference")]
    pub payload_template_reference: Option<String>,
    /// Labels to filter for tests and test suites
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Uri is address where webhook should be made (golang template supported)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// WebhookStatus defines the observed state of Webhook
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WebhookStatus {
}

