// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/secrets-store-csi-driver/secrets-store.csi.x-k8s.io/v1alpha1/secretproviderclasses.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// SecretProviderClassSpec defines the desired state of SecretProviderClass
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "secrets-store.csi.x-k8s.io", version = "v1alpha1", kind = "SecretProviderClass", plural = "secretproviderclasses")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct SecretProviderClassSpec {
    /// Configuration for specific provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Configuration for provider name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretObjects")]
    pub secret_objects: Option<Vec<SecretProviderClassSecretObjects>>,
}

/// SecretObject defines the desired state of synced K8s secret objects
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SecretProviderClassSecretObjects {
    /// annotations of k8s secret object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<SecretProviderClassSecretObjectsData>>,
    /// labels of K8s secret object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// name of the K8s secret object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// type of K8s secret object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// SecretObjectData defines the desired state of synced K8s secret object data
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SecretProviderClassSecretObjectsData {
    /// data field to populate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// name of the object to sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectName")]
    pub object_name: Option<String>,
}

/// SecretProviderClassStatus defines the observed state of SecretProviderClass
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SecretProviderClassStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "byPod")]
    pub by_pod: Option<Vec<SecretProviderClassStatusByPod>>,
}

/// ByPodStatus defines the state of SecretProviderClass as seen by an individual controller
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SecretProviderClassStatusByPod {
    /// id of the pod that wrote the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// namespace of the pod that wrote the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

