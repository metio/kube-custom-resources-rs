// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/security-profiles-operator/security-profiles-operator.x-k8s.io/v1alpha2/rawselinuxprofiles.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// RawSelinuxProfileSpec defines the desired state of RawSelinuxProfile.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "security-profiles-operator.x-k8s.io", version = "v1alpha2", kind = "RawSelinuxProfile", plural = "rawselinuxprofiles")]
#[kube(namespaced)]
#[kube(status = "RawSelinuxProfileStatus")]
#[kube(schema = "disabled")]
pub struct RawSelinuxProfileSpec {
    /// Whether the profile is disabled and should be skipped during reconciliation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
}

/// SelinuxProfileStatus defines the observed state of SelinuxProfile.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct RawSelinuxProfileStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeWorkloads")]
    pub active_workloads: Option<Vec<String>>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<RawSelinuxProfileStatusConditions>>,
    /// ProfileState defines the state that the profile is in. A profile in this context refers to a SeccompProfile or a SELinux profile, the states are shared between them as well as the management API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Represents the string that the SelinuxProfile object can be referenced as in a pod seLinuxOptions section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
}

/// A Condition that may apply to a resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct RawSelinuxProfileStatusConditions {
    /// LastTransitionTime is the last time this condition transitioned from one status to another.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// A Message containing details about this condition's last transition from one status to another, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// A Reason for this condition's last transition from one status to another.
    pub reason: String,
    /// Status of this condition; is it currently True, False, or Unknown?
    pub status: String,
    /// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    #[serde(rename = "type")]
    pub r#type: String,
}

