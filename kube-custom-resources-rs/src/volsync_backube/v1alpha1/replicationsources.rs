// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/backube/volsync/volsync.backube/v1alpha1/replicationsources.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// spec is the desired state of the ReplicationSource, including the replication method to use and its configuration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "volsync.backube", version = "v1alpha1", kind = "ReplicationSource", plural = "replicationsources")]
#[kube(namespaced)]
#[kube(status = "ReplicationSourceStatus")]
#[kube(schema = "disabled")]
pub struct ReplicationSourceSpec {
    /// external defines the configuration when using an external replication provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<ReplicationSourceExternal>,
    /// paused can be used to temporarily stop replication. Defaults to "false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// rclone defines the configuration when using Rclone-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rclone: Option<ReplicationSourceRclone>,
    /// restic defines the configuration when using Restic-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restic: Option<ReplicationSourceRestic>,
    /// rsync defines the configuration when using Rsync-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsync: Option<ReplicationSourceRsync>,
    /// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsyncTLS")]
    pub rsync_tls: Option<ReplicationSourceRsyncTls>,
    /// sourcePVC is the name of the PersistentVolumeClaim (PVC) to replicate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePVC")]
    pub source_pvc: Option<String>,
    /// syncthing defines the configuration when using Syncthing-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syncthing: Option<ReplicationSourceSyncthing>,
    /// trigger determines when the latest state of the volume will be captured (and potentially replicated to the destination).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trigger: Option<ReplicationSourceTrigger>,
}

/// external defines the configuration when using an external replication provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceExternal {
    /// parameters are provider-specific key/value configuration parameters. For more information, please see the documentation of the specific replication provider being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    /// provider is the name of the external replication provider. The name should be of the form: domain.com/provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// rclone defines the configuration when using Rclone-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRclone {
    /// accessModes can be used to override the accessModes of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// capacity can be used to override the capacity of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationSourceRcloneCopyMethod>,
    /// customCA is a custom CA that will be used to verify the remote
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCA")]
    pub custom_ca: Option<ReplicationSourceRcloneCustomCa>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationSourceRcloneMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationSourceRcloneMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// RcloneConfig is the rclone secret name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneConfig")]
    pub rclone_config: Option<String>,
    /// RcloneConfigSection is the section in rclone_config file to use for the current job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneConfigSection")]
    pub rclone_config_section: Option<String>,
    /// RcloneDestPath is the remote path to sync to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneDestPath")]
    pub rclone_dest_path: Option<String>,
    /// storageClassName can be used to override the StorageClass of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rclone defines the configuration when using Rclone-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationSourceRcloneCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// customCA is a custom CA that will be used to verify the remote
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneCustomCa {
    /// The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapName")]
    pub config_map_name: Option<String>,
    /// The key within the Secret or ConfigMap containing the CA certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationSourceRcloneMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationSourceRcloneMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationSourceRcloneMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationSourceRcloneMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationSourceRcloneMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRcloneMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// restic defines the configuration when using Restic-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRestic {
    /// accessModes can be used to override the accessModes of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// CacheAccessModes can be used to set the accessModes of restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheAccessModes")]
    pub cache_access_modes: Option<Vec<String>>,
    /// cacheCapacity can be used to set the size of the restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheCapacity")]
    pub cache_capacity: Option<IntOrString>,
    /// cacheStorageClassName can be used to set the StorageClass of the restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheStorageClassName")]
    pub cache_storage_class_name: Option<String>,
    /// capacity can be used to override the capacity of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationSourceResticCopyMethod>,
    /// customCA is a custom CA that will be used to verify the remote
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCA")]
    pub custom_ca: Option<ReplicationSourceResticCustomCa>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationSourceResticMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationSourceResticMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// PruneIntervalDays define how often to prune the repository
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pruneIntervalDays")]
    pub prune_interval_days: Option<i32>,
    /// Repository is the secret name containing repository info
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// ResticRetainPolicy define the retain policy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retain: Option<ReplicationSourceResticRetain>,
    /// storageClassName can be used to override the StorageClass of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// unlock is a string value that schedules an unlock on the restic repository during the next sync operation. Once a sync completes then status.restic.lastUnlocked is set to the same string value. To unlock a repository, set spec.restic.unlock to a known value and then wait for lastUnlocked to be updated by the operator to the same value, which means that the sync unlocked the repository by running a restic unlock command and then ran a backup. Unlock will not be run again unless spec.restic.unlock is set to a different value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unlock: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// restic defines the configuration when using Restic-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationSourceResticCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// customCA is a custom CA that will be used to verify the remote
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticCustomCa {
    /// The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapName")]
    pub config_map_name: Option<String>,
    /// The key within the Secret or ConfigMap containing the CA certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationSourceResticMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationSourceResticMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationSourceResticMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationSourceResticMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationSourceResticMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// ResticRetainPolicy define the retain policy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceResticRetain {
    /// Daily defines the number of snapshots to be kept daily
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub daily: Option<i32>,
    /// Hourly defines the number of snapshots to be kept hourly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hourly: Option<i32>,
    /// Last defines the number of snapshots to be kept
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub last: Option<String>,
    /// Monthly defines the number of snapshots to be kept monthly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monthly: Option<i32>,
    /// Weekly defines the number of snapshots to be kept weekly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weekly: Option<i32>,
    /// Within defines the number of snapshots to be kept Within the given time period
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub within: Option<String>,
    /// Yearly defines the number of snapshots to be kept yearly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yearly: Option<i32>,
}

/// rsync defines the configuration when using Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsync {
    /// accessModes can be used to override the accessModes of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// address is the remote address to connect to for replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// capacity can be used to override the capacity of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationSourceRsyncCopyMethod>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationSourceRsyncMoverResources>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// path is the remote path to rsync to. Defaults to "/"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// port is the SSH port to connect to for replication. Defaults to 22.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// serviceType determines the Service type that will be created for incoming SSH connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceType")]
    pub service_type: Option<String>,
    /// sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided, the keys will be generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeys")]
    pub ssh_keys: Option<String>,
    /// sshUser is the username for outgoing SSH connections. Defaults to "root".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshUser")]
    pub ssh_user: Option<String>,
    /// storageClassName can be used to override the StorageClass of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rsync defines the configuration when using Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationSourceRsyncCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationSourceRsyncMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTls {
    /// accessModes can be used to override the accessModes of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// address is the remote address to connect to for replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// capacity can be used to override the capacity of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationSourceRsyncTlsCopyMethod>,
    /// keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided, the key will be generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationSourceRsyncTlsMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationSourceRsyncTlsMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// port is the port to connect to for replication. Defaults to 8000.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// storageClassName can be used to override the StorageClass of the PiT image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationSourceRsyncTlsCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationSourceRsyncTlsMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationSourceRsyncTlsMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationSourceRsyncTlsMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationSourceRsyncTlsMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationSourceRsyncTlsMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceRsyncTlsMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// syncthing defines the configuration when using Syncthing-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthing {
    /// Used to set the accessModes of Syncthing config volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configAccessModes")]
    pub config_access_modes: Option<Vec<String>>,
    /// Used to set the size of the Syncthing config volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configCapacity")]
    pub config_capacity: Option<IntOrString>,
    /// Used to set the StorageClass of the Syncthing config volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configStorageClassName")]
    pub config_storage_class_name: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationSourceSyncthingMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationSourceSyncthingMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// List of Syncthing peers to be connected for syncing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peers: Option<Vec<ReplicationSourceSyncthingPeers>>,
    /// Type of service to be used when exposing the Syncthing peer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceType")]
    pub service_type: Option<String>,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationSourceSyncthingMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationSourceSyncthingMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationSourceSyncthingMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationSourceSyncthingMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationSourceSyncthingMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// SyncthingPeer Defines the necessary information needed by VolSync to configure a given peer with the running Syncthing instance.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceSyncthingPeers {
    /// The peer's Syncthing ID.
    #[serde(rename = "ID")]
    pub id: String,
    /// The peer's address that our Syncthing node will connect to.
    pub address: String,
    /// A flag that determines whether this peer should introduce us to other peers sharing this volume. It is HIGHLY recommended that two Syncthing peers do NOT set each other as introducers as you will have a difficult time disconnecting the two.
    pub introducer: bool,
}

/// trigger determines when the latest state of the volume will be captured (and potentially replicated to the destination).
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceTrigger {
    /// manual is a string value that schedules a manual trigger. Once a sync completes then status.lastManualSync is set to the same string value. A consumer of a manual trigger should set spec.trigger.manual to a known value and then wait for lastManualSync to be updated by the operator to the same value, which means that the manual trigger will then pause and wait for further updates to the trigger.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manual: Option<String>,
    /// schedule is a cronspec (https://en.wikipedia.org/wiki/Cron#Overview) that can be used to schedule replication to occur at regular, time-based intervals. nolint:lll
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// status is the observed state of the ReplicationSource as determined by the controller.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatus {
    /// conditions represent the latest available observations of the source's state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// external contains provider-specific status information. For more details, please see the documentation of the specific replication provider being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<BTreeMap<String, String>>,
    /// lastManualSync is set to the last spec.trigger.manual when the manual sync is done.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastManualSync")]
    pub last_manual_sync: Option<String>,
    /// lastSyncDuration is the amount of time required to send the most recent update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncDuration")]
    pub last_sync_duration: Option<String>,
    /// lastSyncStartTime is the time the most recent synchronization started.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncStartTime")]
    pub last_sync_start_time: Option<String>,
    /// lastSyncTime is the time of the most recent successful synchronization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncTime")]
    pub last_sync_time: Option<String>,
    /// Logs/Summary from latest mover job
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestMoverStatus")]
    pub latest_mover_status: Option<ReplicationSourceStatusLatestMoverStatus>,
    /// nextSyncTime is the time when the next volume synchronization is scheduled to start (for schedule-based synchronization).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nextSyncTime")]
    pub next_sync_time: Option<String>,
    /// restic contains status information for Restic-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restic: Option<ReplicationSourceStatusRestic>,
    /// rsync contains status information for Rsync-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsync: Option<ReplicationSourceStatusRsync>,
    /// rsyncTLS contains status information for Rsync-based replication over TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsyncTLS")]
    pub rsync_tls: Option<ReplicationSourceStatusRsyncTls>,
    /// contains status information when Syncthing-based replication is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syncthing: Option<ReplicationSourceStatusSyncthing>,
}

/// Logs/Summary from latest mover job
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusLatestMoverStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
}

/// restic contains status information for Restic-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusRestic {
    /// lastPruned in the object holding the time of last pruned
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastPruned")]
    pub last_pruned: Option<String>,
    /// lastUnlocked is set to the last spec.restic.unlock when a sync is done that unlocks the restic repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUnlocked")]
    pub last_unlocked: Option<String>,
}

/// rsync contains status information for Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusRsync {
    /// address is the address to connect to for incoming SSH replication connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// port is the SSH port to connect to for incoming SSH replication connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided in .spec.rsync.sshKeys, SSH keys will be generated and the appropriate keys for the remote side will be placed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeys")]
    pub ssh_keys: Option<String>,
}

/// rsyncTLS contains status information for Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusRsyncTls {
    /// keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided in .spec.rsyncTLS.keySecret, the key Secret will be generated and named here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<String>,
}

/// contains status information when Syncthing-based replication is used.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusSyncthing {
    /// Device ID of the current syncthing device
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ID")]
    pub id: Option<String>,
    /// Service address where Syncthing is exposed to the rest of the world
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// List of the Syncthing nodes we are currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peers: Option<Vec<ReplicationSourceStatusSyncthingPeers>>,
}

/// SyncthingPeerStatus Is a struct that contains information pertaining to the status of a given Syncthing peer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationSourceStatusSyncthingPeers {
    /// ID Is the peer's Syncthing ID.
    #[serde(rename = "ID")]
    pub id: String,
    /// The address of the Syncthing peer.
    pub address: String,
    /// Flag indicating whether peer is currently connected.
    pub connected: bool,
    /// The ID of the Syncthing peer that this one was introduced by.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introducedBy")]
    pub introduced_by: Option<String>,
    /// A friendly name to associate the given device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

