// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/backube/volsync/volsync.backube/v1alpha1/replicationdestinations.yaml --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// spec is the desired state of the ReplicationDestination, including the replication method to use and its configuration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "volsync.backube", version = "v1alpha1", kind = "ReplicationDestination", plural = "replicationdestinations")]
#[kube(namespaced)]
#[kube(status = "ReplicationDestinationStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct ReplicationDestinationSpec {
    /// external defines the configuration when using an external replication provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<ReplicationDestinationExternal>,
    /// paused can be used to temporarily stop replication. Defaults to "false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// rclone defines the configuration when using Rclone-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rclone: Option<ReplicationDestinationRclone>,
    /// restic defines the configuration when using Restic-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restic: Option<ReplicationDestinationRestic>,
    /// rsync defines the configuration when using Rsync-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsync: Option<ReplicationDestinationRsync>,
    /// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsyncTLS")]
    pub rsync_tls: Option<ReplicationDestinationRsyncTls>,
    /// trigger determines if/when the destination should attempt to synchronize data with the source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trigger: Option<ReplicationDestinationTrigger>,
}

/// external defines the configuration when using an external replication provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationExternal {
    /// parameters are provider-specific key/value configuration parameters. For more information, please see the documentation of the specific replication provider being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    /// provider is the name of the external replication provider. The name should be of the form: domain.com/provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// rclone defines the configuration when using Rclone-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRclone {
    /// accessModes specifies the access modes for the destination volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// capacity is the size of the destination volume to create.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationDestinationRcloneCopyMethod>,
    /// customCA is a custom CA that will be used to verify the remote
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCA")]
    pub custom_ca: Option<ReplicationDestinationRcloneCustomCa>,
    /// destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPVC")]
    pub destination_pvc: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationDestinationRcloneMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationDestinationRcloneMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// RcloneConfig is the rclone secret name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneConfig")]
    pub rclone_config: Option<String>,
    /// RcloneConfigSection is the section in rclone_config file to use for the current job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneConfigSection")]
    pub rclone_config_section: Option<String>,
    /// RcloneDestPath is the remote path to sync to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rcloneDestPath")]
    pub rclone_dest_path: Option<String>,
    /// storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rclone defines the configuration when using Rclone-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationDestinationRcloneCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// customCA is a custom CA that will be used to verify the remote
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneCustomCa {
    /// The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapName")]
    pub config_map_name: Option<String>,
    /// The key within the Secret or ConfigMap containing the CA certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationDestinationRcloneMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationDestinationRcloneMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationDestinationRcloneMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationDestinationRcloneMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationDestinationRcloneMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRcloneMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// restic defines the configuration when using Restic-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRestic {
    /// accessModes specifies the access modes for the destination volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// accessModes can be used to set the accessModes of restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheAccessModes")]
    pub cache_access_modes: Option<Vec<String>>,
    /// cacheCapacity can be used to set the size of the restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheCapacity")]
    pub cache_capacity: Option<IntOrString>,
    /// cacheStorageClassName can be used to set the StorageClass of the restic metadata cache volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheStorageClassName")]
    pub cache_storage_class_name: Option<String>,
    /// capacity is the size of the destination volume to create.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationDestinationResticCopyMethod>,
    /// customCA is a custom CA that will be used to verify the remote
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customCA")]
    pub custom_ca: Option<ReplicationDestinationResticCustomCa>,
    /// destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPVC")]
    pub destination_pvc: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationDestinationResticMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationDestinationResticMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// Previous specifies the number of image to skip before selecting one to restore from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous: Option<i32>,
    /// Repository is the secret name containing repository info
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// RestoreAsOf refers to the backup that is most recent as of that time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreAsOf")]
    pub restore_as_of: Option<String>,
    /// storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// restic defines the configuration when using Restic-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationDestinationResticCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// customCA is a custom CA that will be used to verify the remote
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticCustomCa {
    /// The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapName")]
    pub config_map_name: Option<String>,
    /// The key within the Secret or ConfigMap containing the CA certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationDestinationResticMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationDestinationResticMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationDestinationResticMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationDestinationResticMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationDestinationResticMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationResticMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// rsync defines the configuration when using Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsync {
    /// accessModes specifies the access modes for the destination volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// address is the remote address to connect to for replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// capacity is the size of the destination volume to create.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationDestinationRsyncCopyMethod>,
    /// destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPVC")]
    pub destination_pvc: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationDestinationRsyncMoverResources>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationDestination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// path is the remote path to rsync from. Defaults to "/"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// port is the SSH port to connect to for replication. Defaults to 22.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// serviceAnnotations defines annotations that will be added to the service created for incoming SSH connections.  If set, these annotations will be used instead of any VolSync default values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAnnotations")]
    pub service_annotations: Option<BTreeMap<String, String>>,
    /// serviceType determines the Service type that will be created for incoming SSH connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceType")]
    pub service_type: Option<String>,
    /// sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided, the keys will be generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeys")]
    pub ssh_keys: Option<String>,
    /// sshUser is the username for outgoing SSH connections. Defaults to "root".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshUser")]
    pub ssh_user: Option<String>,
    /// storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rsync defines the configuration when using Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationDestinationRsyncCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationDestinationRsyncMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTls {
    /// accessModes specifies the access modes for the destination volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// capacity is the size of the destination volume to create.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    /// copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyMethod")]
    pub copy_method: Option<ReplicationDestinationRsyncTlsCopyMethod>,
    /// destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPVC")]
    pub destination_pvc: Option<String>,
    /// keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided, the key will be generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<String>,
    /// Labels that should be added to data mover pods These will be in addition to any labels that VolSync may add
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverPodLabels")]
    pub mover_pod_labels: Option<BTreeMap<String, String>>,
    /// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverResources")]
    pub mover_resources: Option<ReplicationDestinationRsyncTlsMoverResources>,
    /// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverSecurityContext")]
    pub mover_security_context: Option<ReplicationDestinationRsyncTlsMoverSecurityContext>,
    /// MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as this CR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "moverServiceAccount")]
    pub mover_service_account: Option<String>,
    /// serviceAnnotations defines annotations that will be added to the service created for incoming SSH connections.  If set, these annotations will be used instead of any VolSync default values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAnnotations")]
    pub service_annotations: Option<BTreeMap<String, String>>,
    /// serviceType determines the Service type that will be created for incoming TLS connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceType")]
    pub service_type: Option<String>,
    /// storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSnapshotClassName")]
    pub volume_snapshot_class_name: Option<String>,
}

/// rsyncTLS defines the configuration when using Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReplicationDestinationRsyncTlsCopyMethod {
    Direct,
    None,
    Clone,
    Snapshot,
}

/// Resources represents compute resources required by the data mover container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ This should only be used by advanced users as this can result in a mover pod being unschedulable or crashing due to limited resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ReplicationDestinationRsyncTlsMoverResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverSecurityContext {
    /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
    ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
    ///  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<ReplicationDestinationRsyncTlsMoverSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<ReplicationDestinationRsyncTlsMoverSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<ReplicationDestinationRsyncTlsMoverSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<ReplicationDestinationRsyncTlsMoverSecurityContextWindowsOptions>,
}

/// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationRsyncTlsMoverSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// trigger determines if/when the destination should attempt to synchronize data with the source.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationTrigger {
    /// manual is a string value that schedules a manual trigger. Once a sync completes then status.lastManualSync is set to the same string value. A consumer of a manual trigger should set spec.trigger.manual to a known value and then wait for lastManualSync to be updated by the operator to the same value, which means that the manual trigger will then pause and wait for further updates to the trigger.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manual: Option<String>,
    /// schedule is a cronspec (https://en.wikipedia.org/wiki/Cron#Overview) that can be used to schedule replication to occur at regular, time-based intervals. nolint:lll
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// status is the observed state of the ReplicationDestination as determined by the controller.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationStatus {
    /// conditions represent the latest available observations of the destination's state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// external contains provider-specific status information. For more details, please see the documentation of the specific replication provider being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<BTreeMap<String, String>>,
    /// lastManualSync is set to the last spec.trigger.manual when the manual sync is done.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastManualSync")]
    pub last_manual_sync: Option<String>,
    /// lastSyncDuration is the amount of time required to send the most recent update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncDuration")]
    pub last_sync_duration: Option<String>,
    /// lastSyncStartTime is the time the most recent synchronization started.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncStartTime")]
    pub last_sync_start_time: Option<String>,
    /// lastSyncTime is the time of the most recent successful synchronization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSyncTime")]
    pub last_sync_time: Option<String>,
    /// latestImage in the object holding the most recent consistent replicated image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestImage")]
    pub latest_image: Option<ReplicationDestinationStatusLatestImage>,
    /// Logs/Summary from latest mover job
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestMoverStatus")]
    pub latest_mover_status: Option<ReplicationDestinationStatusLatestMoverStatus>,
    /// nextSyncTime is the time when the next volume synchronization is scheduled to start (for schedule-based synchronization).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nextSyncTime")]
    pub next_sync_time: Option<String>,
    /// rsync contains status information for Rsync-based replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsync: Option<ReplicationDestinationStatusRsync>,
    /// rsyncTLS contains status information for Rsync-based replication over TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsyncTLS")]
    pub rsync_tls: Option<ReplicationDestinationStatusRsyncTls>,
}

/// latestImage in the object holding the most recent consistent replicated image.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationStatusLatestImage {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// Logs/Summary from latest mover job
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationStatusLatestMoverStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
}

/// rsync contains status information for Rsync-based replication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationStatusRsync {
    /// address is the address to connect to for incoming SSH replication connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// port is the SSH port to connect to for incoming SSH replication connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided in .spec.rsync.sshKeys, SSH keys will be generated and the appropriate keys for the remote side will be placed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshKeys")]
    pub ssh_keys: Option<String>,
}

/// rsyncTLS contains status information for Rsync-based replication over TLS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReplicationDestinationStatusRsyncTls {
    /// address is the address to connect to for incoming TLS connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided in .spec.rsyncTLS.keySecret, the key Secret will be generated and named here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<String>,
    /// port is the port to connect to for incoming replication connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

