// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/quay/container-security-operator/secscan.quay.redhat.com/v1alpha1/imagemanifestvulns.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "secscan.quay.redhat.com", version = "v1alpha1", kind = "ImageManifestVuln", plural = "imagemanifestvulns")]
#[kube(namespaced)]
#[kube(status = "ImageManifestVulnStatus")]
#[kube(schema = "disabled")]
pub struct ImageManifestVulnSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<ImageManifestVulnFeatures>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceName")]
    pub namespace_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageManifestVulnFeatures {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceName")]
    pub namespace_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versionformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vulnerabilities: Option<Vec<ImageManifestVulnFeaturesVulnerabilities>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageManifestVulnFeaturesVulnerabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixedby: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceName")]
    pub namespace_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ImageManifestVulnStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affectedPods")]
    pub affected_pods: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "criticalCount")]
    pub critical_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defcon1Count")]
    pub defcon1_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixableCount")]
    pub fixable_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highCount")]
    pub high_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highestSeverity")]
    pub highest_severity: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdate")]
    pub last_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowCount")]
    pub low_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediumCount")]
    pub medium_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negligibleCount")]
    pub negligible_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownCount")]
    pub unknown_count: Option<i64>,
}

