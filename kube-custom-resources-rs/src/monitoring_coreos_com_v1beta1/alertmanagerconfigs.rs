// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/prometheus-operator/prometheus-operator/monitoring.coreos.com/v1beta1/alertmanagerconfigs.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use std::collections::HashMap;

/// AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "monitoring.coreos.com", version = "v1beta1", kind = "AlertmanagerConfig", plural = "alertmanagerconfigs")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct AlertmanagerConfigSpec {
    /// List of inhibition rules. The rules will only apply to alerts matching the resource's namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inhibitRules")]
    pub inhibit_rules: Option<Vec<AlertmanagerConfigInhibitRules>>,
    /// List of receivers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub receivers: Option<Vec<AlertmanagerConfigReceivers>>,
    /// The Alertmanager route definition for alerts matching the resource's namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<AlertmanagerConfigRoute>,
    /// List of TimeInterval specifying when the routes should be muted or active.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeIntervals")]
    pub time_intervals: Option<Vec<AlertmanagerConfigTimeIntervals>>,
}

/// InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigInhibitRules {
    /// Labels that must have an equal value in the source and target alert for the inhibition to take effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub equal: Option<Vec<String>>,
    /// Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource's namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMatch")]
    pub source_match: Option<Vec<AlertmanagerConfigInhibitRulesSourceMatch>>,
    /// Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource's namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetMatch")]
    pub target_match: Option<Vec<AlertmanagerConfigInhibitRulesTargetMatch>>,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigInhibitRulesSourceMatch {
    /// Match operator, one of `=` (equal to), `!=` (not equal to), `=~` (regex match) or `!~` (not regex match). Negative operators (`!=` and `!~`) require Alertmanager >= v0.22.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<AlertmanagerConfigInhibitRulesSourceMatchMatchType>,
    /// Label to match.
    pub name: String,
    /// Label value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AlertmanagerConfigInhibitRulesSourceMatchMatchType {
    #[serde(rename = "!=")]
    KopiumVariant0,
    #[serde(rename = "=")]
    KopiumVariant1,
    #[serde(rename = "=~")]
    KopiumVariant2,
    #[serde(rename = "!~")]
    KopiumVariant3,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigInhibitRulesTargetMatch {
    /// Match operator, one of `=` (equal to), `!=` (not equal to), `=~` (regex match) or `!~` (not regex match). Negative operators (`!=` and `!~`) require Alertmanager >= v0.22.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<AlertmanagerConfigInhibitRulesTargetMatchMatchType>,
    /// Label to match.
    pub name: String,
    /// Label value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AlertmanagerConfigInhibitRulesTargetMatchMatchType {
    #[serde(rename = "!=")]
    KopiumVariant0,
    #[serde(rename = "=")]
    KopiumVariant1,
    #[serde(rename = "=~")]
    KopiumVariant2,
    #[serde(rename = "!~")]
    KopiumVariant3,
}

/// Receiver defines one or more notification integrations.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceivers {
    /// List of Slack configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discordConfigs")]
    pub discord_configs: Option<Vec<AlertmanagerConfigReceiversDiscordConfigs>>,
    /// List of Email configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailConfigs")]
    pub email_configs: Option<Vec<AlertmanagerConfigReceiversEmailConfigs>>,
    /// List of MSTeams configurations. It requires Alertmanager >= 0.26.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "msteamsConfigs")]
    pub msteams_configs: Option<Vec<AlertmanagerConfigReceiversMsteamsConfigs>>,
    /// Name of the receiver. Must be unique across all items from the list.
    pub name: String,
    /// List of OpsGenie configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opsgenieConfigs")]
    pub opsgenie_configs: Option<Vec<AlertmanagerConfigReceiversOpsgenieConfigs>>,
    /// List of PagerDuty configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pagerdutyConfigs")]
    pub pagerduty_configs: Option<Vec<AlertmanagerConfigReceiversPagerdutyConfigs>>,
    /// List of Pushover configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pushoverConfigs")]
    pub pushover_configs: Option<Vec<AlertmanagerConfigReceiversPushoverConfigs>>,
    /// List of Slack configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slackConfigs")]
    pub slack_configs: Option<Vec<AlertmanagerConfigReceiversSlackConfigs>>,
    /// List of SNS configurations
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snsConfigs")]
    pub sns_configs: Option<Vec<AlertmanagerConfigReceiversSnsConfigs>>,
    /// List of Telegram configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telegramConfigs")]
    pub telegram_configs: Option<Vec<AlertmanagerConfigReceiversTelegramConfigs>>,
    /// List of VictorOps configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "victoropsConfigs")]
    pub victorops_configs: Option<Vec<AlertmanagerConfigReceiversVictoropsConfigs>>,
    /// List of Webex configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webexConfigs")]
    pub webex_configs: Option<Vec<AlertmanagerConfigReceiversWebexConfigs>>,
    /// List of webhook configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookConfigs")]
    pub webhook_configs: Option<Vec<AlertmanagerConfigReceiversWebhookConfigs>>,
    /// List of WeChat configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wechatConfigs")]
    pub wechat_configs: Option<Vec<AlertmanagerConfigReceiversWechatConfigs>>,
}

/// DiscordConfig configures notifications via Discord. See https://prometheus.io/docs/alerting/latest/configuration/#discord_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigs {
    /// The secret's key that contains the Discord webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<AlertmanagerConfigReceiversDiscordConfigsApiUrl>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfig>,
    /// The template of the message's body.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// The template of the message's title.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// The secret's key that contains the Discord webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsApiUrl {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversDiscordConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EmailConfig configures notifications via Email.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigs {
    /// The identity to use for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authIdentity")]
    pub auth_identity: Option<String>,
    /// The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authPassword")]
    pub auth_password: Option<AlertmanagerConfigReceiversEmailConfigsAuthPassword>,
    /// The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authSecret")]
    pub auth_secret: Option<AlertmanagerConfigReceiversEmailConfigsAuthSecret>,
    /// The username to use for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authUsername")]
    pub auth_username: Option<String>,
    /// The sender address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<AlertmanagerConfigReceiversEmailConfigsHeaders>>,
    /// The hostname to identify to the SMTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hello: Option<String>,
    /// The HTML body of the email notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html: Option<String>,
    /// The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireTLS")]
    pub require_tls: Option<bool>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// The SMTP host and port through which emails are sent. E.g. example.com:25
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub smarthost: Option<String>,
    /// The text body of the email notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// TLS configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfig>,
    /// The email address to send notifications to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
}

/// The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsAuthSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// KeyValue defines a (key, value) tuple.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsHeaders {
    /// Key of the tuple.
    pub key: String,
    /// Value of the tuple.
    pub value: String,
}

/// TLS configuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversEmailConfigsTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversEmailConfigsTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MSTeamsConfig configures notifications via Microsoft Teams. It requires Alertmanager >= 0.26.0.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigs {
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfig>,
    /// Whether to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// Message body template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Message title template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// MSTeams webhook URL.
    #[serde(rename = "webhookUrl")]
    pub webhook_url: AlertmanagerConfigReceiversMsteamsConfigsWebhookUrl,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MSTeams webhook URL.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversMsteamsConfigsWebhookUrl {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigs {
    /// Comma separated list of actions that will be available for the alert.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<String>,
    /// The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<AlertmanagerConfigReceiversOpsgenieConfigsApiKey>,
    /// The URL to send OpsGenie API requests to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// Description of the incident.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A set of arbitrary key/value pairs that provide further detail about the incident.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<AlertmanagerConfigReceiversOpsgenieConfigsDetails>>,
    /// Optional field that can be used to specify which domain alert is related to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entity: Option<String>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfig>,
    /// Alert text limited to 130 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Additional alert note.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    /// Priority level of alert. Possible values are P1, P2, P3, P4, and P5.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    /// List of responders responsible for notifications.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub responders: Option<Vec<AlertmanagerConfigReceiversOpsgenieConfigsResponders>>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// Backlink to the sender of the notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Comma separated list of tags attached to the notifications.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
}

/// The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsApiKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// KeyValue defines a (key, value) tuple.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsDetails {
    /// Key of the tuple.
    pub key: String,
    /// Value of the tuple.
    pub value: String,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversOpsgenieConfigsResponders {
    /// ID of the responder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the responder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of responder.
    #[serde(rename = "type")]
    pub r#type: AlertmanagerConfigReceiversOpsgenieConfigsRespondersType,
    /// Username of the responder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AlertmanagerConfigReceiversOpsgenieConfigsRespondersType {
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "teams")]
    Teams,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "escalation")]
    Escalation,
    #[serde(rename = "schedule")]
    Schedule,
}

/// PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigs {
    /// The class/type of the event.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Client identification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client: Option<String>,
    /// Backlink to the sender of notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientURL")]
    pub client_url: Option<String>,
    /// The part or component of the affected system that is broken.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Description of the incident.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Arbitrary key/value pairs that provide further detail about the incident.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<AlertmanagerConfigReceiversPagerdutyConfigsDetails>>,
    /// A cluster or grouping of sources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfig>,
    /// A list of image details to attach that provide further detail about an incident.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pagerDutyImageConfigs")]
    pub pager_duty_image_configs: Option<Vec<AlertmanagerConfigReceiversPagerdutyConfigsPagerDutyImageConfigs>>,
    /// A list of link details to attach that provide further detail about an incident.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pagerDutyLinkConfigs")]
    pub pager_duty_link_configs: Option<Vec<AlertmanagerConfigReceiversPagerdutyConfigsPagerDutyLinkConfigs>>,
    /// The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingKey")]
    pub routing_key: Option<AlertmanagerConfigReceiversPagerdutyConfigsRoutingKey>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceKey")]
    pub service_key: Option<AlertmanagerConfigReceiversPagerdutyConfigsServiceKey>,
    /// Severity of the incident.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    /// The URL to send requests to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// KeyValue defines a (key, value) tuple.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsDetails {
    /// Key of the tuple.
    pub key: String,
    /// Value of the tuple.
    pub value: String,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// PagerDutyImageConfig attaches images to an incident
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsPagerDutyImageConfigs {
    /// Alt is the optional alternative text for the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt: Option<String>,
    /// Optional URL; makes the image a clickable link.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// Src of the image being attached to the incident
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub src: Option<String>,
}

/// PagerDutyLinkConfig attaches text links to an incident
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsPagerDutyLinkConfigs {
    /// Text that describes the purpose of the link, and can be used as the link's text.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt: Option<String>,
    /// Href is the URL of the link to be attached
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
}

/// The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsRoutingKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPagerdutyConfigsServiceKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigs {
    /// How long your notification will continue to be retried for, unless the user acknowledges the notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expire: Option<String>,
    /// Whether notification message is HTML or plain text.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html: Option<bool>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfig>,
    /// Notification message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Priority, see https://pushover.net/api#priority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    /// How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// The name of one of the sounds supported by device clients to override the user's default sound choice
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sound: Option<String>,
    /// Notification title.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The secret's key that contains the registered application's API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. Either `token` or `tokenFile` is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<AlertmanagerConfigReceiversPushoverConfigsToken>,
    /// The token file that contains the registered application's API token, see https://pushover.net/apps. Either `token` or `tokenFile` is required. It requires Alertmanager >= v0.26.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFile")]
    pub token_file: Option<String>,
    /// A supplementary URL shown alongside the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// A title for supplementary URL, otherwise just the URL is shown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlTitle")]
    pub url_title: Option<String>,
    /// The secret's key that contains the recipient user's user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. Either `userKey` or `userKeyFile` is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userKey")]
    pub user_key: Option<AlertmanagerConfigReceiversPushoverConfigsUserKey>,
    /// The user key file that contains the recipient user's user key. Either `userKey` or `userKeyFile` is required. It requires Alertmanager >= v0.26.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userKeyFile")]
    pub user_key_file: Option<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the registered application's API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. Either `token` or `tokenFile` is required.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsToken {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// The secret's key that contains the recipient user's user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. Either `userKey` or `userKeyFile` is required.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversPushoverConfigsUserKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigs {
    /// A list of Slack actions that are sent with each notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<AlertmanagerConfigReceiversSlackConfigsActions>>,
    /// The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<AlertmanagerConfigReceiversSlackConfigsApiUrl>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callbackId")]
    pub callback_id: Option<String>,
    /// The channel or user to send notifications to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fallback: Option<String>,
    /// A list of Slack fields that are sent with each notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<AlertmanagerConfigReceiversSlackConfigsFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub footer: Option<String>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconEmoji")]
    pub icon_emoji: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iconURL")]
    pub icon_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageURL")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkNames")]
    pub link_names: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mrkdwnIn")]
    pub mrkdwn_in: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pretext: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shortFields")]
    pub short_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thumbURL")]
    pub thumb_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "titleLink")]
    pub title_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons for more information.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsActions {
    /// SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub confirm: Option<AlertmanagerConfigReceiversSlackConfigsActionsConfirm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub style: Option<String>,
    pub text: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsActionsConfirm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dismissText")]
    pub dismiss_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okText")]
    pub ok_text: Option<String>,
    pub text: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsApiUrl {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// SlackField configures a single Slack field that is sent with each notification. Each field must contain a title, value, and optionally, a boolean value to indicate if the field is short enough to be displayed next to other fields designated as short. See https://api.slack.com/docs/message-attachments#fields for more information.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub short: Option<bool>,
    pub title: String,
    pub value: String,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSlackConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SNSConfig configures notifications via AWS SNS. See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigs {
    /// The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// SNS message attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfig>,
    /// The message content of the SNS notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// Configures AWS's Signature Verification 4 signing process to sign requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sigv4: Option<AlertmanagerConfigReceiversSnsConfigsSigv4>,
    /// Subject line when the message is delivered to email endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetARN")]
    pub target_arn: Option<String>,
    /// SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicARN")]
    pub topic_arn: Option<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Configures AWS's Signature Verification 4 signing process to sign requests.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsSigv4 {
    /// AccessKey is the AWS API key. If not specified, the environment variable `AWS_ACCESS_KEY_ID` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKey")]
    pub access_key: Option<AlertmanagerConfigReceiversSnsConfigsSigv4AccessKey>,
    /// Profile is the named AWS profile used to authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    /// Region is the AWS region. If blank, the region from the default credentials chain used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// RoleArn is the named AWS profile used to authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// SecretKey is the AWS API secret. If not specified, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKey")]
    pub secret_key: Option<AlertmanagerConfigReceiversSnsConfigsSigv4SecretKey>,
}

/// AccessKey is the AWS API key. If not specified, the environment variable `AWS_ACCESS_KEY_ID` is used.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsSigv4AccessKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKey is the AWS API secret. If not specified, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversSnsConfigsSigv4SecretKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigs {
    /// The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// Telegram bot token. It is mutually exclusive with `botTokenFile`. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. 
    ///  Either `botToken` or `botTokenFile` is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "botToken")]
    pub bot_token: Option<AlertmanagerConfigReceiversTelegramConfigsBotToken>,
    /// File to read the Telegram bot token from. It is mutually exclusive with `botToken`. Either `botToken` or `botTokenFile` is required. 
    ///  It requires Alertmanager >= v0.26.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "botTokenFile")]
    pub bot_token_file: Option<String>,
    /// The Telegram chat ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chatID")]
    pub chat_id: Option<i64>,
    /// Disable telegram notifications
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableNotifications")]
    pub disable_notifications: Option<bool>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfig>,
    /// Message template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Parse mode for telegram message
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseMode")]
    pub parse_mode: Option<AlertmanagerConfigReceiversTelegramConfigsParseMode>,
    /// Whether to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
}

/// Telegram bot token. It is mutually exclusive with `botTokenFile`. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator. 
///  Either `botToken` or `botTokenFile` is required.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsBotToken {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversTelegramConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AlertmanagerConfigReceiversTelegramConfigsParseMode {
    MarkdownV2,
    Markdown,
    #[serde(rename = "HTML")]
    Html,
}

/// VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigs {
    /// The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<AlertmanagerConfigReceiversVictoropsConfigsApiKey>,
    /// The VictorOps API URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiUrl")]
    pub api_url: Option<String>,
    /// Additional custom fields for notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customFields")]
    pub custom_fields: Option<Vec<AlertmanagerConfigReceiversVictoropsConfigsCustomFields>>,
    /// Contains summary of the alerted problem.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityDisplayName")]
    pub entity_display_name: Option<String>,
    /// The HTTP client's configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfig>,
    /// Describes the behavior of the alert (CRITICAL, WARNING, INFO).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageType")]
    pub message_type: Option<String>,
    /// The monitoring tool the state message is from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringTool")]
    pub monitoring_tool: Option<String>,
    /// A key used to map the alert to a team.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingKey")]
    pub routing_key: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// Contains long explanation of the alerted problem.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stateMessage")]
    pub state_message: Option<String>,
}

/// The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsApiKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// KeyValue defines a (key, value) tuple.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsCustomFields {
    /// Key of the tuple.
    pub key: String,
    /// Value of the tuple.
    pub value: String,
}

/// The HTTP client's configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversVictoropsConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// WebexConfig configures notification via Cisco Webex See https://prometheus.io/docs/alerting/latest/configuration/#webex_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigs {
    /// The Webex Teams API URL i.e. https://webexapis.com/v1/messages
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// The HTTP client's configuration. You must use this configuration to supply the bot token as part of the HTTP `Authorization` header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfig>,
    /// Message template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// ID of the Webex Teams room where to send the messages.
    #[serde(rename = "roomID")]
    pub room_id: String,
    /// Whether to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
}

/// The HTTP client's configuration. You must use this configuration to supply the bot token as part of the HTTP `Authorization` header.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebexConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigs {
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfig>,
    /// Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAlerts")]
    pub max_alerts: Option<i32>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    /// The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSecret")]
    pub url_secret: Option<AlertmanagerConfigReceiversWebhookConfigsUrlSecret>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWebhookConfigsUrlSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentID")]
    pub agent_id: Option<String>,
    /// The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiSecret")]
    pub api_secret: Option<AlertmanagerConfigReceiversWechatConfigsApiSecret>,
    /// The WeChat API URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// The corp id for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "corpID")]
    pub corp_id: Option<String>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfig>,
    /// API request data as defined by the WeChat API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageType")]
    pub message_type: Option<String>,
    /// Whether or not to notify about resolved alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sendResolved")]
    pub send_resolved: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toParty")]
    pub to_party: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toTag")]
    pub to_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toUser")]
    pub to_user: Option<String>,
}

/// The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsApiSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfig {
    /// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigAuthorization>,
    /// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuth>,
    /// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigBearerTokenSecret>,
    /// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followRedirects")]
    pub follow_redirects: Option<bool>,
    /// OAuth2 client credentials used to fetch a token for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2>,
    /// Optional proxy URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyURL")]
    pub proxy_url: Option<String>,
    /// TLS configuration for the client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfig>,
}

/// Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigAuthorization {
    /// Selects a key of a Secret in the namespace that contains the credentials for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigAuthorizationCredentials>,
    /// Defines the authentication type. The value is case-insensitive. 
    ///  "Basic" is not a supported value. 
    ///  Default: "Bearer"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Selects a key of a Secret in the namespace that contains the credentials for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigAuthorizationCredentials {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuth {
    /// The secret in the service monitor namespace that contains the password for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuthPassword>,
    /// The secret in the service monitor namespace that contains the username for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuthUsername>,
}

/// The secret in the service monitor namespace that contains the password for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret in the service monitor namespace that contains the username for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// The name of the secret in the object's namespace to select from.
    pub name: String,
}

/// OAuth2 client credentials used to fetch a token for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2 {
    /// The secret or configmap containing the OAuth2 client id
    #[serde(rename = "clientId")]
    pub client_id: AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientId,
    /// The secret containing the OAuth2 client secret
    #[serde(rename = "clientSecret")]
    pub client_secret: AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientSecret,
    /// Parameters to append to the token URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointParams")]
    pub endpoint_params: Option<BTreeMap<String, String>>,
    /// OAuth2 scopes used for the token request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// The URL to fetch the token from
    #[serde(rename = "tokenUrl")]
    pub token_url: String,
}

/// The secret or configmap containing the OAuth2 client id
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientId {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientIdConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientIdSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The secret containing the OAuth2 client secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigOauth2ClientSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// TLS configuration for the client.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfig {
    /// Certificate authority used when verifying server certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCa>,
    /// Client certificate to present when doing client-authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCert>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Certificate authority used when verifying server certificates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Client certificate to present when doing client-authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigReceiversWechatConfigsHttpConfigTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Alertmanager route definition for alerts matching the resource's namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigRoute {
    /// ActiveTimeIntervals is a list of TimeInterval names when this route should be active.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeTimeIntervals")]
    pub active_time_intervals: Option<Vec<String>>,
    /// Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "continue")]
    pub r#continue: Option<bool>,
    /// List of labels to group by. Labels must not be repeated (unique list). Special label "..." (aggregate by all possible labels), if provided, must be the only element in the list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupBy")]
    pub group_by: Option<Vec<String>>,
    /// How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "5m"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupInterval")]
    pub group_interval: Option<String>,
    /// How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "30s"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupWait")]
    pub group_wait: Option<String>,
    /// List of matchers that the alert's labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<AlertmanagerConfigRouteMatchers>>,
    /// Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support self-referential types for now (see https://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of TimeInterval names that will mute this route when matched.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "muteTimeIntervals")]
    pub mute_time_intervals: Option<Vec<String>>,
    /// Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub receiver: Option<String>,
    /// How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "4h"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repeatInterval")]
    pub repeat_interval: Option<String>,
    /// Child routes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<HashMap<String, serde_json::Value>>>,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigRouteMatchers {
    /// Match operator, one of `=` (equal to), `!=` (not equal to), `=~` (regex match) or `!~` (not regex match). Negative operators (`!=` and `!~`) require Alertmanager >= v0.22.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<AlertmanagerConfigRouteMatchersMatchType>,
    /// Label to match.
    pub name: String,
    /// Label value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Matcher defines how to match on alert's labels.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AlertmanagerConfigRouteMatchersMatchType {
    #[serde(rename = "!=")]
    KopiumVariant0,
    #[serde(rename = "=")]
    KopiumVariant1,
    #[serde(rename = "=~")]
    KopiumVariant2,
    #[serde(rename = "!~")]
    KopiumVariant3,
}

/// TimeInterval specifies the periods in time when notifications will be muted or active.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigTimeIntervals {
    /// Name of the time interval.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// TimeIntervals is a list of TimePeriod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeIntervals")]
    pub time_intervals: Option<Vec<AlertmanagerConfigTimeIntervalsTimeIntervals>>,
}

/// TimePeriod describes periods of time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigTimeIntervalsTimeIntervals {
    /// DaysOfMonth is a list of DayOfMonthRange
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daysOfMonth")]
    pub days_of_month: Option<Vec<AlertmanagerConfigTimeIntervalsTimeIntervalsDaysOfMonth>>,
    /// Months is a list of MonthRange
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub months: Option<Vec<String>>,
    /// Times is a list of TimeRange
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub times: Option<Vec<AlertmanagerConfigTimeIntervalsTimeIntervalsTimes>>,
    /// Weekdays is a list of WeekdayRange
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weekdays: Option<Vec<String>>,
    /// Years is a list of YearRange
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub years: Option<Vec<String>>,
}

/// DayOfMonthRange is an inclusive range of days of the month beginning at 1
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigTimeIntervalsTimeIntervalsDaysOfMonth {
    /// End of the inclusive range
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    /// Start of the inclusive range
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

/// TimeRange defines a start and end time in 24hr format
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AlertmanagerConfigTimeIntervalsTimeIntervalsTimes {
    /// EndTime is the end time in 24hr format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    /// StartTime is the start time in 24hr format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

