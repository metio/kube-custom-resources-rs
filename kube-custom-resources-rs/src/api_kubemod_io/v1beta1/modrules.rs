// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubemod/kubemod/api.kubemod.io/v1beta1/modrules.yaml --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ModRuleSpec defines the desired state of ModRule
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "api.kubemod.io", version = "v1beta1", kind = "ModRule", plural = "modrules")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct ModRuleSpec {
    /// AdmissionOperations specifies which admission hook operations this ModRule applies to. Valid values are: - "CREATE" - the rule applies to all matching resources as they are created. - "UPDATE" - the rule applies to all matching resources as they are updated. - "DELETE" - the rule applies to all matching resources as they are deleted. By default, a ModRule applies to all admission operations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "admissionOperations")]
    pub admission_operations: Option<Vec<String>>,
    /// ExecutionTier is a value between -32767 and 32766. ExecutionTier controls when this ModRule will be executed as it relates to the other ModRules loaded in the system. ModRules are matched and executed in tiers, starting with the lowest tier. The results of executing all ModRules in a tier are passed as input to the ModRules in the next tier. This cascading execution continues until the highest tier of ModRules has been executed. ModRules in the same tier are executed in indeterminate order.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionTier")]
    pub execution_tier: Option<i64>,
    /// Match is a list of match items which consist of select queries and expected match values or regular expressions. When all match items for an object are positive, the rule is in effect.
    #[serde(rename = "match")]
    pub r#match: Vec<ModRuleMatch>,
    /// Patch is a list of patch operations to perform on the matching resources at the time of creation. The value part of a patch operation can be a golang template which accepts the resource as its context. This field must be provided for ModRules of type "patch"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<Vec<ModRulePatch>>,
    /// RejectMessage is an optional message displayed when a resource is rejected by a Reject ModRule. The field is a Golang template evaluated in the context of the object being rejected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectMessage")]
    pub reject_message: Option<String>,
    /// TargetNamespaceRegex is optional and only applies to ModRules in "kubemod-system" namespace. Its usage enables cluster-wide matching of namespaced resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNamespaceRegex")]
    pub target_namespace_regex: Option<String>,
    /// Type describes the type of a ModRule. Valid values are: - "Patch" - the rule performs modifications on all the matching resources as they are created. - "Reject" - the rule rejects the creation of all matching resources.
    #[serde(rename = "type")]
    pub r#type: ModRuleType,
}

/// MatchItem represents a single match query.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ModRuleMatch {
    /// MatchFor instructs how to match the results against the match... requirements. Valid values are: - "Any" - the match is considered positive if any of the results of select have a match. - "All" - the match is considered positive only if all of the results of select have a match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFor")]
    pub match_for: Option<ModRuleMatchMatchFor>,
    /// MatchRegex specifies the regular expression to compare the result of Select by. The match is considered positive if at least one of the results of evaluating the select query yields a match when compared to value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchRegex")]
    pub match_regex: Option<String>,
    /// MatchValue specifies the exact value to match the result of Select by. The match is considered positive if at least one of the results of evaluating the select query yields a match when compared to matchValue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchValue")]
    pub match_value: Option<String>,
    /// MatchValues specifies a list of values to match the result of Select by. The match is considered positive if at least one of the results of evaluating the select query yields a match when compared to any of the values in the array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchValues")]
    pub match_values: Option<Vec<String>>,
    /// Negate indicates whether the match result should be to inverted. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub negate: Option<bool>,
    /// Select is a JSONPath query expression: https://goessner.net/articles/JsonPath/ which yields zero or more values. If no match value or regex is specified, if the query yields a non-empty result, the match is considered positive.
    pub select: String,
}

/// MatchItem represents a single match query.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ModRuleMatchMatchFor {
    Any,
    All,
}

/// PatchOperation represents a single JSON Patch operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ModRulePatch {
    /// Operation is the type of JSON Path operation to perform against the target element.
    pub op: ModRulePatchOp,
    /// Path is the JSON path to the target element.
    pub path: String,
    /// Optional JSONPath query expression: https://goessner.net/articles/JsonPath/ used to construct path. A patch operation is created for each result of the query. A placeholder is created for each wildcard and filter in the expression. These placeholders can be used when constructing "path". For example, if select is "$.spec.containers[*].ports[?@.containerPort == 80]" placeholder #0 will point to the index of "containers" and #1 will point to the index of "ports". This allows us to define paths such as "/spec/template/spec/containers/#0/securityContext"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select: Option<String>,
    /// Value is the JSON representation of the modification. The value is a golang template which is evaluated against the context of the target resource. KubeMod performs some analysis of the result of the template evaluation in order to infer its JSON type: - If the value matches the format of a JavaScript number, it is considered to be a number. - If the value matches a boolean literal (true/false), it is considered to be a boolean literal. - If the value matches 'null', it is considered to be null. - If the value is surrounded by double-quotes, it is considered to be a string. - If the value is surrounded by brackets, it is considered to be a JSON array. - If the value is surrounded by curly braces, it is considered to be a JSON object. - If none of the above is true, the value is considered to be a string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// PatchOperation represents a single JSON Patch operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ModRulePatchOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "remove")]
    Remove,
}

/// ModRuleSpec defines the desired state of ModRule
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ModRuleType {
    Patch,
    Reject,
}

/// ModRuleStatus defines the observed state of ModRule
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ModRuleStatus {
}

