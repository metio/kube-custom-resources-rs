// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/projectcontour/contour/projectcontour.io/v1/tlscertificatedelegations.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// TLSCertificateDelegationSpec defines the spec of the CRD
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "projectcontour.io", version = "v1", kind = "TLSCertificateDelegation", plural = "tlscertificatedelegations")]
#[kube(namespaced)]
#[kube(status = "TLSCertificateDelegationStatus")]
#[kube(schema = "disabled")]
pub struct TLSCertificateDelegationSpec {
    pub delegations: Vec<TLSCertificateDelegationDelegations>,
}

/// CertificateDelegation maps the authority to reference a secret
/// in the current namespace to a set of namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSCertificateDelegationDelegations {
    /// required, the name of a secret in the current namespace.
    #[serde(rename = "secretName")]
    pub secret_name: String,
    /// required, the namespaces the authority to reference the
    /// secret will be delegated to.
    /// If TargetNamespaces is nil or empty, the CertificateDelegation'
    /// is ignored. If the TargetNamespace list contains the character, "*"
    /// the secret will be delegated to all namespaces.
    #[serde(rename = "targetNamespaces")]
    pub target_namespaces: Vec<String>,
}

/// TLSCertificateDelegationStatus allows for the status of the delegation
/// to be presented to the user.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSCertificateDelegationStatus {
    /// Conditions contains information about the current status of the HTTPProxy,
    /// in an upstream-friendly container.
    /// Contour will update a single condition, `Valid`, that is in normal-true polarity.
    /// That is, when `currentStatus` is `valid`, the `Valid` condition will be `status: true`,
    /// and vice versa.
    /// Contour will leave untouched any other Conditions set in this block,
    /// in case some other controller wants to add a Condition.
    /// If you are another controller owner and wish to add a condition, you *should*
    /// namespace your condition with a label, like `controller.domain.com\ConditionName`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<TLSCertificateDelegationStatusConditions>>,
}

/// DetailedCondition is an extension of the normal Kubernetes conditions, with two extra
/// fields to hold sub-conditions, which provide more detailed reasons for the state (True or False)
/// of the condition.
/// `errors` holds information about sub-conditions which are fatal to that condition and render its state False.
/// `warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.
/// Remember that Conditions have a type, a status, and a reason.
/// The type is the type of the condition, the most important one in this CRD set is `Valid`.
/// `Valid` is a positive-polarity condition: when it is `status: true` there are no problems.
/// In more detail, `status: true` means that the object is has been ingested into Contour with no errors.
/// `warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`
/// slice in this case.
/// `Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.
/// The details of the errors will be present under the `errors` field. There must be at least one error in the `errors`
/// slice if `status` is `false`.
/// For DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.
/// When they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.
/// When they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.
/// In either case, there may be entries in the `warnings` slice.
/// Regardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason
/// (if there is one and only one entry in total across both the `errors` and `warnings` slices), or
/// `MultipleReasons` if there is more than one entry.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSCertificateDelegationStatusConditions {
    /// Errors contains a slice of relevant error subconditions for this object.
    /// Subconditions are expected to appear when relevant (when there is a error), and disappear when not relevant.
    /// An empty slice here indicates no errors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<TLSCertificateDelegationStatusConditionsErrors>>,
    /// lastTransitionTime is the last time the condition transitioned from one status to another.
    /// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon.
    /// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    /// with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: TLSCertificateDelegationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase.
    /// ---
    /// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
    /// useful (see .node.status.conditions), the ability to deconflict is important.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
    /// Warnings contains a slice of relevant warning subconditions for this object.
    /// Subconditions are expected to appear when relevant (when there is a warning), and disappear when not relevant.
    /// An empty slice here indicates no warnings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<TLSCertificateDelegationStatusConditionsWarnings>>,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSCertificateDelegationStatusConditionsErrors {
    /// Message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// Reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// Status of the condition, one of True, False, Unknown.
    pub status: TLSCertificateDelegationStatusConditionsErrorsStatus,
    /// Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
    /// This must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TLSCertificateDelegationStatusConditionsErrorsStatus {
    True,
    False,
    Unknown,
}

/// DetailedCondition is an extension of the normal Kubernetes conditions, with two extra
/// fields to hold sub-conditions, which provide more detailed reasons for the state (True or False)
/// of the condition.
/// `errors` holds information about sub-conditions which are fatal to that condition and render its state False.
/// `warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.
/// Remember that Conditions have a type, a status, and a reason.
/// The type is the type of the condition, the most important one in this CRD set is `Valid`.
/// `Valid` is a positive-polarity condition: when it is `status: true` there are no problems.
/// In more detail, `status: true` means that the object is has been ingested into Contour with no errors.
/// `warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`
/// slice in this case.
/// `Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.
/// The details of the errors will be present under the `errors` field. There must be at least one error in the `errors`
/// slice if `status` is `false`.
/// For DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.
/// When they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.
/// When they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.
/// In either case, there may be entries in the `warnings` slice.
/// Regardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason
/// (if there is one and only one entry in total across both the `errors` and `warnings` slices), or
/// `MultipleReasons` if there is more than one entry.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TLSCertificateDelegationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSCertificateDelegationStatusConditionsWarnings {
    /// Message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// Reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// Status of the condition, one of True, False, Unknown.
    pub status: TLSCertificateDelegationStatusConditionsWarningsStatus,
    /// Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
    /// This must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TLSCertificateDelegationStatusConditionsWarningsStatus {
    True,
    False,
    Unknown,
}

