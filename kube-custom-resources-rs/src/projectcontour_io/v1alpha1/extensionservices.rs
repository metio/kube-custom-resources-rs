// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/projectcontour/contour/projectcontour.io/v1alpha1/extensionservices.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ExtensionServiceSpec defines the desired state of an ExtensionService resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "projectcontour.io", version = "v1alpha1", kind = "ExtensionService", plural = "extensionservices")]
#[kube(namespaced)]
#[kube(status = "ExtensionServiceStatus")]
#[kube(schema = "disabled")]
pub struct ExtensionServiceSpec {
    /// The policy for load balancing GRPC service requests. Note that the
    /// `Cookie` and `RequestHash` load balancing strategies cannot be used
    /// here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerPolicy")]
    pub load_balancer_policy: Option<ExtensionServiceLoadBalancerPolicy>,
    /// Protocol may be used to specify (or override) the protocol used to reach this Service.
    /// Values may be h2 or h2c. If omitted, protocol-selection falls back on Service annotations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<ExtensionServiceProtocol>,
    /// This field sets the version of the GRPC protocol that Envoy uses to
    /// send requests to the extension service. Since Contour always uses the
    /// v3 Envoy API, this is currently fixed at "v3". However, other
    /// protocol options will be available in future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolVersion")]
    pub protocol_version: Option<ExtensionServiceProtocolVersion>,
    /// Services specifies the set of Kubernetes Service resources that
    /// receive GRPC extension API requests.
    /// If no weights are specified for any of the entries in
    /// this array, traffic will be spread evenly across all the
    /// services.
    /// Otherwise, traffic is balanced proportionally to the
    /// Weight field in each entry.
    pub services: Vec<ExtensionServiceServices>,
    /// The timeout policy for requests to the services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutPolicy")]
    pub timeout_policy: Option<ExtensionServiceTimeoutPolicy>,
    /// UpstreamValidation defines how to verify the backend service's certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<ExtensionServiceValidation>,
}

/// The policy for load balancing GRPC service requests. Note that the
/// `Cookie` and `RequestHash` load balancing strategies cannot be used
/// here.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceLoadBalancerPolicy {
    /// RequestHashPolicies contains a list of hash policies to apply when the
    /// `RequestHash` load balancing strategy is chosen. If an element of the
    /// supplied list of hash policies is invalid, it will be ignored. If the
    /// list of hash policies is empty after validation, the load balancing
    /// strategy will fall back to the default `RoundRobin`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHashPolicies")]
    pub request_hash_policies: Option<Vec<ExtensionServiceLoadBalancerPolicyRequestHashPolicies>>,
    /// Strategy specifies the policy used to balance requests
    /// across the pool of backend pods. Valid policy names are
    /// `Random`, `RoundRobin`, `WeightedLeastRequest`, `Cookie`,
    /// and `RequestHash`. If an unknown strategy name is specified
    /// or no policy is supplied, the default `RoundRobin` policy
    /// is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<String>,
}

/// RequestHashPolicy contains configuration for an individual hash policy
/// on a request attribute.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceLoadBalancerPolicyRequestHashPolicies {
    /// HashSourceIP should be set to true when request source IP hash based
    /// load balancing is desired. It must be the only hash option field set,
    /// otherwise this request hash policy object will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashSourceIP")]
    pub hash_source_ip: Option<bool>,
    /// HeaderHashOptions should be set when request header hash based load
    /// balancing is desired. It must be the only hash option field set,
    /// otherwise this request hash policy object will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerHashOptions")]
    pub header_hash_options: Option<ExtensionServiceLoadBalancerPolicyRequestHashPoliciesHeaderHashOptions>,
    /// QueryParameterHashOptions should be set when request query parameter hash based load
    /// balancing is desired. It must be the only hash option field set,
    /// otherwise this request hash policy object will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameterHashOptions")]
    pub query_parameter_hash_options: Option<ExtensionServiceLoadBalancerPolicyRequestHashPoliciesQueryParameterHashOptions>,
    /// Terminal is a flag that allows for short-circuiting computing of a hash
    /// for a given request. If set to true, and the request attribute specified
    /// in the attribute hash options is present, no further hash policies will
    /// be used to calculate a hash for the request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terminal: Option<bool>,
}

/// HeaderHashOptions should be set when request header hash based load
/// balancing is desired. It must be the only hash option field set,
/// otherwise this request hash policy object will be ignored.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceLoadBalancerPolicyRequestHashPoliciesHeaderHashOptions {
    /// HeaderName is the name of the HTTP request header that will be used to
    /// calculate the hash key. If the header specified is not present on a
    /// request, no hash will be produced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// QueryParameterHashOptions should be set when request query parameter hash based load
/// balancing is desired. It must be the only hash option field set,
/// otherwise this request hash policy object will be ignored.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceLoadBalancerPolicyRequestHashPoliciesQueryParameterHashOptions {
    /// ParameterName is the name of the HTTP request query parameter that will be used to
    /// calculate the hash key. If the query parameter specified is not present on a
    /// request, no hash will be produced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
}

/// ExtensionServiceSpec defines the desired state of an ExtensionService resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ExtensionServiceProtocol {
    #[serde(rename = "h2")]
    H2,
    #[serde(rename = "h2c")]
    H2c,
}

/// ExtensionServiceSpec defines the desired state of an ExtensionService resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ExtensionServiceProtocolVersion {
    #[serde(rename = "v3")]
    V3,
}

/// ExtensionServiceTarget defines an Kubernetes Service to target with
/// extension service traffic.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceServices {
    /// Name is the name of Kubernetes service that will accept service
    /// traffic.
    pub name: String,
    /// Port (defined as Integer) to proxy traffic to since a service can have multiple defined.
    pub port: i64,
    /// Weight defines proportion of traffic to balance to the Kubernetes Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

/// The timeout policy for requests to the services.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceTimeoutPolicy {
    /// Timeout for how long the proxy should wait while there is no activity during single request/response (for HTTP/1.1) or stream (for HTTP/2).
    /// Timeout will not trigger while HTTP/1.1 connection is idle between two consecutive requests.
    /// If not specified, there is no per-route idle timeout, though a connection manager-wide
    /// stream_idle_timeout default of 5m still applies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<String>,
    /// Timeout for how long connection from the proxy to the upstream service is kept when there are no active requests.
    /// If not supplied, Envoy's default value of 1h applies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleConnection")]
    pub idle_connection: Option<String>,
    /// Timeout for receiving a response from the server after processing a request from client.
    /// If not supplied, Envoy's default value of 15s applies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

/// UpstreamValidation defines how to verify the backend service's certificate
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceValidation {
    /// Name or namespaced name of the Kubernetes secret used to validate the certificate presented by the backend.
    /// The secret must contain key named ca.crt.
    /// The name can be optionally prefixed with namespace "namespace/name".
    /// When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret.
    /// Max length should be the actual max possible length of a namespaced name (63 + 253 + 1 = 317)
    #[serde(rename = "caSecret")]
    pub ca_secret: String,
    /// Key which is expected to be present in the 'subjectAltName' of the presented certificate.
    /// Deprecated: migrate to using the plural field subjectNames.
    #[serde(rename = "subjectName")]
    pub subject_name: String,
    /// List of keys, of which at least one is expected to be present in the 'subjectAltName of the
    /// presented certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectNames")]
    pub subject_names: Option<Vec<String>>,
}

/// ExtensionServiceStatus defines the observed state of an
/// ExtensionService resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceStatus {
    /// Conditions contains the current status of the ExtensionService resource.
    /// Contour will update a single condition, `Valid`, that is in normal-true polarity.
    /// Contour will not modify any other Conditions set in this block,
    /// in case some other controller wants to add a Condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ExtensionServiceStatusConditions>>,
}

/// DetailedCondition is an extension of the normal Kubernetes conditions, with two extra
/// fields to hold sub-conditions, which provide more detailed reasons for the state (True or False)
/// of the condition.
/// `errors` holds information about sub-conditions which are fatal to that condition and render its state False.
/// `warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.
/// Remember that Conditions have a type, a status, and a reason.
/// The type is the type of the condition, the most important one in this CRD set is `Valid`.
/// `Valid` is a positive-polarity condition: when it is `status: true` there are no problems.
/// In more detail, `status: true` means that the object is has been ingested into Contour with no errors.
/// `warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`
/// slice in this case.
/// `Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.
/// The details of the errors will be present under the `errors` field. There must be at least one error in the `errors`
/// slice if `status` is `false`.
/// For DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.
/// When they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.
/// When they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.
/// In either case, there may be entries in the `warnings` slice.
/// Regardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason
/// (if there is one and only one entry in total across both the `errors` and `warnings` slices), or
/// `MultipleReasons` if there is more than one entry.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceStatusConditions {
    /// Errors contains a slice of relevant error subconditions for this object.
    /// Subconditions are expected to appear when relevant (when there is a error), and disappear when not relevant.
    /// An empty slice here indicates no errors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<ExtensionServiceStatusConditionsErrors>>,
    /// lastTransitionTime is the last time the condition transitioned from one status to another.
    /// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon.
    /// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    /// with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: ExtensionServiceStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase.
    /// ---
    /// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
    /// useful (see .node.status.conditions), the ability to deconflict is important.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
    /// Warnings contains a slice of relevant warning subconditions for this object.
    /// Subconditions are expected to appear when relevant (when there is a warning), and disappear when not relevant.
    /// An empty slice here indicates no warnings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<ExtensionServiceStatusConditionsWarnings>>,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceStatusConditionsErrors {
    /// Message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// Reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// Status of the condition, one of True, False, Unknown.
    pub status: ExtensionServiceStatusConditionsErrorsStatus,
    /// Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
    /// This must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ExtensionServiceStatusConditionsErrorsStatus {
    True,
    False,
    Unknown,
}

/// DetailedCondition is an extension of the normal Kubernetes conditions, with two extra
/// fields to hold sub-conditions, which provide more detailed reasons for the state (True or False)
/// of the condition.
/// `errors` holds information about sub-conditions which are fatal to that condition and render its state False.
/// `warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.
/// Remember that Conditions have a type, a status, and a reason.
/// The type is the type of the condition, the most important one in this CRD set is `Valid`.
/// `Valid` is a positive-polarity condition: when it is `status: true` there are no problems.
/// In more detail, `status: true` means that the object is has been ingested into Contour with no errors.
/// `warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`
/// slice in this case.
/// `Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.
/// The details of the errors will be present under the `errors` field. There must be at least one error in the `errors`
/// slice if `status` is `false`.
/// For DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.
/// When they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.
/// When they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.
/// In either case, there may be entries in the `warnings` slice.
/// Regardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason
/// (if there is one and only one entry in total across both the `errors` and `warnings` slices), or
/// `MultipleReasons` if there is more than one entry.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ExtensionServiceStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ExtensionServiceStatusConditionsWarnings {
    /// Message is a human readable message indicating details about the transition.
    /// This may be an empty string.
    pub message: String,
    /// Reason contains a programmatic identifier indicating the reason for the condition's last transition.
    /// Producers of specific condition types may define expected values and meanings for this field,
    /// and whether the values are considered a guaranteed API.
    /// The value should be a CamelCase string.
    /// This field may not be empty.
    pub reason: String,
    /// Status of the condition, one of True, False, Unknown.
    pub status: ExtensionServiceStatusConditionsWarningsStatus,
    /// Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
    /// This must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.
    /// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.
/// It contains a subset of the Condition fields.
/// It is intended for warnings and errors, so `type` names should use abnormal-true polarity,
/// that is, they should be of the form "ErrorPresent: true".
/// The expected lifecycle for these errors is that they should only be present when the error or warning is,
/// and should be removed when they are not relevant.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ExtensionServiceStatusConditionsWarningsStatus {
    True,
    False,
    Unknown,
}

