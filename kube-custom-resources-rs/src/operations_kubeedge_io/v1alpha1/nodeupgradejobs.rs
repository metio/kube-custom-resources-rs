// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubeedge/kubeedge/operations.kubeedge.io/v1alpha1/nodeupgradejobs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// Specification of the desired behavior of NodeUpgradeJob.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operations.kubeedge.io", version = "v1alpha1", kind = "NodeUpgradeJob", plural = "nodeupgradejobs")]
#[kube(status = "NodeUpgradeJobStatus")]
#[kube(schema = "disabled")]
pub struct NodeUpgradeJobSpec {
    /// Concurrency specifies the max number of edge nodes that can be upgraded at the same time. The default Concurrency value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Image specifies a container image name, the image contains: keadm and edgecore. keadm is used as upgradetool, to install the new version of edgecore. The image name consists of registry hostname and repository name, if it includes the tag or digest, the tag or digest will be overwritten by Version field above. If the registry hostname is empty, docker.io will be used as default. The default image name is: kubeedge/installation-package.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// LabelSelector is a filter to select member clusters by labels. It must match a node's labels for the NodeUpgradeJob to be operated on that node. Please note that sets of NodeNames and LabelSelector are ORed. Users must set one and can only set one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<NodeUpgradeJobLabelSelector>,
    /// NodeNames is a request to select some specific nodes. If it is non-empty, the upgrade job simply select these edge nodes to do upgrade operation. Please note that sets of NodeNames and LabelSelector are ORed. Users must set one and can only set one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeNames")]
    pub node_names: Option<Vec<String>>,
    /// TimeoutSeconds limits the duration of the node upgrade job. Default to 300. If set to 0, we'll use the default value 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
    /// UpgradeTool is a request to decide use which upgrade tool. If it is empty, the upgrade job simply use default upgrade tool keadm to do upgrade operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeTool")]
    pub upgrade_tool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// LabelSelector is a filter to select member clusters by labels. It must match a node's labels for the NodeUpgradeJob to be operated on that node. Please note that sets of NodeNames and LabelSelector are ORed. Users must set one and can only set one.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUpgradeJobLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<NodeUpgradeJobLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUpgradeJobLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Most recently observed status of the NodeUpgradeJob.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUpgradeJobStatus {
    /// State represents for the state phase of the NodeUpgradeJob. There are three possible state values: "", upgrading and completed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<NodeUpgradeJobStatusState>,
    /// Status contains upgrade Status for each edge node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<Vec<NodeUpgradeJobStatusStatus>>,
}

/// Most recently observed status of the NodeUpgradeJob.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NodeUpgradeJobStatusState {
    #[serde(rename = "upgrading")]
    Upgrading,
    #[serde(rename = "completed")]
    Completed,
}

/// UpgradeStatus stores the status of Upgrade for each edge node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUpgradeJobStatusStatus {
    /// History is the last upgrade result of the edge node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub history: Option<NodeUpgradeJobStatusStatusHistory>,
    /// NodeName is the name of edge node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeName")]
    pub node_name: Option<String>,
    /// State represents for the upgrade state phase of the edge node. There are three possible state values: "", upgrading and completed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<NodeUpgradeJobStatusStatusState>,
}

/// History is the last upgrade result of the edge node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUpgradeJobStatusStatusHistory {
    /// FromVersion is the version which the edge node is upgraded from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromVersion")]
    pub from_version: Option<String>,
    /// HistoryID is to uniquely identify an Upgrade Operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "historyID")]
    pub history_id: Option<String>,
    /// Reason is the error reason of Upgrade failure. If the upgrade is successful, this reason is an empty string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Result represents the result of upgrade.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<NodeUpgradeJobStatusStatusHistoryResult>,
    /// ToVersion is the version which the edge node is upgraded to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toVersion")]
    pub to_version: Option<String>,
    /// UpgradeTime is the time of this Upgrade.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeTime")]
    pub upgrade_time: Option<String>,
}

/// History is the last upgrade result of the edge node.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NodeUpgradeJobStatusStatusHistoryResult {
    #[serde(rename = "upgrade_success")]
    UpgradeSuccess,
    #[serde(rename = "upgrade_failed_rollback_success")]
    UpgradeFailedRollbackSuccess,
    #[serde(rename = "upgrade_failed_rollback_failed")]
    UpgradeFailedRollbackFailed,
}

/// UpgradeStatus stores the status of Upgrade for each edge node.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NodeUpgradeJobStatusStatusState {
    #[serde(rename = "upgrading")]
    Upgrading,
    #[serde(rename = "completed")]
    Completed,
}

