// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/dataprotection.kubeblocks.io/v1alpha1/backuprepos.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// BackupRepoSpec defines the desired state of BackupRepo
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "dataprotection.kubeblocks.io", version = "v1alpha1", kind = "BackupRepo", plural = "backuprepos")]
#[kube(status = "BackupRepoStatus")]
#[kube(schema = "disabled")]
pub struct BackupRepoSpec {
    /// Specifies the access method of the backup repo.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMethod")]
    pub access_method: Option<BackupRepoAccessMethod>,
    /// Non-secret configurations for the storage provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, String>>,
    /// A secret that contains the credentials needed by the storage provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential: Option<BackupRepoCredential>,
    /// The reclaim policy for the PV created by this backup repo.
    #[serde(rename = "pvReclaimPolicy")]
    pub pv_reclaim_policy: BackupRepoPvReclaimPolicy,
    /// The storage provider used by this backup repo.
    #[serde(rename = "storageProviderRef")]
    pub storage_provider_ref: String,
    /// The requested capacity for the PVC created by this backup repo.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeCapacity")]
    pub volume_capacity: Option<IntOrString>,
}

/// BackupRepoSpec defines the desired state of BackupRepo
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BackupRepoAccessMethod {
    Mount,
    Tool,
}

/// A secret that contains the credentials needed by the storage provider.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct BackupRepoCredential {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// BackupRepoSpec defines the desired state of BackupRepo
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BackupRepoPvReclaimPolicy {
    Delete,
    Retain,
}

/// BackupRepoStatus defines the observed state of BackupRepo
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct BackupRepoStatus {
    /// backupPVCName is the name of the PVC used to store backup data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupPVCName")]
    pub backup_pvc_name: Option<String>,
    /// conditions describes the current state of the repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<BackupRepoStatusConditions>>,
    /// generatedCSIDriverSecret references the generated secret used by the CSI driver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedCSIDriverSecret")]
    pub generated_csi_driver_secret: Option<BackupRepoStatusGeneratedCsiDriverSecret>,
    /// generatedStorageClassName indicates the generated storage class name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedStorageClassName")]
    pub generated_storage_class_name: Option<String>,
    /// isDefault indicates whether this backup repo is the default one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// observedGeneration is the latest generation observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Backup repo reconciliation phases. Valid values are PreChecking, Failed, Ready, Deleting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// toolConfigSecretName is the name of the secret containing the configuration for the access tool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolConfigSecretName")]
    pub tool_config_secret_name: Option<String>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct BackupRepoStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: BackupRepoStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BackupRepoStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// generatedCSIDriverSecret references the generated secret used by the CSI driver.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct BackupRepoStatusGeneratedCsiDriverSecret {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

