// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/dataprotection.kubeblocks.io/v1alpha1/actionsets.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// ActionSetSpec defines the desired state of ActionSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "dataprotection.kubeblocks.io", version = "v1alpha1", kind = "ActionSet", plural = "actionsets")]
#[kube(status = "ActionSetStatus")]
#[kube(schema = "disabled")]
pub struct ActionSetSpec {
    /// backup specifies the backup action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backup: Option<ActionSetBackup>,
    /// backupType specifies the backup type, supported values: Full, Continuous. Full means full backup. Incremental means back up data that have changed since the last backup (full or incremental). Differential means back up data that have changed since the last full backup. Continuous will back up the transaction log continuously, the PITR (Point in Time Recovery). can be performed based on the continuous backup and full backup.
    #[serde(rename = "backupType")]
    pub backup_type: String,
    /// List of environment variables to set in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ActionSetEnv>>,
    /// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<ActionSetEnvFrom>>,
    /// restore specifies the restore action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restore: Option<ActionSetRestore>,
}

/// backup specifies the backup action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackup {
    /// backupData specifies the backup data action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupData")]
    pub backup_data: Option<ActionSetBackupBackupData>,
    /// postBackup specifies a hook that should be executed after the backup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postBackup")]
    pub post_backup: Option<Vec<ActionSetBackupPostBackup>>,
    /// preBackup specifies a hook that should be executed before the backup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preBackup")]
    pub pre_backup: Option<Vec<ActionSetBackupPreBackup>>,
}

/// backupData specifies the backup data action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupBackupData {
    /// command specifies the commands to back up the volume data.
    pub command: Vec<String>,
    /// image specifies the image of backup container.
    pub image: String,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetBackupBackupDataOnError>,
    /// runOnTargetPodNode specifies whether to run the job workload on the target pod node. If backup container should mount the target pod's volumes, this field should be set to true. otherwise the target pod's volumes will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOnTargetPodNode")]
    pub run_on_target_pod_node: Option<bool>,
    /// syncProgress specifies whether to sync the backup progress and its interval seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncProgress")]
    pub sync_progress: Option<ActionSetBackupBackupDataSyncProgress>,
}

/// backupData specifies the backup data action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetBackupBackupDataOnError {
    Continue,
    Fail,
}

/// syncProgress specifies whether to sync the backup progress and its interval seconds.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupBackupDataSyncProgress {
    /// enabled specifies whether to sync the backup progress. If enabled, a sidecar container will be created to sync the backup progress to the Backup CR status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// intervalSeconds specifies the interval seconds to sync the backup progress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalSeconds")]
    pub interval_seconds: Option<i32>,
}

/// ActionSpec defines an action that should be executed. Only one of the fields may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPostBackup {
    /// exec specifies the action should be executed by the pod exec API in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ActionSetBackupPostBackupExec>,
    /// job specifies the action should be executed by a Kubernetes Job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<ActionSetBackupPostBackupJob>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPostBackupExec {
    /// Command is the command and arguments to execute.
    pub command: Vec<String>,
    /// container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetBackupPostBackupExecOnError>,
    /// Timeout defines the maximum amount of time should wait for the hook to complete before considering the execution a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetBackupPostBackupExecOnError {
    Continue,
    Fail,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPostBackupJob {
    /// command specifies the commands to back up the volume data.
    pub command: Vec<String>,
    /// image specifies the image of backup container.
    pub image: String,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetBackupPostBackupJobOnError>,
    /// runOnTargetPodNode specifies whether to run the job workload on the target pod node. If backup container should mount the target pod's volumes, this field should be set to true. otherwise the target pod's volumes will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOnTargetPodNode")]
    pub run_on_target_pod_node: Option<bool>,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetBackupPostBackupJobOnError {
    Continue,
    Fail,
}

/// ActionSpec defines an action that should be executed. Only one of the fields may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPreBackup {
    /// exec specifies the action should be executed by the pod exec API in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ActionSetBackupPreBackupExec>,
    /// job specifies the action should be executed by a Kubernetes Job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<ActionSetBackupPreBackupJob>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPreBackupExec {
    /// Command is the command and arguments to execute.
    pub command: Vec<String>,
    /// container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetBackupPreBackupExecOnError>,
    /// Timeout defines the maximum amount of time should wait for the hook to complete before considering the execution a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetBackupPreBackupExecOnError {
    Continue,
    Fail,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetBackupPreBackupJob {
    /// command specifies the commands to back up the volume data.
    pub command: Vec<String>,
    /// image specifies the image of backup container.
    pub image: String,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetBackupPreBackupJobOnError>,
    /// runOnTargetPodNode specifies whether to run the job workload on the target pod node. If backup container should mount the target pod's volumes, this field should be set to true. otherwise the target pod's volumes will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOnTargetPodNode")]
    pub run_on_target_pod_node: Option<bool>,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetBackupPreBackupJobOnError {
    Continue,
    Fail,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ActionSetEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<ActionSetEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<ActionSetEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<ActionSetEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ActionSetEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<ActionSetEnvFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ActionSetEnvFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvFromConfigMapRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetEnvFromSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// restore specifies the restore action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetRestore {
    /// postReady specifies the action to execute after the data is ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postReady")]
    pub post_ready: Option<Vec<ActionSetRestorePostReady>>,
    /// prepareData specifies the action to prepare data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prepareData")]
    pub prepare_data: Option<ActionSetRestorePrepareData>,
}

/// ActionSpec defines an action that should be executed. Only one of the fields may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetRestorePostReady {
    /// exec specifies the action should be executed by the pod exec API in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ActionSetRestorePostReadyExec>,
    /// job specifies the action should be executed by a Kubernetes Job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<ActionSetRestorePostReadyJob>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetRestorePostReadyExec {
    /// Command is the command and arguments to execute.
    pub command: Vec<String>,
    /// container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetRestorePostReadyExecOnError>,
    /// Timeout defines the maximum amount of time should wait for the hook to complete before considering the execution a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// exec specifies the action should be executed by the pod exec API in a container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetRestorePostReadyExecOnError {
    Continue,
    Fail,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetRestorePostReadyJob {
    /// command specifies the commands to back up the volume data.
    pub command: Vec<String>,
    /// image specifies the image of backup container.
    pub image: String,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetRestorePostReadyJobOnError>,
    /// runOnTargetPodNode specifies whether to run the job workload on the target pod node. If backup container should mount the target pod's volumes, this field should be set to true. otherwise the target pod's volumes will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOnTargetPodNode")]
    pub run_on_target_pod_node: Option<bool>,
}

/// job specifies the action should be executed by a Kubernetes Job.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetRestorePostReadyJobOnError {
    Continue,
    Fail,
}

/// prepareData specifies the action to prepare data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetRestorePrepareData {
    /// command specifies the commands to back up the volume data.
    pub command: Vec<String>,
    /// image specifies the image of backup container.
    pub image: String,
    /// OnError specifies how should behave if it encounters an error executing this action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<ActionSetRestorePrepareDataOnError>,
    /// runOnTargetPodNode specifies whether to run the job workload on the target pod node. If backup container should mount the target pod's volumes, this field should be set to true. otherwise the target pod's volumes will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOnTargetPodNode")]
    pub run_on_target_pod_node: Option<bool>,
}

/// prepareData specifies the action to prepare data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetRestorePrepareDataOnError {
    Continue,
    Fail,
}

/// ActionSetStatus defines the observed state of ActionSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ActionSetStatus {
    /// A human-readable message indicating details about why the ActionSet is in this phase.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// generation number
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// phase - in list of [Available,Unavailable]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<ActionSetStatusPhase>,
}

/// ActionSetStatus defines the observed state of ActionSet
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ActionSetStatusPhase {
    Available,
    Unavailable,
}

