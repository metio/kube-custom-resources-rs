// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/3scale/3scale-operator/capabilities.3scale.net/v1beta1/proxyconfigpromotes.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ProxyConfigPromoteSpec defines the desired state of ProxyConfigPromote
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "capabilities.3scale.net", version = "v1beta1", kind = "ProxyConfigPromote", plural = "proxyconfigpromotes")]
#[kube(namespaced)]
#[kube(status = "ProxyConfigPromoteStatus")]
#[kube(schema = "disabled")]
pub struct ProxyConfigPromoteSpec {
    /// deleteCR  deletes this CR when it has successfully completed the promotion
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteCR")]
    pub delete_cr: Option<bool>,
    /// product CR metadata.name
    #[serde(rename = "productCRName")]
    pub product_cr_name: String,
    /// Environment you wish to promote to, if not present defaults to staging and if set to true promotes to production
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub production: Option<bool>,
}

/// ProxyConfigPromoteStatus defines the observed state of ProxyConfigPromote
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ProxyConfigPromoteStatus {
    /// Current state of the activedoc resource. Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ProxyConfigPromoteStatusConditions>>,
    /// The latest Version in production
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestProductionVersion")]
    pub latest_production_version: Option<i64>,
    /// The latest Version in staging
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestStagingVersion")]
    pub latest_staging_version: Option<i64>,
    /// The id of the product that has been promoted
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productId")]
    pub product_id: Option<String>,
}

/// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
///  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ProxyConfigPromoteStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    pub status: String,
    /// ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
    ///  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
    #[serde(rename = "type")]
    pub r#type: String,
}

