// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/3scale/3scale-operator/capabilities.3scale.net/v1alpha1/tenants.yaml --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TenantSpec defines the desired state of Tenant
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "capabilities.3scale.net", version = "v1alpha1", kind = "Tenant", plural = "tenants")]
#[kube(namespaced)]
#[kube(status = "TenantStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TenantSpec {
    pub email: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "financeSupportEmail")]
    pub finance_support_email: Option<String>,
    /// additional parameters, used for Update, as in master portal Api Docs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromEmail")]
    pub from_email: Option<String>,
    /// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    #[serde(rename = "masterCredentialsRef")]
    pub master_credentials_ref: TenantMasterCredentialsRef,
    #[serde(rename = "organizationName")]
    pub organization_name: String,
    /// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    #[serde(rename = "passwordCredentialsRef")]
    pub password_credentials_ref: TenantPasswordCredentialsRef,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteAccessCode")]
    pub site_access_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportEmail")]
    pub support_email: Option<String>,
    #[serde(rename = "systemMasterUrl")]
    pub system_master_url: String,
    /// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    #[serde(rename = "tenantSecretRef")]
    pub tenant_secret_ref: TenantTenantSecretRef,
    pub username: String,
}

/// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TenantMasterCredentialsRef {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TenantPasswordCredentialsRef {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TenantTenantSecretRef {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// TenantStatus defines the observed state of Tenant
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TenantStatus {
    #[serde(rename = "adminId")]
    pub admin_id: i64,
    /// Current state of the tenant resource. Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(rename = "tenantId")]
    pub tenant_id: i64,
}

