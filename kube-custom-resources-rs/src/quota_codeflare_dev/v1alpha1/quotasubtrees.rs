// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/project-codeflare/codeflare-operator/quota.codeflare.dev/v1alpha1/quotasubtrees.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// QuotaSubtreeSpec is the spec for a resource plan
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "quota.codeflare.dev", version = "v1alpha1", kind = "QuotaSubtree", plural = "quotasubtrees")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct QuotaSubtreeSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<QuotaSubtreeChildren>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentNamespace")]
    pub parent_namespace: Option<String>,
}

/// Child is the spec for a QuotaSubtree resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeChildren {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Quota is the spec for a QuotaSubtree resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quotas: Option<QuotaSubtreeChildrenQuotas>,
}

/// Quota is the spec for a QuotaSubtree resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeChildrenQuotas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hardLimit")]
    pub hard_limit: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// QuotaSubtreeStatus is the status for a QuotaSubtree resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeStatus {
    pub children: Vec<QuotaSubtreeStatusChildren>,
    /// ResourceAllocation is the spec for the child status
    #[serde(rename = "totalAllocation")]
    pub total_allocation: QuotaSubtreeStatusTotalAllocation,
}

/// ResourceAllocation is the spec for the child status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeStatusChildren {
    /// ResourceAllocationStatus is the spec for the child resource usage
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allocated: Option<QuotaSubtreeStatusChildrenAllocated>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// ResourceAllocationStatus is the spec for the child resource usage
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeStatusChildrenAllocated {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// ResourceAllocation is the spec for the child status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeStatusTotalAllocation {
    /// ResourceAllocationStatus is the spec for the child resource usage
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allocated: Option<QuotaSubtreeStatusTotalAllocationAllocated>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// ResourceAllocationStatus is the spec for the child resource usage
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QuotaSubtreeStatusTotalAllocationAllocated {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

