// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/external-secrets/external-secrets/external-secrets.io/v1beta1/clustersecretstores.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SecretStoreSpec defines the desired state of SecretStore.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "external-secrets.io", version = "v1beta1", kind = "ClusterSecretStore", plural = "clustersecretstores")]
#[kube(status = "ClusterSecretStoreStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterSecretStoreSpec {
    /// Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ClusterSecretStoreConditions>>,
    /// Used to select the correct ESO controller (think: ingress.ingressClassName)
    /// The ESO controller is instantiated with a specific controller name and filters ES based on this property
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    /// Used to configure the provider. Only one provider may be set
    pub provider: ClusterSecretStoreProvider,
    /// Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refreshInterval")]
    pub refresh_interval: Option<i64>,
    /// Used to configure http retries if failed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retrySettings")]
    pub retry_settings: Option<ClusterSecretStoreRetrySettings>,
}

/// ClusterSecretStoreCondition describes a condition by which to choose namespaces to process ExternalSecrets in
/// for a ClusterSecretStore instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreConditions {
    /// Choose namespaces by using regex matching
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceRegexes")]
    pub namespace_regexes: Option<Vec<String>>,
    /// Choose namespace using a labelSelector
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<ClusterSecretStoreConditionsNamespaceSelector>,
    /// Choose namespaces by name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

/// Choose namespace using a labelSelector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreConditionsNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ClusterSecretStoreConditionsNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreConditionsNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Used to configure the provider. Only one provider may be set
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProvider {
    /// Akeyless configures this store to sync secrets using Akeyless Vault provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub akeyless: Option<ClusterSecretStoreProviderAkeyless>,
    /// Alibaba configures this store to sync secrets using Alibaba Cloud provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alibaba: Option<ClusterSecretStoreProviderAlibaba>,
    /// AWS configures this store to sync secrets using AWS Secret Manager provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ClusterSecretStoreProviderAws>,
    /// AzureKV configures this store to sync secrets using Azure Key Vault provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azurekv: Option<ClusterSecretStoreProviderAzurekv>,
    /// Beyondtrust configures this store to sync secrets using Password Safe provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub beyondtrust: Option<ClusterSecretStoreProviderBeyondtrust>,
    /// BitwardenSecretsManager configures this store to sync secrets using BitwardenSecretsManager provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitwardensecretsmanager: Option<ClusterSecretStoreProviderBitwardensecretsmanager>,
    /// Chef configures this store to sync secrets with chef server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chef: Option<ClusterSecretStoreProviderChef>,
    /// Conjur configures this store to sync secrets using conjur provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conjur: Option<ClusterSecretStoreProviderConjur>,
    /// Delinea DevOps Secrets Vault
    /// https://docs.delinea.com/online-help/products/devops-secrets-vault/current
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delinea: Option<ClusterSecretStoreProviderDelinea>,
    /// Device42 configures this store to sync secrets using the Device42 provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device42: Option<ClusterSecretStoreProviderDevice42>,
    /// Doppler configures this store to sync secrets using the Doppler provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub doppler: Option<ClusterSecretStoreProviderDoppler>,
    /// Fake configures a store with static key/value pairs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fake: Option<ClusterSecretStoreProviderFake>,
    /// Fortanix configures this store to sync secrets using the Fortanix provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fortanix: Option<ClusterSecretStoreProviderFortanix>,
    /// GCPSM configures this store to sync secrets using Google Cloud Platform Secret Manager provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcpsm: Option<ClusterSecretStoreProviderGcpsm>,
    /// GitLab configures this store to sync secrets using GitLab Variables provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ClusterSecretStoreProviderGitlab>,
    /// IBM configures this store to sync secrets using IBM Cloud provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ibm: Option<ClusterSecretStoreProviderIbm>,
    /// Infisical configures this store to sync secrets using the Infisical provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub infisical: Option<ClusterSecretStoreProviderInfisical>,
    /// KeeperSecurity configures this store to sync secrets using the KeeperSecurity provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepersecurity: Option<ClusterSecretStoreProviderKeepersecurity>,
    /// Kubernetes configures this store to sync secrets using a Kubernetes cluster provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<ClusterSecretStoreProviderKubernetes>,
    /// Onboardbase configures this store to sync secrets using the Onboardbase provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub onboardbase: Option<ClusterSecretStoreProviderOnboardbase>,
    /// OnePassword configures this store to sync secrets using the 1Password Cloud provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub onepassword: Option<ClusterSecretStoreProviderOnepassword>,
    /// Oracle configures this store to sync secrets using Oracle Vault provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oracle: Option<ClusterSecretStoreProviderOracle>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passbolt: Option<ClusterSecretStoreProviderPassbolt>,
    /// Configures a store to sync secrets with a Password Depot instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passworddepot: Option<ClusterSecretStoreProviderPassworddepot>,
    /// Pulumi configures this store to sync secrets using the Pulumi provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pulumi: Option<ClusterSecretStoreProviderPulumi>,
    /// Scaleway
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scaleway: Option<ClusterSecretStoreProviderScaleway>,
    /// SecretServer configures this store to sync secrets using SecretServer provider
    /// https://docs.delinea.com/online-help/secret-server/start.htm
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secretserver: Option<ClusterSecretStoreProviderSecretserver>,
    /// Senhasegura configures this store to sync secrets using senhasegura provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub senhasegura: Option<ClusterSecretStoreProviderSenhasegura>,
    /// Vault configures this store to sync secrets using Hashi provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<ClusterSecretStoreProviderVault>,
    /// Webhook configures this store to sync secrets using a generic templated webhook
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<ClusterSecretStoreProviderWebhook>,
    /// YandexCertificateManager configures this store to sync secrets using Yandex Certificate Manager provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yandexcertificatemanager: Option<ClusterSecretStoreProviderYandexcertificatemanager>,
    /// YandexLockbox configures this store to sync secrets using Yandex Lockbox provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yandexlockbox: Option<ClusterSecretStoreProviderYandexlockbox>,
}

/// Akeyless configures this store to sync secrets using Akeyless Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeyless {
    /// Akeyless GW API Url from which the secrets to be fetched from.
    #[serde(rename = "akeylessGWApiURL")]
    pub akeyless_gw_api_url: String,
    /// Auth configures how the operator authenticates with Akeyless.
    #[serde(rename = "authSecretRef")]
    pub auth_secret_ref: ClusterSecretStoreProviderAkeylessAuthSecretRef,
    /// PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used
    /// if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates
    /// are used to validate the TLS connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// The provider for the CA bundle to use to validate Akeyless Gateway certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderAkeylessCaProvider>,
}

/// Auth configures how the operator authenticates with Akeyless.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRef {
    /// Kubernetes authenticates with Akeyless by passing the ServiceAccount
    /// token stored in the named Secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuth")]
    pub kubernetes_auth: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuth>,
    /// Reference to a Secret that contains the details
    /// to authenticate with Akeyless.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRef>,
}

/// Kubernetes authenticates with Akeyless by passing the ServiceAccount
/// token stored in the named Secret resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuth {
    /// the Akeyless Kubernetes auth-method access-id
    #[serde(rename = "accessID")]
    pub access_id: String,
    /// Kubernetes-auth configuration name in Akeyless-Gateway
    #[serde(rename = "k8sConfName")]
    pub k8s_conf_name: String,
    /// Optional secret field containing a Kubernetes ServiceAccount JWT used
    /// for authenticating with Akeyless. If a name is specified without a key,
    /// `token` is the default. If one is not specified, the one bound to
    /// the controller will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuthSecretRef>,
    /// Optional service account field containing the name of a kubernetes ServiceAccount.
    /// If the service account is specified, the service account secret token JWT will be used
    /// for authenticating with Akeyless. If the service account selector is not supplied,
    /// the secretRef will be used instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuthServiceAccountRef>,
}

/// Optional secret field containing a Kubernetes ServiceAccount JWT used
/// for authenticating with Akeyless. If a name is specified without a key,
/// `token` is the default. If one is not specified, the one bound to
/// the controller will be used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuthSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Optional service account field containing the name of a kubernetes ServiceAccount.
/// If the service account is specified, the service account secret token JWT will be used
/// for authenticating with Akeyless. If the service account selector is not supplied,
/// the secretRef will be used instead.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefKubernetesAuthServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Reference to a Secret that contains the details
/// to authenticate with Akeyless.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRef {
    /// The SecretAccessID is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessID")]
    pub access_id: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessId>,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessType")]
    pub access_type: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessType>,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTypeParam")]
    pub access_type_param: Option<ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessTypeParam>,
}

/// The SecretAccessID is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessId {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessType {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessAuthSecretRefSecretRefAccessTypeParam {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The provider for the CA bundle to use to validate Akeyless Gateway certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderAkeylessCaProvider {
    /// The key where the CA certificate can be found in the Secret or ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the object located at the provider type.
    pub name: String,
    /// The namespace the Provider type is in.
    /// Can only be defined when used in a ClusterSecretStore.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The type of provider to use such as "Secret", or "ConfigMap".
    #[serde(rename = "type")]
    pub r#type: ClusterSecretStoreProviderAkeylessCaProviderType,
}

/// The provider for the CA bundle to use to validate Akeyless Gateway certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderAkeylessCaProviderType {
    Secret,
    ConfigMap,
}

/// Alibaba configures this store to sync secrets using Alibaba Cloud provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibaba {
    /// AlibabaAuth contains a secretRef for credentials.
    pub auth: ClusterSecretStoreProviderAlibabaAuth,
    /// Alibaba Region to be used for the provider
    #[serde(rename = "regionID")]
    pub region_id: String,
}

/// AlibabaAuth contains a secretRef for credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibabaAuth {
    /// Authenticate against Alibaba using RRSA.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rrsa: Option<ClusterSecretStoreProviderAlibabaAuthRrsa>,
    /// AlibabaAuthSecretRef holds secret references for Alibaba credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderAlibabaAuthSecretRef>,
}

/// Authenticate against Alibaba using RRSA.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibabaAuthRrsa {
    #[serde(rename = "oidcProviderArn")]
    pub oidc_provider_arn: String,
    #[serde(rename = "oidcTokenFilePath")]
    pub oidc_token_file_path: String,
    #[serde(rename = "roleArn")]
    pub role_arn: String,
    #[serde(rename = "sessionName")]
    pub session_name: String,
}

/// AlibabaAuthSecretRef holds secret references for Alibaba credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibabaAuthSecretRef {
    /// The AccessKeyID is used for authentication
    #[serde(rename = "accessKeyIDSecretRef")]
    pub access_key_id_secret_ref: ClusterSecretStoreProviderAlibabaAuthSecretRefAccessKeyIdSecretRef,
    /// The AccessKeySecret is used for authentication
    #[serde(rename = "accessKeySecretSecretRef")]
    pub access_key_secret_secret_ref: ClusterSecretStoreProviderAlibabaAuthSecretRefAccessKeySecretSecretRef,
}

/// The AccessKeyID is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibabaAuthSecretRefAccessKeyIdSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The AccessKeySecret is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAlibabaAuthSecretRefAccessKeySecretSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWS configures this store to sync secrets using AWS Secret Manager provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderAws {
    /// AdditionalRoles is a chained list of Role ARNs which the provider will sequentially assume before assuming the Role
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRoles")]
    pub additional_roles: Option<Vec<String>>,
    /// Auth defines the information necessary to authenticate against AWS
    /// if not set aws sdk will infer credentials from your environment
    /// see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ClusterSecretStoreProviderAwsAuth>,
    /// AWS External ID set on assumed IAM roles
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    /// Prefix adds a prefix to all retrieved values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// AWS Region to be used for the provider
    pub region: String,
    /// Role is a Role ARN which the provider will assume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// SecretsManager defines how the provider behaves when interacting with AWS SecretsManager
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManager")]
    pub secrets_manager: Option<ClusterSecretStoreProviderAwsSecretsManager>,
    /// Service defines which service should be used to fetch the secrets
    pub service: ClusterSecretStoreProviderAwsService,
    /// AWS STS assume role session tags
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTags")]
    pub session_tags: Option<Vec<ClusterSecretStoreProviderAwsSessionTags>>,
    /// AWS STS assume role transitive session tags. Required when multiple rules are used with the provider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitiveTagKeys")]
    pub transitive_tag_keys: Option<Vec<String>>,
}

/// Auth defines the information necessary to authenticate against AWS
/// if not set aws sdk will infer credentials from your environment
/// see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuth {
    /// Authenticate against AWS using service account tokens.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<ClusterSecretStoreProviderAwsAuthJwt>,
    /// AWSAuthSecretRef holds secret references for AWS credentials
    /// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderAwsAuthSecretRef>,
}

/// Authenticate against AWS using service account tokens.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthJwt {
    /// A reference to a ServiceAccount resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderAwsAuthJwtServiceAccountRef>,
}

/// A reference to a ServiceAccount resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthJwtServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSAuthSecretRef holds secret references for AWS credentials
/// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthSecretRef {
    /// The AccessKeyID is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyIDSecretRef")]
    pub access_key_id_secret_ref: Option<ClusterSecretStoreProviderAwsAuthSecretRefAccessKeyIdSecretRef>,
    /// The SecretAccessKey is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKeySecretRef")]
    pub secret_access_key_secret_ref: Option<ClusterSecretStoreProviderAwsAuthSecretRefSecretAccessKeySecretRef>,
    /// The SessionToken used for authentication
    /// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    /// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTokenSecretRef")]
    pub session_token_secret_ref: Option<ClusterSecretStoreProviderAwsAuthSecretRefSessionTokenSecretRef>,
}

/// The AccessKeyID is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthSecretRefAccessKeyIdSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The SecretAccessKey is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthSecretRefSecretAccessKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The SessionToken used for authentication
/// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
/// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsAuthSecretRefSessionTokenSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretsManager defines how the provider behaves when interacting with AWS SecretsManager
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsSecretsManager {
    /// Specifies whether to delete the secret without any recovery window. You
    /// can't use both this parameter and RecoveryWindowInDays in the same call.
    /// If you don't use either, then by default Secrets Manager uses a 30 day
    /// recovery window.
    /// see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-ForceDeleteWithoutRecovery
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDeleteWithoutRecovery")]
    pub force_delete_without_recovery: Option<bool>,
    /// The number of days from 7 to 30 that Secrets Manager waits before
    /// permanently deleting the secret. You can't use both this parameter and
    /// ForceDeleteWithoutRecovery in the same call. If you don't use either,
    /// then by default Secrets Manager uses a 30 day recovery window.
    /// see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-RecoveryWindowInDays
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoveryWindowInDays")]
    pub recovery_window_in_days: Option<i64>,
}

/// AWS configures this store to sync secrets using AWS Secret Manager provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderAwsService {
    SecretsManager,
    ParameterStore,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAwsSessionTags {
    pub key: String,
    pub value: String,
}

/// AzureKV configures this store to sync secrets using Azure Key Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekv {
    /// Auth configures how the operator authenticates with Azure. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authSecretRef")]
    pub auth_secret_ref: Option<ClusterSecretStoreProviderAzurekvAuthSecretRef>,
    /// Auth type defines how to authenticate to the keyvault service.
    /// Valid values are:
    /// - "ServicePrincipal" (default): Using a service principal (tenantId, clientId, clientSecret)
    /// - "ManagedIdentity": Using Managed Identity assigned to the pod (see aad-pod-identity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<ClusterSecretStoreProviderAzurekvAuthType>,
    /// EnvironmentType specifies the Azure cloud environment endpoints to use for
    /// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
    /// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
    /// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentType")]
    pub environment_type: Option<ClusterSecretStoreProviderAzurekvEnvironmentType>,
    /// If multiple Managed Identity is assigned to the pod, you can select the one to be used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityId")]
    pub identity_id: Option<String>,
    /// ServiceAccountRef specified the service account
    /// that should be used when authenticating with WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderAzurekvServiceAccountRef>,
    /// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    pub tenant_id: Option<String>,
    /// Vault Url from which the secrets to be fetched from.
    #[serde(rename = "vaultUrl")]
    pub vault_url: String,
}

/// Auth configures how the operator authenticates with Azure. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvAuthSecretRef {
    /// The Azure ClientCertificate of the service principle used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<ClusterSecretStoreProviderAzurekvAuthSecretRefClientCertificate>,
    /// The Azure clientId of the service principle or managed identity used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<ClusterSecretStoreProviderAzurekvAuthSecretRefClientId>,
    /// The Azure ClientSecret of the service principle used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<ClusterSecretStoreProviderAzurekvAuthSecretRefClientSecret>,
    /// The Azure tenantId of the managed identity used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    pub tenant_id: Option<ClusterSecretStoreProviderAzurekvAuthSecretRefTenantId>,
}

/// The Azure ClientCertificate of the service principle used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvAuthSecretRefClientCertificate {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The Azure clientId of the service principle or managed identity used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvAuthSecretRefClientId {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The Azure ClientSecret of the service principle used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvAuthSecretRefClientSecret {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The Azure tenantId of the managed identity used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvAuthSecretRefTenantId {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AzureKV configures this store to sync secrets using Azure Key Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderAzurekvAuthType {
    ServicePrincipal,
    ManagedIdentity,
    WorkloadIdentity,
}

/// AzureKV configures this store to sync secrets using Azure Key Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderAzurekvEnvironmentType {
    PublicCloud,
    #[serde(rename = "USGovernmentCloud")]
    UsGovernmentCloud,
    ChinaCloud,
    GermanCloud,
}

/// ServiceAccountRef specified the service account
/// that should be used when authenticating with WorkloadIdentity.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderAzurekvServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Beyondtrust configures this store to sync secrets using Password Safe provider.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrust {
    /// Auth configures how the operator authenticates with Beyondtrust.
    pub auth: ClusterSecretStoreProviderBeyondtrustAuth,
    /// Auth configures how API server works.
    pub server: ClusterSecretStoreProviderBeyondtrustServer,
}

/// Auth configures how the operator authenticates with Beyondtrust.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuth {
    /// Content of the certificate (cert.pem) for use when authenticating with an OAuth client Id using a Client Certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<ClusterSecretStoreProviderBeyondtrustAuthCertificate>,
    /// Certificate private key (key.pem). For use when authenticating with an OAuth client Id
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateKey")]
    pub certificate_key: Option<ClusterSecretStoreProviderBeyondtrustAuthCertificateKey>,
    #[serde(rename = "clientId")]
    pub client_id: ClusterSecretStoreProviderBeyondtrustAuthClientId,
    #[serde(rename = "clientSecret")]
    pub client_secret: ClusterSecretStoreProviderBeyondtrustAuthClientSecret,
}

/// Content of the certificate (cert.pem) for use when authenticating with an OAuth client Id using a Client Certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthCertificate {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderBeyondtrustAuthCertificateSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthCertificateSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Certificate private key (key.pem). For use when authenticating with an OAuth client Id
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthCertificateKey {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderBeyondtrustAuthCertificateKeySecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthCertificateKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthClientId {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderBeyondtrustAuthClientIdSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthClientIdSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthClientSecret {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderBeyondtrustAuthClientSecretSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustAuthClientSecretSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Auth configures how API server works.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBeyondtrustServer {
    #[serde(rename = "apiUrl")]
    pub api_url: String,
    /// Timeout specifies a time limit for requests made by this Client. The timeout includes connection time, any redirects, and reading the response body. Defaults to 45 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTimeOutSeconds")]
    pub client_time_out_seconds: Option<i64>,
    /// The secret retrieval type. SECRET = Secrets Safe (credential, text, file). MANAGED_ACCOUNT = Password Safe account associated with a system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retrievalType")]
    pub retrieval_type: Option<String>,
    /// A character that separates the folder names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(rename = "verifyCA")]
    pub verify_ca: bool,
}

/// BitwardenSecretsManager configures this store to sync secrets using BitwardenSecretsManager provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBitwardensecretsmanager {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiURL")]
    pub api_url: Option<String>,
    /// Auth configures how secret-manager authenticates with a bitwarden machine account instance.
    /// Make sure that the token being used has permissions on the given secret.
    pub auth: ClusterSecretStoreProviderBitwardensecretsmanagerAuth,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitwardenServerSDKURL")]
    pub bitwarden_server_sdkurl: Option<String>,
    /// Base64 encoded certificate for the bitwarden server sdk. The sdk MUST run with HTTPS to make sure no MITM attack
    /// can be performed.
    #[serde(rename = "caBundle")]
    pub ca_bundle: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityURL")]
    pub identity_url: Option<String>,
    /// OrganizationID determines which organization this secret store manages.
    #[serde(rename = "organizationID")]
    pub organization_id: String,
    /// ProjectID determines which project this secret store manages.
    #[serde(rename = "projectID")]
    pub project_id: String,
}

/// Auth configures how secret-manager authenticates with a bitwarden machine account instance.
/// Make sure that the token being used has permissions on the given secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBitwardensecretsmanagerAuth {
    /// BitwardenSecretsManagerSecretRef contains the credential ref to the bitwarden instance.
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderBitwardensecretsmanagerAuthSecretRef,
}

/// BitwardenSecretsManagerSecretRef contains the credential ref to the bitwarden instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBitwardensecretsmanagerAuthSecretRef {
    /// AccessToken used for the bitwarden instance.
    pub credentials: ClusterSecretStoreProviderBitwardensecretsmanagerAuthSecretRefCredentials,
}

/// AccessToken used for the bitwarden instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderBitwardensecretsmanagerAuthSecretRefCredentials {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Chef configures this store to sync secrets with chef server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderChef {
    /// Auth defines the information necessary to authenticate against chef Server
    pub auth: ClusterSecretStoreProviderChefAuth,
    /// ServerURL is the chef server URL used to connect to. If using orgs you should include your org in the url and terminate the url with a "/"
    #[serde(rename = "serverUrl")]
    pub server_url: String,
    /// UserName should be the user ID on the chef server
    pub username: String,
}

/// Auth defines the information necessary to authenticate against chef Server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderChefAuth {
    /// ChefAuthSecretRef holds secret references for chef server login credentials.
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderChefAuthSecretRef,
}

/// ChefAuthSecretRef holds secret references for chef server login credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderChefAuthSecretRef {
    /// SecretKey is the Signing Key in PEM format, used for authentication.
    #[serde(rename = "privateKeySecretRef")]
    pub private_key_secret_ref: ClusterSecretStoreProviderChefAuthSecretRefPrivateKeySecretRef,
}

/// SecretKey is the Signing Key in PEM format, used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderChefAuthSecretRefPrivateKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Conjur configures this store to sync secrets using conjur provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjur {
    pub auth: ClusterSecretStoreProviderConjurAuth,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// Used to provide custom certificate authority (CA) certificates
    /// for a secret store. The CAProvider points to a Secret or ConfigMap resource
    /// that contains a PEM-encoded certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderConjurCaProvider>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apikey: Option<ClusterSecretStoreProviderConjurAuthApikey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<ClusterSecretStoreProviderConjurAuthJwt>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthApikey {
    pub account: String,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "apiKeyRef")]
    pub api_key_ref: ClusterSecretStoreProviderConjurAuthApikeyApiKeyRef,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "userRef")]
    pub user_ref: ClusterSecretStoreProviderConjurAuthApikeyUserRef,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthApikeyApiKeyRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthApikeyUserRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthJwt {
    pub account: String,
    /// Optional HostID for JWT authentication. This may be used depending
    /// on how the Conjur JWT authenticator policy is configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    pub host_id: Option<String>,
    /// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
    /// authenticate with Conjur using the JWT authentication method.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderConjurAuthJwtSecretRef>,
    /// Optional ServiceAccountRef specifies the Kubernetes service account for which to request
    /// a token for with the `TokenRequest` API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderConjurAuthJwtServiceAccountRef>,
    /// The conjur authn jwt webservice id
    #[serde(rename = "serviceID")]
    pub service_id: String,
}

/// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
/// authenticate with Conjur using the JWT authentication method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthJwtSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Optional ServiceAccountRef specifies the Kubernetes service account for which to request
/// a token for with the `TokenRequest` API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderConjurAuthJwtServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Used to provide custom certificate authority (CA) certificates
/// for a secret store. The CAProvider points to a Secret or ConfigMap resource
/// that contains a PEM-encoded certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderConjurCaProvider {
    /// The key where the CA certificate can be found in the Secret or ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the object located at the provider type.
    pub name: String,
    /// The namespace the Provider type is in.
    /// Can only be defined when used in a ClusterSecretStore.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The type of provider to use such as "Secret", or "ConfigMap".
    #[serde(rename = "type")]
    pub r#type: ClusterSecretStoreProviderConjurCaProviderType,
}

/// Used to provide custom certificate authority (CA) certificates
/// for a secret store. The CAProvider points to a Secret or ConfigMap resource
/// that contains a PEM-encoded certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderConjurCaProviderType {
    Secret,
    ConfigMap,
}

/// Delinea DevOps Secrets Vault
/// https://docs.delinea.com/online-help/products/devops-secrets-vault/current
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDelinea {
    /// ClientID is the non-secret part of the credential.
    #[serde(rename = "clientId")]
    pub client_id: ClusterSecretStoreProviderDelineaClientId,
    /// ClientSecret is the secret part of the credential.
    #[serde(rename = "clientSecret")]
    pub client_secret: ClusterSecretStoreProviderDelineaClientSecret,
    /// Tenant is the chosen hostname / site name.
    pub tenant: String,
    /// TLD is based on the server location that was chosen during provisioning.
    /// If unset, defaults to "com".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tld: Option<String>,
    /// URLTemplate
    /// If unset, defaults to "https://%s.secretsvaultcloud.%s/v1/%s%s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlTemplate")]
    pub url_template: Option<String>,
}

/// ClientID is the non-secret part of the credential.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDelineaClientId {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderDelineaClientIdSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDelineaClientIdSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// ClientSecret is the secret part of the credential.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDelineaClientSecret {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderDelineaClientSecretSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDelineaClientSecretSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Device42 configures this store to sync secrets using the Device42 provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDevice42 {
    /// Auth configures how secret-manager authenticates with a Device42 instance.
    pub auth: ClusterSecretStoreProviderDevice42Auth,
    /// URL configures the Device42 instance URL.
    pub host: String,
}

/// Auth configures how secret-manager authenticates with a Device42 instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDevice42Auth {
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderDevice42AuthSecretRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDevice42AuthSecretRef {
    /// Username / Password is used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<ClusterSecretStoreProviderDevice42AuthSecretRefCredentials>,
}

/// Username / Password is used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDevice42AuthSecretRefCredentials {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Doppler configures this store to sync secrets using the Doppler provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDoppler {
    /// Auth configures how the Operator authenticates with the Doppler API
    pub auth: ClusterSecretStoreProviderDopplerAuth,
    /// Doppler config (required if not using a Service Token)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Format enables the downloading of secrets as a file (string)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<ClusterSecretStoreProviderDopplerFormat>,
    /// Environment variable compatible name transforms that change secret names to a different format
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameTransformer")]
    pub name_transformer: Option<ClusterSecretStoreProviderDopplerNameTransformer>,
    /// Doppler project (required if not using a Service Token)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Auth configures how the Operator authenticates with the Doppler API
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDopplerAuth {
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderDopplerAuthSecretRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDopplerAuthSecretRef {
    /// The DopplerToken is used for authentication.
    /// See https://docs.doppler.com/reference/api#authentication for auth token types.
    /// The Key attribute defaults to dopplerToken if not specified.
    #[serde(rename = "dopplerToken")]
    pub doppler_token: ClusterSecretStoreProviderDopplerAuthSecretRefDopplerToken,
}

/// The DopplerToken is used for authentication.
/// See https://docs.doppler.com/reference/api#authentication for auth token types.
/// The Key attribute defaults to dopplerToken if not specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderDopplerAuthSecretRefDopplerToken {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Doppler configures this store to sync secrets using the Doppler provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderDopplerFormat {
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "dotnet-json")]
    DotnetJson,
    #[serde(rename = "env")]
    Env,
    #[serde(rename = "yaml")]
    Yaml,
    #[serde(rename = "docker")]
    Docker,
}

/// Doppler configures this store to sync secrets using the Doppler provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderDopplerNameTransformer {
    #[serde(rename = "upper-camel")]
    UpperCamel,
    #[serde(rename = "camel")]
    Camel,
    #[serde(rename = "lower-snake")]
    LowerSnake,
    #[serde(rename = "tf-var")]
    TfVar,
    #[serde(rename = "dotnet-env")]
    DotnetEnv,
    #[serde(rename = "lower-kebab")]
    LowerKebab,
}

/// Fake configures a store with static key/value pairs
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderFake {
    pub data: Vec<ClusterSecretStoreProviderFakeData>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderFakeData {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Deprecated: ValueMap is deprecated and is intended to be removed in the future, use the `value` field instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueMap")]
    pub value_map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Fortanix configures this store to sync secrets using the Fortanix provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderFortanix {
    /// APIKey is the API token to access SDKMS Applications.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<ClusterSecretStoreProviderFortanixApiKey>,
    /// APIURL is the URL of SDKMS API. Defaults to `sdkms.fortanix.com`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiUrl")]
    pub api_url: Option<String>,
}

/// APIKey is the API token to access SDKMS Applications.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderFortanixApiKey {
    /// SecretRef is a reference to a secret containing the SDKMS API Key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderFortanixApiKeySecretRef>,
}

/// SecretRef is a reference to a secret containing the SDKMS API Key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderFortanixApiKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// GCPSM configures this store to sync secrets using Google Cloud Platform Secret Manager provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsm {
    /// Auth defines the information necessary to authenticate against GCP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ClusterSecretStoreProviderGcpsmAuth>,
    /// Location optionally defines a location for a secret
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// ProjectID project where secret is located
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectID")]
    pub project_id: Option<String>,
}

/// Auth defines the information necessary to authenticate against GCP
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsmAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderGcpsmAuthSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentity")]
    pub workload_identity: Option<ClusterSecretStoreProviderGcpsmAuthWorkloadIdentity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsmAuthSecretRef {
    /// The SecretAccessKey is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKeySecretRef")]
    pub secret_access_key_secret_ref: Option<ClusterSecretStoreProviderGcpsmAuthSecretRefSecretAccessKeySecretRef>,
}

/// The SecretAccessKey is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsmAuthSecretRefSecretAccessKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsmAuthWorkloadIdentity {
    #[serde(rename = "clusterLocation")]
    pub cluster_location: String,
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterProjectID")]
    pub cluster_project_id: Option<String>,
    /// A reference to a ServiceAccount resource.
    #[serde(rename = "serviceAccountRef")]
    pub service_account_ref: ClusterSecretStoreProviderGcpsmAuthWorkloadIdentityServiceAccountRef,
}

/// A reference to a ServiceAccount resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGcpsmAuthWorkloadIdentityServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// GitLab configures this store to sync secrets using GitLab Variables provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGitlab {
    /// Auth configures how secret-manager authenticates with a GitLab instance.
    pub auth: ClusterSecretStoreProviderGitlabAuth,
    /// Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    /// GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIDs")]
    pub group_i_ds: Option<Vec<String>>,
    /// InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritFromGroups")]
    pub inherit_from_groups: Option<bool>,
    /// ProjectID specifies a project where secrets are located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectID")]
    pub project_id: Option<String>,
    /// URL configures the GitLab instance URL. Defaults to https://gitlab.com/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Auth configures how secret-manager authenticates with a GitLab instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGitlabAuth {
    #[serde(rename = "SecretRef")]
    pub secret_ref: ClusterSecretStoreProviderGitlabAuthSecretRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGitlabAuthSecretRef {
    /// AccessToken is used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<ClusterSecretStoreProviderGitlabAuthSecretRefAccessToken>,
}

/// AccessToken is used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderGitlabAuthSecretRefAccessToken {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// IBM configures this store to sync secrets using IBM Cloud provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderIbm {
    /// Auth configures how secret-manager authenticates with the IBM secrets manager.
    pub auth: ClusterSecretStoreProviderIbmAuth,
    /// ServiceURL is the Endpoint URL that is specific to the Secrets Manager service instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceUrl")]
    pub service_url: Option<String>,
}

/// Auth configures how secret-manager authenticates with the IBM secrets manager.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderIbmAuth {
    /// IBM Container-based auth with IAM Trusted Profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerAuth")]
    pub container_auth: Option<ClusterSecretStoreProviderIbmAuthContainerAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderIbmAuthSecretRef>,
}

/// IBM Container-based auth with IAM Trusted Profile.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderIbmAuthContainerAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamEndpoint")]
    pub iam_endpoint: Option<String>,
    /// the IBM Trusted Profile
    pub profile: String,
    /// Location the token is mounted on the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenLocation")]
    pub token_location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderIbmAuthSecretRef {
    /// The SecretAccessKey is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretApiKeySecretRef")]
    pub secret_api_key_secret_ref: Option<ClusterSecretStoreProviderIbmAuthSecretRefSecretApiKeySecretRef>,
}

/// The SecretAccessKey is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderIbmAuthSecretRefSecretApiKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Infisical configures this store to sync secrets using the Infisical provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisical {
    /// Auth configures how the Operator authenticates with the Infisical API
    pub auth: ClusterSecretStoreProviderInfisicalAuth,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAPI")]
    pub host_api: Option<String>,
    #[serde(rename = "secretsScope")]
    pub secrets_scope: ClusterSecretStoreProviderInfisicalSecretsScope,
}

/// Auth configures how the Operator authenticates with the Infisical API
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisicalAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "universalAuthCredentials")]
    pub universal_auth_credentials: Option<ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentials>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentials {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "clientId")]
    pub client_id: ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentialsClientId,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "clientSecret")]
    pub client_secret: ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentialsClientSecret,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentialsClientId {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisicalAuthUniversalAuthCredentialsClientSecret {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderInfisicalSecretsScope {
    #[serde(rename = "environmentSlug")]
    pub environment_slug: String,
    #[serde(rename = "projectSlug")]
    pub project_slug: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsPath")]
    pub secrets_path: Option<String>,
}

/// KeeperSecurity configures this store to sync secrets using the KeeperSecurity provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKeepersecurity {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "authRef")]
    pub auth_ref: ClusterSecretStoreProviderKeepersecurityAuthRef,
    #[serde(rename = "folderID")]
    pub folder_id: String,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKeepersecurityAuthRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Kubernetes configures this store to sync secrets using a Kubernetes cluster provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetes {
    /// Auth configures how secret-manager authenticates with a Kubernetes instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ClusterSecretStoreProviderKubernetesAuth>,
    /// A reference to a secret that contains the auth information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authRef")]
    pub auth_ref: Option<ClusterSecretStoreProviderKubernetesAuthRef>,
    /// Remote namespace to fetch the secrets from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteNamespace")]
    pub remote_namespace: Option<String>,
    /// configures the Kubernetes server Address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<ClusterSecretStoreProviderKubernetesServer>,
}

/// Auth configures how secret-manager authenticates with a Kubernetes instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuth {
    /// has both clientCert and clientKey as secretKeySelector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<ClusterSecretStoreProviderKubernetesAuthCert>,
    /// points to a service account that should be used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<ClusterSecretStoreProviderKubernetesAuthServiceAccount>,
    /// use static token to authenticate with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<ClusterSecretStoreProviderKubernetesAuthToken>,
}

/// has both clientCert and clientKey as secretKeySelector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthCert {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<ClusterSecretStoreProviderKubernetesAuthCertClientCert>,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<ClusterSecretStoreProviderKubernetesAuthCertClientKey>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthCertClientCert {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthCertClientKey {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// points to a service account that should be used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthServiceAccount {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// use static token to authenticate with
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthToken {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ClusterSecretStoreProviderKubernetesAuthTokenBearerToken>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthTokenBearerToken {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a secret that contains the auth information.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesAuthRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// configures the Kubernetes server Address.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesServer {
    /// CABundle is a base64-encoded CA certificate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderKubernetesServerCaProvider>,
    /// configures the Kubernetes server Address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderKubernetesServerCaProvider {
    /// The key where the CA certificate can be found in the Secret or ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the object located at the provider type.
    pub name: String,
    /// The namespace the Provider type is in.
    /// Can only be defined when used in a ClusterSecretStore.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The type of provider to use such as "Secret", or "ConfigMap".
    #[serde(rename = "type")]
    pub r#type: ClusterSecretStoreProviderKubernetesServerCaProviderType,
}

/// see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderKubernetesServerCaProviderType {
    Secret,
    ConfigMap,
}

/// Onboardbase configures this store to sync secrets using the Onboardbase provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnboardbase {
    /// APIHost use this to configure the host url for the API for selfhosted installation, default is https://public.onboardbase.com/api/v1/
    #[serde(rename = "apiHost")]
    pub api_host: String,
    /// Auth configures how the Operator authenticates with the Onboardbase API
    pub auth: ClusterSecretStoreProviderOnboardbaseAuth,
    /// Environment is the name of an environmnent within a project to pull the secrets from
    pub environment: String,
    /// Project is an onboardbase project that the secrets should be pulled from
    pub project: String,
}

/// Auth configures how the Operator authenticates with the Onboardbase API
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnboardbaseAuth {
    /// OnboardbaseAPIKey is the APIKey generated by an admin account.
    /// It is used to recognize and authorize access to a project and environment within onboardbase
    #[serde(rename = "apiKeyRef")]
    pub api_key_ref: ClusterSecretStoreProviderOnboardbaseAuthApiKeyRef,
    /// OnboardbasePasscode is the passcode attached to the API Key
    #[serde(rename = "passcodeRef")]
    pub passcode_ref: ClusterSecretStoreProviderOnboardbaseAuthPasscodeRef,
}

/// OnboardbaseAPIKey is the APIKey generated by an admin account.
/// It is used to recognize and authorize access to a project and environment within onboardbase
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnboardbaseAuthApiKeyRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// OnboardbasePasscode is the passcode attached to the API Key
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnboardbaseAuthPasscodeRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// OnePassword configures this store to sync secrets using the 1Password Cloud provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnepassword {
    /// Auth defines the information necessary to authenticate against OnePassword Connect Server
    pub auth: ClusterSecretStoreProviderOnepasswordAuth,
    /// ConnectHost defines the OnePassword Connect Server to connect to
    #[serde(rename = "connectHost")]
    pub connect_host: String,
    /// Vaults defines which OnePassword vaults to search in which order
    pub vaults: BTreeMap<String, i64>,
}

/// Auth defines the information necessary to authenticate against OnePassword Connect Server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnepasswordAuth {
    /// OnePasswordAuthSecretRef holds secret references for 1Password credentials.
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderOnepasswordAuthSecretRef,
}

/// OnePasswordAuthSecretRef holds secret references for 1Password credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnepasswordAuthSecretRef {
    /// The ConnectToken is used for authentication to a 1Password Connect Server.
    #[serde(rename = "connectTokenSecretRef")]
    pub connect_token_secret_ref: ClusterSecretStoreProviderOnepasswordAuthSecretRefConnectTokenSecretRef,
}

/// The ConnectToken is used for authentication to a 1Password Connect Server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOnepasswordAuthSecretRefConnectTokenSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Oracle configures this store to sync secrets using Oracle Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracle {
    /// Auth configures how secret-manager authenticates with the Oracle Vault.
    /// If empty, use the instance principal, otherwise the user credentials specified in Auth.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ClusterSecretStoreProviderOracleAuth>,
    /// Compartment is the vault compartment OCID.
    /// Required for PushSecret
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compartment: Option<String>,
    /// EncryptionKey is the OCID of the encryption key within the vault.
    /// Required for PushSecret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    pub encryption_key: Option<String>,
    /// The type of principal to use for authentication. If left blank, the Auth struct will
    /// determine the principal type. This optional field must be specified if using
    /// workload identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "principalType")]
    pub principal_type: Option<ClusterSecretStoreProviderOraclePrincipalType>,
    /// Region is the region where vault is located.
    pub region: String,
    /// ServiceAccountRef specified the service account
    /// that should be used when authenticating with WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderOracleServiceAccountRef>,
    /// Vault is the vault's OCID of the specific vault where secret is located.
    pub vault: String,
}

/// Auth configures how secret-manager authenticates with the Oracle Vault.
/// If empty, use the instance principal, otherwise the user credentials specified in Auth.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracleAuth {
    /// SecretRef to pass through sensitive information.
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderOracleAuthSecretRef,
    /// Tenancy is the tenancy OCID where user is located.
    pub tenancy: String,
    /// User is an access OCID specific to the account.
    pub user: String,
}

/// SecretRef to pass through sensitive information.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracleAuthSecretRef {
    /// Fingerprint is the fingerprint of the API private key.
    pub fingerprint: ClusterSecretStoreProviderOracleAuthSecretRefFingerprint,
    /// PrivateKey is the user's API Signing Key in PEM format, used for authentication.
    pub privatekey: ClusterSecretStoreProviderOracleAuthSecretRefPrivatekey,
}

/// Fingerprint is the fingerprint of the API private key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracleAuthSecretRefFingerprint {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// PrivateKey is the user's API Signing Key in PEM format, used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracleAuthSecretRefPrivatekey {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Oracle configures this store to sync secrets using Oracle Vault provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderOraclePrincipalType {
    #[serde(rename = "")]
    KopiumEmpty,
    UserPrincipal,
    InstancePrincipal,
    Workload,
}

/// ServiceAccountRef specified the service account
/// that should be used when authenticating with WorkloadIdentity.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderOracleServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassbolt {
    /// Auth defines the information necessary to authenticate against Passbolt Server
    pub auth: ClusterSecretStoreProviderPassboltAuth,
    /// Host defines the Passbolt Server to connect to
    pub host: String,
}

/// Auth defines the information necessary to authenticate against Passbolt Server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassboltAuth {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ClusterSecretStoreProviderPassboltAuthPasswordSecretRef,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "privateKeySecretRef")]
    pub private_key_secret_ref: ClusterSecretStoreProviderPassboltAuthPrivateKeySecretRef,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassboltAuthPasswordSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassboltAuthPrivateKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Configures a store to sync secrets with a Password Depot instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassworddepot {
    /// Auth configures how secret-manager authenticates with a Password Depot instance.
    pub auth: ClusterSecretStoreProviderPassworddepotAuth,
    /// Database to use as source
    pub database: String,
    /// URL configures the Password Depot instance URL.
    pub host: String,
}

/// Auth configures how secret-manager authenticates with a Password Depot instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassworddepotAuth {
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderPassworddepotAuthSecretRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassworddepotAuthSecretRef {
    /// Username / Password is used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<ClusterSecretStoreProviderPassworddepotAuthSecretRefCredentials>,
}

/// Username / Password is used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPassworddepotAuthSecretRefCredentials {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Pulumi configures this store to sync secrets using the Pulumi provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPulumi {
    /// AccessToken is the access tokens to sign in to the Pulumi Cloud Console.
    #[serde(rename = "accessToken")]
    pub access_token: ClusterSecretStoreProviderPulumiAccessToken,
    /// APIURL is the URL of the Pulumi API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiUrl")]
    pub api_url: Option<String>,
    /// Environment are YAML documents composed of static key-value pairs, programmatic expressions,
    /// dynamically retrieved values from supported providers including all major clouds,
    /// and other Pulumi ESC environments.
    /// To create a new environment, visit https://www.pulumi.com/docs/esc/environments/ for more information.
    pub environment: String,
    /// Organization are a space to collaborate on shared projects and stacks.
    /// To create a new organization, visit https://app.pulumi.com/ and click "New Organization".
    pub organization: String,
}

/// AccessToken is the access tokens to sign in to the Pulumi Cloud Console.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPulumiAccessToken {
    /// SecretRef is a reference to a secret containing the Pulumi API token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderPulumiAccessTokenSecretRef>,
}

/// SecretRef is a reference to a secret containing the Pulumi API token.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderPulumiAccessTokenSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Scaleway
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderScaleway {
    /// AccessKey is the non-secret part of the api key.
    #[serde(rename = "accessKey")]
    pub access_key: ClusterSecretStoreProviderScalewayAccessKey,
    /// APIURL is the url of the api to use. Defaults to https://api.scaleway.com
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiUrl")]
    pub api_url: Option<String>,
    /// ProjectID is the id of your project, which you can find in the console: https://console.scaleway.com/project/settings
    #[serde(rename = "projectId")]
    pub project_id: String,
    /// Region where your secrets are located: https://developers.scaleway.com/en/quickstart/#region-and-zone
    pub region: String,
    /// SecretKey is the non-secret part of the api key.
    #[serde(rename = "secretKey")]
    pub secret_key: ClusterSecretStoreProviderScalewaySecretKey,
}

/// AccessKey is the non-secret part of the api key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderScalewayAccessKey {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderScalewayAccessKeySecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderScalewayAccessKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretKey is the non-secret part of the api key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderScalewaySecretKey {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderScalewaySecretKeySecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderScalewaySecretKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretServer configures this store to sync secrets using SecretServer provider
/// https://docs.delinea.com/online-help/secret-server/start.htm
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSecretserver {
    /// Password is the secret server account password.
    pub password: ClusterSecretStoreProviderSecretserverPassword,
    /// ServerURL
    /// URL to your secret server installation
    #[serde(rename = "serverURL")]
    pub server_url: String,
    /// Username is the secret server account username.
    pub username: ClusterSecretStoreProviderSecretserverUsername,
}

/// Password is the secret server account password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSecretserverPassword {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderSecretserverPasswordSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSecretserverPasswordSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Username is the secret server account username.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSecretserverUsername {
    /// SecretRef references a key in a secret that will be used as value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderSecretserverUsernameSecretRef>,
    /// Value can be specified directly to set a value without using a secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// SecretRef references a key in a secret that will be used as value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSecretserverUsernameSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Senhasegura configures this store to sync secrets using senhasegura provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSenhasegura {
    /// Auth defines parameters to authenticate in senhasegura
    pub auth: ClusterSecretStoreProviderSenhaseguraAuth,
    /// IgnoreSslCertificate defines if SSL certificate must be ignored
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreSslCertificate")]
    pub ignore_ssl_certificate: Option<bool>,
    /// Module defines which senhasegura module should be used to get secrets
    pub module: String,
    /// URL of senhasegura
    pub url: String,
}

/// Auth defines parameters to authenticate in senhasegura
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSenhaseguraAuth {
    #[serde(rename = "clientId")]
    pub client_id: String,
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: ClusterSecretStoreProviderSenhaseguraAuthClientSecretSecretRef,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderSenhaseguraAuthClientSecretSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Vault configures this store to sync secrets using Hashi provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVault {
    /// Auth configures how secret-manager authenticates with the Vault server.
    pub auth: ClusterSecretStoreProviderVaultAuth,
    /// PEM encoded CA bundle used to validate Vault server certificate. Only used
    /// if the Server URL is using HTTPS protocol. This parameter is ignored for
    /// plain HTTP protocol connection. If not set the system root certificates
    /// are used to validate the TLS connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// The provider for the CA bundle to use to validate Vault server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderVaultCaProvider>,
    /// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
    /// leader instead of simply retrying within a loop. This can increase performance if
    /// the option is enabled serverside.
    /// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardInconsistent")]
    pub forward_inconsistent: Option<bool>,
    /// Headers to be added in Vault request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    /// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
    /// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
    /// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Path is the mount path of the Vault KV backend endpoint, e.g:
    /// "secret". The v2 KV secret engine version specific "/data" path suffix
    /// for fetching secrets from Vault is optional and will be appended
    /// if not present in specified path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// ReadYourWrites ensures isolated read-after-write semantics by
    /// providing discovered cluster replication states in each request.
    /// More information about eventual consistency in Vault can be found here
    /// https://www.vaultproject.io/docs/enterprise/consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readYourWrites")]
    pub read_your_writes: Option<bool>,
    /// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
    pub server: String,
    /// The configuration used for client side related TLS communication, when the Vault server
    /// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
    /// This parameter is ignored for plain HTTP protocol connection.
    /// It's worth noting this configuration is different from the "TLS certificates auth method",
    /// which is available under the `auth.cert` section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<ClusterSecretStoreProviderVaultTls>,
    /// Version is the Vault KV secret engine version. This can be either "v1" or
    /// "v2". Version defaults to "v2".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<ClusterSecretStoreProviderVaultVersion>,
}

/// Auth configures how secret-manager authenticates with the Vault server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuth {
    /// AppRole authenticates with Vault using the App Role auth mechanism,
    /// with the role and secret stored in a Kubernetes Secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appRole")]
    pub app_role: Option<ClusterSecretStoreProviderVaultAuthAppRole>,
    /// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
    /// Cert authentication method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<ClusterSecretStoreProviderVaultAuthCert>,
    /// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
    /// AWS IAM authentication method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iam: Option<ClusterSecretStoreProviderVaultAuthIam>,
    /// Jwt authenticates with Vault by passing role and JWT token using the
    /// JWT/OIDC authentication method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<ClusterSecretStoreProviderVaultAuthJwt>,
    /// Kubernetes authenticates with Vault by passing the ServiceAccount
    /// token stored in the named Secret resource to the Vault server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<ClusterSecretStoreProviderVaultAuthKubernetes>,
    /// Ldap authenticates with Vault by passing username/password pair using
    /// the LDAP authentication method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ldap: Option<ClusterSecretStoreProviderVaultAuthLdap>,
    /// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
    /// Namespaces is a set of features within Vault Enterprise that allows
    /// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
    /// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    /// This will default to Vault.Namespace field if set, or empty otherwise
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// TokenSecretRef authenticates with Vault by presenting a token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSecretRef")]
    pub token_secret_ref: Option<ClusterSecretStoreProviderVaultAuthTokenSecretRef>,
    /// UserPass authenticates with Vault by passing username/password pair
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPass")]
    pub user_pass: Option<ClusterSecretStoreProviderVaultAuthUserPass>,
}

/// AppRole authenticates with Vault using the App Role auth mechanism,
/// with the role and secret stored in a Kubernetes Secret resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthAppRole {
    /// Path where the App Role authentication backend is mounted
    /// in Vault, e.g: "approle"
    pub path: String,
    /// RoleID configured in the App Role authentication backend when setting
    /// up the authentication backend in Vault.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleId")]
    pub role_id: Option<String>,
    /// Reference to a key in a Secret that contains the App Role ID used
    /// to authenticate with Vault.
    /// The `key` field must be specified and denotes which entry within the Secret
    /// resource is used as the app role id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleRef")]
    pub role_ref: Option<ClusterSecretStoreProviderVaultAuthAppRoleRoleRef>,
    /// Reference to a key in a Secret that contains the App Role secret used
    /// to authenticate with Vault.
    /// The `key` field must be specified and denotes which entry within the Secret
    /// resource is used as the app role secret.
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderVaultAuthAppRoleSecretRef,
}

/// Reference to a key in a Secret that contains the App Role ID used
/// to authenticate with Vault.
/// The `key` field must be specified and denotes which entry within the Secret
/// resource is used as the app role id.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthAppRoleRoleRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Reference to a key in a Secret that contains the App Role secret used
/// to authenticate with Vault.
/// The `key` field must be specified and denotes which entry within the Secret
/// resource is used as the app role secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthAppRoleSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
/// Cert authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthCert {
    /// ClientCert is a certificate to authenticate using the Cert Vault
    /// authentication method
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<ClusterSecretStoreProviderVaultAuthCertClientCert>,
    /// SecretRef to a key in a Secret resource containing client private key to
    /// authenticate with Vault using the Cert authentication method
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthCertSecretRef>,
}

/// ClientCert is a certificate to authenticate using the Cert Vault
/// authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthCertClientCert {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SecretRef to a key in a Secret resource containing client private key to
/// authenticate with Vault using the Cert authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthCertSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
/// AWS IAM authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIam {
    /// AWS External ID set on assumed IAM roles
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    /// Specify a service account with IRSA enabled
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<ClusterSecretStoreProviderVaultAuthIamJwt>,
    /// Path where the AWS auth method is enabled in Vault, e.g: "aws"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// AWS region
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// This is the AWS role to be assumed before talking to vault
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Specify credentials in a Secret object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthIamSecretRef>,
    /// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vaultAwsIamServerID")]
    pub vault_aws_iam_server_id: Option<String>,
    /// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
    #[serde(rename = "vaultRole")]
    pub vault_role: String,
}

/// Specify a service account with IRSA enabled
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamJwt {
    /// A reference to a ServiceAccount resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderVaultAuthIamJwtServiceAccountRef>,
}

/// A reference to a ServiceAccount resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamJwtServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Specify credentials in a Secret object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamSecretRef {
    /// The AccessKeyID is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyIDSecretRef")]
    pub access_key_id_secret_ref: Option<ClusterSecretStoreProviderVaultAuthIamSecretRefAccessKeyIdSecretRef>,
    /// The SecretAccessKey is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKeySecretRef")]
    pub secret_access_key_secret_ref: Option<ClusterSecretStoreProviderVaultAuthIamSecretRefSecretAccessKeySecretRef>,
    /// The SessionToken used for authentication
    /// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    /// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTokenSecretRef")]
    pub session_token_secret_ref: Option<ClusterSecretStoreProviderVaultAuthIamSecretRefSessionTokenSecretRef>,
}

/// The AccessKeyID is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamSecretRefAccessKeyIdSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The SecretAccessKey is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamSecretRefSecretAccessKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The SessionToken used for authentication
/// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
/// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthIamSecretRefSessionTokenSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Jwt authenticates with Vault by passing role and JWT token using the
/// JWT/OIDC authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthJwt {
    /// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
    /// a token for with the `TokenRequest` API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesServiceAccountToken")]
    pub kubernetes_service_account_token: Option<ClusterSecretStoreProviderVaultAuthJwtKubernetesServiceAccountToken>,
    /// Path where the JWT authentication backend is mounted
    /// in Vault, e.g: "jwt"
    pub path: String,
    /// Role is a JWT role to authenticate using the JWT/OIDC Vault
    /// authentication method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
    /// authenticate with Vault using the JWT/OIDC authentication method.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthJwtSecretRef>,
}

/// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
/// a token for with the `TokenRequest` API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthJwtKubernetesServiceAccountToken {
    /// Optional audiences field that will be used to request a temporary Kubernetes service
    /// account token for the service account referenced by `serviceAccountRef`.
    /// Defaults to a single audience `vault` it not specified.
    /// Deprecated: use serviceAccountRef.Audiences instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// Optional expiration time in seconds that will be used to request a temporary
    /// Kubernetes service account token for the service account referenced by
    /// `serviceAccountRef`.
    /// Deprecated: this will be removed in the future.
    /// Defaults to 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    /// Service account field containing the name of a kubernetes ServiceAccount.
    #[serde(rename = "serviceAccountRef")]
    pub service_account_ref: ClusterSecretStoreProviderVaultAuthJwtKubernetesServiceAccountTokenServiceAccountRef,
}

/// Service account field containing the name of a kubernetes ServiceAccount.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
/// authenticate with Vault using the JWT/OIDC authentication method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthJwtSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Kubernetes authenticates with Vault by passing the ServiceAccount
/// token stored in the named Secret resource to the Vault server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthKubernetes {
    /// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
    /// "kubernetes"
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// A required field containing the Vault Role to assume. A Role binds a
    /// Kubernetes ServiceAccount with a set of Vault policies.
    pub role: String,
    /// Optional secret field containing a Kubernetes ServiceAccount JWT used
    /// for authenticating with Vault. If a name is specified without a key,
    /// `token` is the default. If one is not specified, the one bound to
    /// the controller will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthKubernetesSecretRef>,
    /// Optional service account field containing the name of a kubernetes ServiceAccount.
    /// If the service account is specified, the service account secret token JWT will be used
    /// for authenticating with Vault. If the service account selector is not supplied,
    /// the secretRef will be used instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<ClusterSecretStoreProviderVaultAuthKubernetesServiceAccountRef>,
}

/// Optional secret field containing a Kubernetes ServiceAccount JWT used
/// for authenticating with Vault. If a name is specified without a key,
/// `token` is the default. If one is not specified, the one bound to
/// the controller will be used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthKubernetesSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Optional service account field containing the name of a kubernetes ServiceAccount.
/// If the service account is specified, the service account secret token JWT will be used
/// for authenticating with Vault. If the service account selector is not supplied,
/// the secretRef will be used instead.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthKubernetesServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Ldap authenticates with Vault by passing username/password pair using
/// the LDAP authentication method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthLdap {
    /// Path where the LDAP authentication backend is mounted
    /// in Vault, e.g: "ldap"
    pub path: String,
    /// SecretRef to a key in a Secret resource containing password for the LDAP
    /// user used to authenticate with Vault using the LDAP authentication
    /// method
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthLdapSecretRef>,
    /// Username is a LDAP user name used to authenticate using the LDAP Vault
    /// authentication method
    pub username: String,
}

/// SecretRef to a key in a Secret resource containing password for the LDAP
/// user used to authenticate with Vault using the LDAP authentication
/// method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthLdapSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// TokenSecretRef authenticates with Vault by presenting a token.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthTokenSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// UserPass authenticates with Vault by passing username/password pair
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthUserPass {
    /// Path where the UserPassword authentication backend is mounted
    /// in Vault, e.g: "user"
    pub path: String,
    /// SecretRef to a key in a Secret resource containing password for the
    /// user used to authenticate with Vault using the UserPass authentication
    /// method
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ClusterSecretStoreProviderVaultAuthUserPassSecretRef>,
    /// Username is a user name used to authenticate using the UserPass Vault
    /// authentication method
    pub username: String,
}

/// SecretRef to a key in a Secret resource containing password for the
/// user used to authenticate with Vault using the UserPass authentication
/// method
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultAuthUserPassSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The provider for the CA bundle to use to validate Vault server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderVaultCaProvider {
    /// The key where the CA certificate can be found in the Secret or ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the object located at the provider type.
    pub name: String,
    /// The namespace the Provider type is in.
    /// Can only be defined when used in a ClusterSecretStore.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The type of provider to use such as "Secret", or "ConfigMap".
    #[serde(rename = "type")]
    pub r#type: ClusterSecretStoreProviderVaultCaProviderType,
}

/// The provider for the CA bundle to use to validate Vault server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderVaultCaProviderType {
    Secret,
    ConfigMap,
}

/// The configuration used for client side related TLS communication, when the Vault server
/// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
/// This parameter is ignored for plain HTTP protocol connection.
/// It's worth noting this configuration is different from the "TLS certificates auth method",
/// which is available under the `auth.cert` section.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultTls {
    /// CertSecretRef is a certificate added to the transport layer
    /// when communicating with the Vault server.
    /// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<ClusterSecretStoreProviderVaultTlsCertSecretRef>,
    /// KeySecretRef to a key in a Secret resource containing client private key
    /// added to the transport layer when communicating with the Vault server.
    /// If no key for the Secret is specified, external-secret will default to 'tls.key'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecretRef")]
    pub key_secret_ref: Option<ClusterSecretStoreProviderVaultTlsKeySecretRef>,
}

/// CertSecretRef is a certificate added to the transport layer
/// when communicating with the Vault server.
/// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultTlsCertSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// KeySecretRef to a key in a Secret resource containing client private key
/// added to the transport layer when communicating with the Vault server.
/// If no key for the Secret is specified, external-secret will default to 'tls.key'.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderVaultTlsKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Vault configures this store to sync secrets using Hashi provider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderVaultVersion {
    #[serde(rename = "v1")]
    V1,
    #[serde(rename = "v2")]
    V2,
}

/// Webhook configures this store to sync secrets using a generic templated webhook
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderWebhook {
    /// Body
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// PEM encoded CA bundle used to validate webhook server certificate. Only used
    /// if the Server URL is using HTTPS protocol. This parameter is ignored for
    /// plain HTTP protocol connection. If not set the system root certificates
    /// are used to validate the TLS connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// The provider for the CA bundle to use to validate webhook server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderWebhookCaProvider>,
    /// Headers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    /// Webhook Method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Result formatting
    pub result: ClusterSecretStoreProviderWebhookResult,
    /// Secrets to fill in templates
    /// These secrets will be passed to the templating function as key value pairs under the given name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<ClusterSecretStoreProviderWebhookSecrets>>,
    /// Timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// Webhook url to call
    pub url: String,
}

/// The provider for the CA bundle to use to validate webhook server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSecretStoreProviderWebhookCaProvider {
    /// The key the value inside of the provider type to use, only used with "Secret" type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the object located at the provider type.
    pub name: String,
    /// The namespace the Provider type is in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The type of provider to use such as "Secret", or "ConfigMap".
    #[serde(rename = "type")]
    pub r#type: ClusterSecretStoreProviderWebhookCaProviderType,
}

/// The provider for the CA bundle to use to validate webhook server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSecretStoreProviderWebhookCaProviderType {
    Secret,
    ConfigMap,
}

/// Result formatting
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderWebhookResult {
    /// Json path of return value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderWebhookSecrets {
    /// Name of this secret in templates
    pub name: String,
    /// Secret ref to fill in credentials
    #[serde(rename = "secretRef")]
    pub secret_ref: ClusterSecretStoreProviderWebhookSecretsSecretRef,
}

/// Secret ref to fill in credentials
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderWebhookSecretsSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// YandexCertificateManager configures this store to sync secrets using Yandex Certificate Manager provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexcertificatemanager {
    /// Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiEndpoint")]
    pub api_endpoint: Option<String>,
    /// Auth defines the information necessary to authenticate against Yandex Certificate Manager
    pub auth: ClusterSecretStoreProviderYandexcertificatemanagerAuth,
    /// The provider for the CA bundle to use to validate Yandex.Cloud server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderYandexcertificatemanagerCaProvider>,
}

/// Auth defines the information necessary to authenticate against Yandex Certificate Manager
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexcertificatemanagerAuth {
    /// The authorized key used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedKeySecretRef")]
    pub authorized_key_secret_ref: Option<ClusterSecretStoreProviderYandexcertificatemanagerAuthAuthorizedKeySecretRef>,
}

/// The authorized key used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexcertificatemanagerAuthAuthorizedKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The provider for the CA bundle to use to validate Yandex.Cloud server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexcertificatemanagerCaProvider {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<ClusterSecretStoreProviderYandexcertificatemanagerCaProviderCertSecretRef>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexcertificatemanagerCaProviderCertSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// YandexLockbox configures this store to sync secrets using Yandex Lockbox provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexlockbox {
    /// Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiEndpoint")]
    pub api_endpoint: Option<String>,
    /// Auth defines the information necessary to authenticate against Yandex Lockbox
    pub auth: ClusterSecretStoreProviderYandexlockboxAuth,
    /// The provider for the CA bundle to use to validate Yandex.Cloud server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<ClusterSecretStoreProviderYandexlockboxCaProvider>,
}

/// Auth defines the information necessary to authenticate against Yandex Lockbox
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexlockboxAuth {
    /// The authorized key used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedKeySecretRef")]
    pub authorized_key_secret_ref: Option<ClusterSecretStoreProviderYandexlockboxAuthAuthorizedKeySecretRef>,
}

/// The authorized key used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexlockboxAuthAuthorizedKeySecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The provider for the CA bundle to use to validate Yandex.Cloud server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexlockboxCaProvider {
    /// A reference to a specific 'key' within a Secret resource,
    /// In some instances, `key` is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<ClusterSecretStoreProviderYandexlockboxCaProviderCertSecretRef>,
}

/// A reference to a specific 'key' within a Secret resource,
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreProviderYandexlockboxCaProviderCertSecretRef {
    /// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
    /// defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
    /// to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Used to configure http retries if failed
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreRetrySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// SecretStoreStatus defines the observed state of the SecretStore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterSecretStoreStatus {
    /// SecretStoreCapabilities defines the possible operations a SecretStore can do.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

