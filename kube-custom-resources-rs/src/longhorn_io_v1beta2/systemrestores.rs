// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/longhorn/longhorn/longhorn.io/v1beta2/systemrestores.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// SystemRestoreSpec defines the desired state of the Longhorn SystemRestore
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "longhorn.io", version = "v1beta2", kind = "SystemRestore", plural = "systemrestores")]
#[kube(namespaced)]
#[kube(status = "SystemRestoreStatus")]
#[kube(schema = "disabled")]
pub struct SystemRestoreSpec {
    /// The system backup name in the object store.
    #[serde(rename = "systemBackup")]
    pub system_backup: String,
}

/// SystemRestoreStatus defines the observed state of the Longhorn SystemRestore
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SystemRestoreStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<SystemRestoreStatusConditions>>,
    /// The node ID of the responsible controller to reconcile this SystemRestore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerID")]
    pub owner_id: Option<String>,
    /// The source system backup URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceURL")]
    pub source_url: Option<String>,
    /// The system restore state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SystemRestoreStatusConditions {
    /// Last time we probed the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status is the status of the condition. Can be True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

