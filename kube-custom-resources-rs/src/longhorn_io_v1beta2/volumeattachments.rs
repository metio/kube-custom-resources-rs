// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/longhorn/longhorn/longhorn.io/v1beta2/volumeattachments.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// VolumeAttachmentSpec defines the desired state of Longhorn VolumeAttachment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "longhorn.io", version = "v1beta2", kind = "VolumeAttachment", plural = "volumeattachments")]
#[kube(namespaced)]
#[kube(status = "VolumeAttachmentStatus")]
#[kube(schema = "disabled")]
pub struct VolumeAttachmentSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentTickets")]
    pub attachment_tickets: Option<BTreeMap<String, VolumeAttachmentAttachmentTickets>>,
    /// The name of Longhorn volume of this VolumeAttachment
    pub volume: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VolumeAttachmentAttachmentTickets {
    /// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    /// The unique ID of this attachment. Used to differentiate different attachments of the same volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The node that this attachment is requesting
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeID")]
    pub node_id: Option<String>,
    /// Optional additional parameter for this attachment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// VolumeAttachmentStatus defines the observed state of Longhorn VolumeAttachment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VolumeAttachmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentTicketStatuses")]
    pub attachment_ticket_statuses: Option<BTreeMap<String, VolumeAttachmentStatusAttachmentTicketStatuses>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VolumeAttachmentStatusAttachmentTicketStatuses {
    /// Record any error when trying to fulfill this attachment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<VolumeAttachmentStatusAttachmentTicketStatusesConditions>>,
    /// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    /// The unique ID of this attachment. Used to differentiate different attachments of the same volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Indicate whether this attachment ticket has been satisfied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub satisfied: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VolumeAttachmentStatusAttachmentTicketStatusesConditions {
    /// Last time we probed the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status is the status of the condition. Can be True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

