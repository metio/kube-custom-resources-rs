// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/longhorn/longhorn/longhorn.io/v1beta2/nodes.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// NodeSpec defines the desired state of the Longhorn node
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "longhorn.io", version = "v1beta2", kind = "Node", plural = "nodes")]
#[kube(namespaced)]
#[kube(status = "NodeStatus")]
#[kube(schema = "disabled")]
pub struct NodeSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowScheduling")]
    pub allow_scheduling: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disks: Option<BTreeMap<String, NodeDisks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evictionRequested")]
    pub eviction_requested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceManagerCPURequest")]
    pub instance_manager_cpu_request: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeDisks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowScheduling")]
    pub allow_scheduling: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<NodeDisksDiskType>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evictionRequested")]
    pub eviction_requested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageReserved")]
    pub storage_reserved: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NodeDisksDiskType {
    #[serde(rename = "filesystem")]
    Filesystem,
    #[serde(rename = "block")]
    Block,
}

/// NodeStatus defines the observed state of the Longhorn node
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<NodeStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskStatus")]
    pub disk_status: Option<BTreeMap<String, NodeStatusDiskStatus>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCheckStatus")]
    pub snapshot_check_status: Option<NodeStatusSnapshotCheckStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeStatusConditions {
    /// Last time we probed the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status is the status of the condition. Can be True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeStatusDiskStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<NodeStatusDiskStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskUUID")]
    pub disk_uuid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduledReplica")]
    pub scheduled_replica: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageAvailable")]
    pub storage_available: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMaximum")]
    pub storage_maximum: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageScheduled")]
    pub storage_scheduled: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeStatusDiskStatusConditions {
    /// Last time we probed the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status is the status of the condition. Can be True, False, Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type is the type of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeStatusSnapshotCheckStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastPeriodicCheckedAt")]
    pub last_periodic_checked_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCheckState")]
    pub snapshot_check_state: Option<String>,
}

