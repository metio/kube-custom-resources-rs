// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/Alvearie/imaging-ingestion/imaging-ingestion.alvearie.org/v1alpha1/dimseproxies.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// DimseProxySpec defines the desired state of DimseProxy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "imaging-ingestion.alvearie.org", version = "v1alpha1", kind = "DimseProxy", plural = "dimseproxies")]
#[kube(namespaced)]
#[kube(status = "DimseProxyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DimseProxySpec {
    /// Application Entity Title
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationEntityTitle")]
    pub application_entity_title: Option<String>,
    /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Image Pull Secrets
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<DimseProxyImagePullSecrets>>,
    /// Make NATS Connection Secure
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natsSecure")]
    pub nats_secure: Option<bool>,
    /// NATS Subject Channel to use
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natsSubjectChannel")]
    pub nats_subject_channel: Option<String>,
    /// NATS Subject Root
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natsSubjectRoot")]
    pub nats_subject_root: Option<String>,
    /// NATS Token Secret Name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natsTokenSecret")]
    pub nats_token_secret: Option<String>,
    /// NATS URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natsUrl")]
    pub nats_url: Option<String>,
    /// DIMSE Proxy Spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<DimseProxyProxy>,
    /// Target Dimse Host
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDimseHost")]
    pub target_dimse_host: Option<String>,
    /// Target Dimse Port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDimsePort")]
    pub target_dimse_port: Option<i64>,
}

/// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DimseProxyImagePullSecrets {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// DIMSE Proxy Spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DimseProxyProxy {
    /// Image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
}

/// DimseProxyStatus defines the observed state of DimseProxy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DimseProxyStatus {
    /// Human-readable message indicating details about current operator phase or error
    pub message: String,
    /// Current phase of the operator
    pub phase: String,
    /// True if all resources are in a ready state and all work is done
    pub ready: bool,
    /// A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryResources")]
    pub secondary_resources: Option<BTreeMap<String, String>>,
}

