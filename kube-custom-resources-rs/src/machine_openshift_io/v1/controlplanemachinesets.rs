// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/machine.openshift.io/v1/controlplanemachinesets.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// ControlPlaneMachineSet represents the configuration of the ControlPlaneMachineSet.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "machine.openshift.io", version = "v1", kind = "ControlPlaneMachineSet", plural = "controlplanemachinesets")]
#[kube(namespaced)]
#[kube(status = "ControlPlaneMachineSetStatus")]
#[kube(schema = "disabled")]
pub struct ControlPlaneMachineSetSpec {
    /// Replicas defines how many Control Plane Machines should be created by this ControlPlaneMachineSet. This field is immutable and cannot be changed after cluster installation. The ControlPlaneMachineSet only operates with 3 or 5 node control planes, 3 and 5 are the only valid values for this field.
    pub replicas: i32,
    /// Label selector for Machines. Existing Machines selected by this selector will be the ones affected by this ControlPlaneMachineSet. It must match the template's labels. This field is considered immutable after creation of the resource.
    pub selector: ControlPlaneMachineSetSelector,
    /// State defines whether the ControlPlaneMachineSet is Active or Inactive. When Inactive, the ControlPlaneMachineSet will not take any action on the state of the Machines within the cluster. When Active, the ControlPlaneMachineSet will reconcile the Machines and will update the Machines as necessary. Once Active, a ControlPlaneMachineSet cannot be made Inactive. To prevent further action please remove the ControlPlaneMachineSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<ControlPlaneMachineSetState>,
    /// Strategy defines how the ControlPlaneMachineSet will update Machines when it detects a change to the ProviderSpec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<ControlPlaneMachineSetStrategy>,
    /// Template describes the Control Plane Machines that will be created by this ControlPlaneMachineSet.
    pub template: ControlPlaneMachineSetTemplate,
}

/// ControlPlaneMachineSet represents the configuration of the ControlPlaneMachineSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetReplicas {
    #[serde(rename = "3")]
    r#_3,
    #[serde(rename = "5")]
    r#_5,
}

/// Label selector for Machines. Existing Machines selected by this selector will be the ones affected by this ControlPlaneMachineSet. It must match the template's labels. This field is considered immutable after creation of the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ControlPlaneMachineSetSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ControlPlaneMachineSet represents the configuration of the ControlPlaneMachineSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetState {
    Active,
    Inactive,
}

/// Strategy defines how the ControlPlaneMachineSet will update Machines when it detects a change to the ProviderSpec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetStrategy {
    /// Type defines the type of update strategy that should be used when updating Machines owned by the ControlPlaneMachineSet. Valid values are "RollingUpdate" and "OnDelete". The current default value is "RollingUpdate".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ControlPlaneMachineSetStrategyType>,
}

/// Strategy defines how the ControlPlaneMachineSet will update Machines when it detects a change to the ProviderSpec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetStrategyType {
    RollingUpdate,
    OnDelete,
}

/// Template describes the Control Plane Machines that will be created by this ControlPlaneMachineSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplate {
    /// MachineType determines the type of Machines that should be managed by the ControlPlaneMachineSet. Currently, the only valid value is machines_v1beta1_machine_openshift_io.
    #[serde(rename = "machineType")]
    pub machine_type: ControlPlaneMachineSetTemplateMachineType,
    /// OpenShiftMachineV1Beta1Machine defines the template for creating Machines from the v1beta1.machine.openshift.io API group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machines_v1beta1_machine_openshift_io: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIo>,
}

/// Template describes the Control Plane Machines that will be created by this ControlPlaneMachineSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetTemplateMachineType {
    #[serde(rename = "machines_v1beta1_machine_openshift_io")]
    MachinesV1beta1MachineOpenshiftIo,
}

/// OpenShiftMachineV1Beta1Machine defines the template for creating Machines from the v1beta1.machine.openshift.io API group.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIo {
    /// FailureDomains is the list of failure domains (sometimes called availability zones) in which the ControlPlaneMachineSet should balance the Control Plane Machines. This will be merged into the ProviderSpec given in the template. This field is optional on platforms that do not require placement information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureDomains")]
    pub failure_domains: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomains>,
    /// ObjectMeta is the standard object metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata Labels are required to match the ControlPlaneMachineSet selector.
    pub metadata: ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoMetadata,
    /// Spec contains the desired configuration of the Control Plane Machines. The ProviderSpec within contains platform specific details for creating the Control Plane Machines. The ProviderSe should be complete apart from the platform specific failure domain field. This will be overriden when the Machines are created based on the FailureDomains field.
    pub spec: ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpec,
}

/// FailureDomains is the list of failure domains (sometimes called availability zones) in which the ControlPlaneMachineSet should balance the Control Plane Machines. This will be merged into the ProviderSpec given in the template. This field is optional on platforms that do not require placement information.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomains {
    /// AWS configures failure domain information for the AWS platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAws>>,
    /// Azure configures failure domain information for the Azure platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAzure>>,
    /// GCP configures failure domain information for the GCP platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsGcp>>,
    /// nutanix configures failure domain information for the Nutanix platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nutanix: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsNutanix>>,
    /// OpenStack configures failure domain information for the OpenStack platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openstack: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsOpenstack>>,
    /// Platform identifies the platform for which the FailureDomain represents. Currently supported values are AWS, Azure, GCP, OpenStack, VSphere and Nutanix.
    pub platform: ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsPlatform,
}

/// AWSFailureDomain configures failure domain information for the AWS platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAws {
    /// Placement configures the placement information for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub placement: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsPlacement>,
    /// Subnet is a reference to the subnet to use for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnet>,
}

/// Placement configures the placement information for this instance.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsPlacement {
    /// AvailabilityZone is the availability zone of the instance.
    #[serde(rename = "availabilityZone")]
    pub availability_zone: String,
}

/// Subnet is a reference to the subnet to use for this instance.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnet {
    /// ARN of resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Filters is a set of filters used to identify a resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnetFilters>>,
    /// ID of resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type determines how the reference will fetch the AWS resource.
    #[serde(rename = "type")]
    pub r#type: ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnetType,
}

/// AWSResourceFilter is a filter used to identify an AWS resource
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnetFilters {
    /// Name of the filter. Filter names are case-sensitive.
    pub name: String,
    /// Values includes one or more filter values. Filter values are case-sensitive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Subnet is a reference to the subnet to use for this instance.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAwsSubnetType {
    #[serde(rename = "ID")]
    Id,
    #[serde(rename = "ARN")]
    Arn,
    Filters,
}

/// AzureFailureDomain configures failure domain information for the Azure platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsAzure {
    /// subnet is the name of the network subnet in which the VM will be created. When omitted, the subnet value from the machine providerSpec template will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// Availability Zone for the virtual machine. If nil, the virtual machine should be deployed to no zone.
    pub zone: String,
}

/// GCPFailureDomain configures failure domain information for the GCP platform
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsGcp {
    /// Zone is the zone in which the GCP machine provider will create the VM.
    pub zone: String,
}

/// NutanixFailureDomainReference refers to the failure domain of the Nutanix platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsNutanix {
    /// name of the failure domain in which the nutanix machine provider will create the VM. Failure domains are defined in a cluster's config.openshift.io/Infrastructure resource.
    pub name: String,
}

/// OpenStackFailureDomain configures failure domain information for the OpenStack platform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsOpenstack {
    /// availabilityZone is the nova availability zone in which the OpenStack machine provider will create the VM. If not specified, the VM will be created in the default availability zone specified in the nova configuration. Availability zone names must NOT contain : since it is used by admin users to specify hosts where instances are launched in server creation. Also, it must not contain spaces otherwise it will lead to node that belongs to this availability zone register failure, see kubernetes/cloud-provider-openstack#1379 for further information. The maximum length of availability zone name is 63 as per labels limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// rootVolume contains settings that will be used by the OpenStack machine provider to create the root volume attached to the VM. If not specified, no root volume will be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootVolume")]
    pub root_volume: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsOpenstackRootVolume>,
}

/// rootVolume contains settings that will be used by the OpenStack machine provider to create the root volume attached to the VM. If not specified, no root volume will be created.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsOpenstackRootVolume {
    /// availabilityZone specifies the Cinder availability zone where the root volume will be created. If not specifified, the root volume will be created in the availability zone specified by the volume type in the cinder configuration. If the volume type (configured in the OpenStack cluster) does not specify an availability zone, the root volume will be created in the default availability zone specified in the cinder configuration. See https://docs.openstack.org/cinder/latest/admin/availability-zone-type.html for more details. If the OpenStack cluster is deployed with the cross_az_attach configuration option set to false, the root volume will have to be in the same availability zone as the VM (defined by OpenStackFailureDomain.AvailabilityZone). Availability zone names must NOT contain spaces otherwise it will lead to volume that belongs to this availability zone register failure, see kubernetes/cloud-provider-openstack#1379 for further information. The maximum length of availability zone name is 63 as per labels limits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// volumeType specifies the type of the root volume that will be provisioned. The maximum length of a volume type name is 255 characters, as per the OpenStack limit.
    #[serde(rename = "volumeType")]
    pub volume_type: String,
}

/// FailureDomains is the list of failure domains (sometimes called availability zones) in which the ControlPlaneMachineSet should balance the Control Plane Machines. This will be merged into the ProviderSpec given in the template. This field is optional on platforms that do not require placement information.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoFailureDomainsPlatform {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "AWS")]
    Aws,
    Azure,
    BareMetal,
    #[serde(rename = "GCP")]
    Gcp,
    Libvirt,
    OpenStack,
    None,
    VSphere,
    #[serde(rename = "oVirt")]
    OVirt,
    #[serde(rename = "IBMCloud")]
    IbmCloud,
    KubeVirt,
    EquinixMetal,
    #[serde(rename = "PowerVS")]
    PowerVs,
    AlibabaCloud,
    Nutanix,
    External,
}

/// ObjectMeta is the standard object metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata Labels are required to match the ControlPlaneMachineSet selector.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels. This field must contain both the 'machine.openshift.io/cluster-api-machine-role' and 'machine.openshift.io/cluster-api-machine-type' labels, both with a value of 'master'. It must also contain a label with the key 'machine.openshift.io/cluster-api-cluster'.
    pub labels: BTreeMap<String, String>,
}

/// Spec contains the desired configuration of the Control Plane Machines. The ProviderSpec within contains platform specific details for creating the Control Plane Machines. The ProviderSe should be complete apart from the platform specific failure domain field. This will be overriden when the Machines are created based on the FailureDomains field.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpec {
    /// LifecycleHooks allow users to pause operations on the machine at certain predefined points within the machine lifecycle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleHooks")]
    pub lifecycle_hooks: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooks>,
    /// ObjectMeta will autopopulate the Node created. Use this to indicate what labels, annotations, name prefix, etc., should be used when creating the Node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecMetadata>,
    /// ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerID")]
    pub provider_id: Option<String>,
    /// ProviderSpec details Provider-specific configuration to use during node creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerSpec")]
    pub provider_spec: Option<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecProviderSpec>,
    /// The list of the taints to be applied to the corresponding Node in additive manner. This list will not overwrite any other taints added to the Node on an ongoing basis by other entities. These taints should be actively reconciled e.g. if you ask the machine controller to apply a taint and then manually remove the taint the machine controller will put it back) but not have the machine controller remove any taints
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecTaints>>,
}

/// LifecycleHooks allow users to pause operations on the machine at certain predefined points within the machine lifecycle.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooks {
    /// PreDrain hooks prevent the machine from being drained. This also blocks further lifecycle events, such as termination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preDrain")]
    pub pre_drain: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooksPreDrain>>,
    /// PreTerminate hooks prevent the machine from being terminated. PreTerminate hooks be actioned after the Machine has been drained.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preTerminate")]
    pub pre_terminate: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooksPreTerminate>>,
}

/// LifecycleHook represents a single instance of a lifecycle hook
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooksPreDrain {
    /// Name defines a unique name for the lifcycle hook. The name should be unique and descriptive, ideally 1-3 words, in CamelCase or it may be namespaced, eg. foo.example.com/CamelCase. Names must be unique and should only be managed by a single entity.
    pub name: String,
    /// Owner defines the owner of the lifecycle hook. This should be descriptive enough so that users can identify who/what is responsible for blocking the lifecycle. This could be the name of a controller (e.g. clusteroperator/etcd) or an administrator managing the hook.
    pub owner: String,
}

/// LifecycleHook represents a single instance of a lifecycle hook
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecLifecycleHooksPreTerminate {
    /// Name defines a unique name for the lifcycle hook. The name should be unique and descriptive, ideally 1-3 words, in CamelCase or it may be namespaced, eg. foo.example.com/CamelCase. Names must be unique and should only be managed by a single entity.
    pub name: String,
    /// Owner defines the owner of the lifecycle hook. This should be descriptive enough so that users can identify who/what is responsible for blocking the lifecycle. This could be the name of a controller (e.g. clusteroperator/etcd) or an administrator managing the hook.
    pub owner: String,
}

/// ObjectMeta will autopopulate the Node created. Use this to indicate what labels, annotations, name prefix, etc., should be used when creating the Node.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
    ///  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
    ///  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    /// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
    ///  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecMetadataOwnerReferences>>,
}

/// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecMetadataOwnerReferences {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockOwnerDeletion")]
    pub block_owner_deletion: Option<bool>,
    /// If true, this reference points to the managing controller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    pub name: String,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    pub uid: String,
}

/// ProviderSpec details Provider-specific configuration to use during node creation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecProviderSpec {
    /// Value is an inlined, serialized representation of the resource configuration. It is recommended that providers maintain their own versioned API types that should be serialized/deserialized from this field, akin to component config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<BTreeMap<String, serde_json::Value>>,
}

/// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetTemplateMachinesV1beta1MachineOpenshiftIoSpecTaints {
    /// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    pub effect: String,
    /// Required. The taint key to be applied to a node.
    pub key: String,
    /// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeAdded")]
    pub time_added: Option<String>,
    /// The taint value corresponding to the taint key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ControlPlaneMachineSetStatus represents the status of the ControlPlaneMachineSet CRD.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetStatus {
    /// Conditions represents the observations of the ControlPlaneMachineSet's current state. Known .status.conditions.type are: Available, Degraded and Progressing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ControlPlaneMachineSetStatusConditions>>,
    /// ObservedGeneration is the most recent generation observed for this ControlPlaneMachineSet. It corresponds to the ControlPlaneMachineSets's generation, which is updated on mutation by the API Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// ReadyReplicas is the number of Control Plane Machines created by the ControlPlaneMachineSet controller which are ready. Note that this value may be higher than the desired number of replicas while rolling updates are in-progress.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyReplicas")]
    pub ready_replicas: Option<i32>,
    /// Replicas is the number of Control Plane Machines created by the ControlPlaneMachineSet controller. Note that during update operations this value may differ from the desired replica count.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// UnavailableReplicas is the number of Control Plane Machines that are still required before the ControlPlaneMachineSet reaches the desired available capacity. When this value is non-zero, the number of ReadyReplicas is less than the desired Replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unavailableReplicas")]
    pub unavailable_replicas: Option<i32>,
    /// UpdatedReplicas is the number of non-terminated Control Plane Machines created by the ControlPlaneMachineSet controller that have the desired provider spec and are ready. This value is set to 0 when a change is detected to the desired spec. When the update strategy is RollingUpdate, this will also coincide with starting the process of updating the Machines. When the update strategy is OnDelete, this value will remain at 0 until a user deletes an existing replica and its replacement has become ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedReplicas")]
    pub updated_replicas: Option<i32>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ControlPlaneMachineSetStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: ControlPlaneMachineSetStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ControlPlaneMachineSetStatusConditionsStatus {
    True,
    False,
    Unknown,
}

