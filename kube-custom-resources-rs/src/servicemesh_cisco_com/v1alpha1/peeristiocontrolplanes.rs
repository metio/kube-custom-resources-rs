// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/banzaicloud/istio-operator/servicemesh.cisco.com/v1alpha1/peeristiocontrolplanes.yaml --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "servicemesh.cisco.com", version = "v1alpha1", kind = "PeerIstioControlPlane", plural = "peeristiocontrolplanes")]
#[kube(namespaced)]
#[kube(status = "PeerIstioControlPlaneStatus")]
#[kube(schema = "disabled")]
pub struct PeerIstioControlPlaneSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caAddress")]
    pub ca_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caProvider")]
    pub ca_provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterID")]
    pub cluster_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImageConfiguration")]
    pub container_image_configuration: Option<PeerIstioControlPlaneContainerImageConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxyEnvs")]
    pub http_proxy_envs: Option<PeerIstioControlPlaneHttpProxyEnvs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istiod: Option<PeerIstioControlPlaneIstiod>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtPolicy")]
    pub jwt_policy: Option<PeerIstioControlPlaneJwtPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sResourceOverlays")]
    pub k8s_resource_overlays: Option<Vec<PeerIstioControlPlaneK8sResourceOverlays>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<PeerIstioControlPlaneLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshConfig")]
    pub mesh_config: Option<PeerIstioControlPlaneMeshConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshExpansion")]
    pub mesh_expansion: Option<PeerIstioControlPlaneMeshExpansion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshID")]
    pub mesh_id: Option<String>,
    pub mode: PeerIstioControlPlaneMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountMtlsCerts")]
    pub mount_mtls_certs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkName")]
    pub network_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<PeerIstioControlPlaneProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyInit")]
    pub proxy_init: Option<PeerIstioControlPlaneProxyInit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyWasm")]
    pub proxy_wasm: Option<PeerIstioControlPlaneProxyWasm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<PeerIstioControlPlaneSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sidecarInjector")]
    pub sidecar_injector: Option<PeerIstioControlPlaneSidecarInjector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "telemetryV2")]
    pub telemetry_v2: Option<PeerIstioControlPlaneTelemetryV2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracer: Option<PeerIstioControlPlaneTracer>,
    pub version: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "watchOneNamespace")]
    pub watch_one_namespace: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneContainerImageConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hub: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<PeerIstioControlPlaneContainerImageConfigurationImagePullPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<PeerIstioControlPlaneContainerImageConfigurationImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneContainerImageConfigurationImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneContainerImageConfigurationImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneHttpProxyEnvs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsProxy")]
    pub https_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxy")]
    pub no_proxy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiod {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certProvider")]
    pub cert_provider: Option<PeerIstioControlPlaneIstiodCertProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<PeerIstioControlPlaneIstiodDeployment>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAnalysis")]
    pub enable_analysis: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableProtocolSniffingInbound")]
    pub enable_protocol_sniffing_inbound: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableProtocolSniffingOutbound")]
    pub enable_protocol_sniffing_outbound: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStatus")]
    pub enable_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIstiod")]
    pub external_istiod: Option<PeerIstioControlPlaneIstiodExternalIstiod>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spiffe: Option<PeerIstioControlPlaneIstiodSpiffe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceSampling")]
    pub trace_sampling: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneIstiodCertProvider {
    #[serde(rename = "KUBERNETES")]
    Kubernetes,
    #[serde(rename = "ISTIOD")]
    Istiod,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeployment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<PeerIstioControlPlaneIstiodDeploymentAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentStrategy")]
    pub deployment_strategy: Option<PeerIstioControlPlaneIstiodDeploymentDeploymentStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<PeerIstioControlPlaneIstiodDeploymentEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<PeerIstioControlPlaneIstiodDeploymentImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<PeerIstioControlPlaneIstiodDeploymentLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneIstiodDeploymentMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<PeerIstioControlPlaneIstiodDeploymentPodDisruptionBudget>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<PeerIstioControlPlaneIstiodDeploymentPodMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<PeerIstioControlPlaneIstiodDeploymentPodSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneIstiodDeploymentReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<PeerIstioControlPlaneIstiodDeploymentReplicas>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneIstiodDeploymentResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<PeerIstioControlPlaneIstiodDeploymentSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<PeerIstioControlPlaneIstiodDeploymentTolerations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumeMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentDeploymentStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<PeerIstioControlPlaneIstiodDeploymentDeploymentStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentDeploymentStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneIstiodDeploymentEnvValueFromSecretKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentEnvValueFromSecretKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneIstiodDeploymentLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneIstiodDeploymentLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneIstiodDeploymentLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneIstiodDeploymentLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneIstiodDeploymentLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodDisruptionBudget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneIstiodDeploymentPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneIstiodDeploymentReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneIstiodDeploymentReadinessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneIstiodDeploymentReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneIstiodDeploymentReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneIstiodDeploymentReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentReplicas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCPUUtilizationPercentage")]
    pub target_cpu_utilization_percentage: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<PeerIstioControlPlaneIstiodDeploymentSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneIstiodDeploymentSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneIstiodDeploymentSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneIstiodDeploymentSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumeMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSource")]
    pub volume_source: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAwsElasticBlockStore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAzureDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAzureFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCephfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCinder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCsi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlexVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlocker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGcePersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGitRepo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGlusterfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceIscsi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceNfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePersistentVolumeClaim>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePhotonPersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePortworxVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjected>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceQuobyte>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceRbd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceScaleIo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceStorageos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceVsphereVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAwsElasticBlockStore {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAzureDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskURI")]
    pub disk_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceAzureFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareName")]
    pub share_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCephfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCephfsSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCephfsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCinder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCinderSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCinderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCsi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionGracePeriodSeconds")]
    pub deletion_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionTimestamp")]
    pub deletion_timestamp: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFields")]
    pub managed_fields: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsType")]
    pub fields_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsV1")]
    pub fields_v1: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manager: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subresource: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Raw")]
    pub raw: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockOwnerDeletion")]
    pub block_owner_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlexVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlexVolumeSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlexVolumeSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceFlocker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGcePersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdName")]
    pub pd_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGitRepo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceGlusterfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceHostPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceIscsi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceIscsiSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPortal")]
    pub target_portal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceIscsiSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceNfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePersistentVolumeClaim {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimName")]
    pub claim_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePhotonPersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdID")]
    pub pd_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourcePortworxVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjected {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceQuobyte {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceRbd {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceRbdSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceRbdSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceScaleIo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceScaleIoSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceScaleIoSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceStorageos {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceStorageosSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceStorageosSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodDeploymentVolumesVolumeSourceVsphereVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumePath")]
    pub volume_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodExternalIstiod {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodSpiffe {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorEndpoints")]
    pub operator_endpoints: Option<PeerIstioControlPlaneIstiodSpiffeOperatorEndpoints>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneIstiodSpiffeOperatorEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneJwtPolicy {
    #[serde(rename = "THIRD_PARTY_JWT")]
    ThirdPartyJwt,
    #[serde(rename = "FIRST_PARTY_JWT")]
    FirstPartyJwt,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneK8sResourceOverlays {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupVersionKind")]
    pub group_version_kind: Option<PeerIstioControlPlaneK8sResourceOverlaysGroupVersionKind>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectKey")]
    pub object_key: Option<PeerIstioControlPlaneK8sResourceOverlaysObjectKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<PeerIstioControlPlaneK8sResourceOverlaysPatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneK8sResourceOverlaysGroupVersionKind {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneK8sResourceOverlaysObjectKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneK8sResourceOverlaysPatches {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseValue")]
    pub parse_value: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<PeerIstioControlPlaneK8sResourceOverlaysPatchesType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneK8sResourceOverlaysPatchesType {
    #[serde(rename = "unspecified")]
    Unspecified,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "remove")]
    Remove,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogEncoding")]
    pub access_log_encoding: Option<PeerIstioControlPlaneMeshConfigAccessLogEncoding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFile")]
    pub access_log_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFormat")]
    pub access_log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<PeerIstioControlPlaneMeshConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<Vec<PeerIstioControlPlaneMeshConfigCaCertificates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificates: Option<Vec<PeerIstioControlPlaneMeshConfigCertificates>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configSources")]
    pub config_sources: Option<Vec<PeerIstioControlPlaneMeshConfigConfigSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultConfig")]
    pub default_config: Option<PeerIstioControlPlaneMeshConfigDefaultConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDestinationRuleExportTo")]
    pub default_destination_rule_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHttpRetryPolicy")]
    pub default_http_retry_policy: Option<PeerIstioControlPlaneMeshConfigDefaultHttpRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultProviders")]
    pub default_providers: Option<PeerIstioControlPlaneMeshConfigDefaultProviders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultServiceExportTo")]
    pub default_service_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVirtualServiceExportTo")]
    pub default_virtual_service_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableEnvoyListenerLog")]
    pub disable_envoy_listener_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoverySelectors")]
    pub discovery_selectors: Option<Vec<PeerIstioControlPlaneMeshConfigDiscoverySelectors>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoMtls")]
    pub enable_auto_mtls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEnvoyAccessLogService")]
    pub enable_envoy_access_log_service: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrometheusMerge")]
    pub enable_prometheus_merge: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTracing")]
    pub enable_tracing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extensionProviders")]
    pub extension_providers: Option<Vec<PeerIstioControlPlaneMeshConfigExtensionProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "h2UpgradePolicy")]
    pub h2_upgrade_policy: Option<PeerIstioControlPlaneMeshConfigH2UpgradePolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundClusterStatName")]
    pub inbound_cluster_stat_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClass")]
    pub ingress_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressControllerMode")]
    pub ingress_controller_mode: Option<PeerIstioControlPlaneMeshConfigIngressControllerMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressSelector")]
    pub ingress_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressService")]
    pub ingress_service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbSetting")]
    pub locality_lb_setting: Option<PeerIstioControlPlaneMeshConfigLocalityLbSetting>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshMTLS")]
    pub mesh_mtls: Option<PeerIstioControlPlaneMeshConfigMeshMtls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundClusterStatName")]
    pub outbound_cluster_stat_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundTrafficPolicy")]
    pub outbound_traffic_policy: Option<PeerIstioControlPlaneMeshConfigOutboundTrafficPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathNormalization")]
    pub path_normalization: Option<PeerIstioControlPlaneMeshConfigPathNormalization>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolDetectionTimeout")]
    pub protocol_detection_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHttpPort")]
    pub proxy_http_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyListenPort")]
    pub proxy_listen_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootNamespace")]
    pub root_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSettings")]
    pub service_settings: Option<Vec<PeerIstioControlPlaneMeshConfigServiceSettings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneMeshConfigTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomain")]
    pub trust_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomainAliases")]
    pub trust_domain_aliases: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyCertificateAtClient")]
    pub verify_certificate_at_client: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigAccessLogEncoding {
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "JSON")]
    Json,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "istiodSide")]
    pub istiod_side: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneMeshConfigCaTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigCaTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneMeshConfigCaTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigCaTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigCaCertificates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSigners")]
    pub cert_signers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pem: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spiffeBundleUrl")]
    pub spiffe_bundle_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomains")]
    pub trust_domains: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigCertificates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    pub dns_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigConfigSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscribedResources")]
    pub subscribed_resources: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneMeshConfigConfigSourcesTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigConfigSourcesTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneMeshConfigConfigSourcesTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigConfigSourcesTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryPath")]
    pub binary_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificatesPem")]
    pub ca_certificates_pem: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configPath")]
    pub config_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneAuthPolicy")]
    pub control_plane_auth_policy: Option<PeerIstioControlPlaneMeshConfigDefaultConfigControlPlaneAuthPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigFile")]
    pub custom_config_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryAddress")]
    pub discovery_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryRefreshDelay")]
    pub discovery_refresh_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainDuration")]
    pub drain_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyAccessLogService")]
    pub envoy_access_log_service: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetricsService")]
    pub envoy_metrics_service: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetricsServiceAddress")]
    pub envoy_metrics_service_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraStatTags")]
    pub extra_stat_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayTopology")]
    pub gateway_topology: Option<PeerIstioControlPlaneMeshConfigDefaultConfigGatewayTopology>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdApplicationUntilProxyStarts")]
    pub hold_application_until_proxy_starts: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<PeerIstioControlPlaneMeshConfigDefaultConfigImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interceptionMode")]
    pub interception_mode: Option<PeerIstioControlPlaneMeshConfigDefaultConfigInterceptionMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshId")]
    pub mesh_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeyProvider")]
    pub private_key_provider: Option<PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyAdminPort")]
    pub proxy_admin_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyBootstrapTemplatePath")]
    pub proxy_bootstrap_template_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyMetadata")]
    pub proxy_metadata: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyStatsMatcher")]
    pub proxy_stats_matcher: Option<PeerIstioControlPlaneMeshConfigDefaultConfigProxyStatsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeValues")]
    pub runtime_values: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<PeerIstioControlPlaneMeshConfigDefaultConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceCluster")]
    pub service_cluster: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statNameLength")]
    pub stat_name_length: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statsdUdpAddress")]
    pub statsd_udp_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusPort")]
    pub status_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationDrainDuration")]
    pub termination_drain_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracingServiceName")]
    pub tracing_service_name: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingServiceName>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinAddress")]
    pub zipkin_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigControlPlaneAuthPolicy {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "MUTUAL_TLS")]
    MutualTls,
    #[serde(rename = "INHERIT")]
    Inherit,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigGatewayTopology {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<PeerIstioControlPlaneMeshConfigDefaultConfigGatewayTopologyForwardClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numTrustedProxies")]
    pub num_trusted_proxies: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigGatewayTopologyForwardClientCertDetails {
    #[serde(rename = "UNDEFINED")]
    Undefined,
    #[serde(rename = "SANITIZE")]
    Sanitize,
    #[serde(rename = "FORWARD_ONLY")]
    ForwardOnly,
    #[serde(rename = "APPEND_FORWARD")]
    AppendForward,
    #[serde(rename = "SANITIZE_SET")]
    SanitizeSet,
    #[serde(rename = "ALWAYS_FORWARD_ONLY")]
    AlwaysForwardOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigImage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigInterceptionMode {
    #[serde(rename = "REDIRECT")]
    Redirect,
    #[serde(rename = "TPROXY")]
    Tproxy,
    #[serde(rename = "NONE")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cryptomb: Option<PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProviderCryptomb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qat: Option<PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProviderQat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProviderCryptomb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollDelay")]
    pub poll_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigPrivateKeyProviderQat {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollDelay")]
    pub poll_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigProxyStatsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionPrefixes")]
    pub inclusion_prefixes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionRegexps")]
    pub inclusion_regexps: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionSuffixes")]
    pub inclusion_suffixes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sSaJwtPath")]
    pub k8s_sa_jwt_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTags")]
    pub custom_tags: Option<BTreeMap<String, PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lightstep: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingLightstep>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPathTagLength")]
    pub max_path_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusAgent")]
    pub open_census_agent: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingOpenCensusAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sampling: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stackdriver: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingStackdriver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingTlsSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zipkin: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingZipkin>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub literal: Option<PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsLiteral>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsEnvironment {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingCustomTagsLiteral {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingDatadog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingLightstep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingOpenCensusAgent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingStackdriver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneMeshConfigDefaultConfigTracingTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigTracingTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultConfigTracingZipkin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigDefaultConfigTracingServiceName {
    #[serde(rename = "APP_LABEL_AND_NAMESPACE")]
    AppLabelAndNamespace,
    #[serde(rename = "CANONICAL_NAME_ONLY")]
    CanonicalNameOnly,
    #[serde(rename = "CANONICAL_NAME_AND_NAMESPACE")]
    CanonicalNameAndNamespace,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultHttpRetryPolicy {
    pub attempts: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryRemoteLocalities")]
    pub retry_remote_localities: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDefaultProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogging")]
    pub access_logging: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDiscoverySelectors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshConfigDiscoverySelectorsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigDiscoverySelectorsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProviders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyExtAuthzGrpc")]
    pub envoy_ext_authz_grpc: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyExtAuthzHttp")]
    pub envoy_ext_authz_http: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyFileAccessLog")]
    pub envoy_file_access_log: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLog>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyHttpAls")]
    pub envoy_http_als: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyHttpAls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyOtelAls")]
    pub envoy_otel_als: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyTcpAls")]
    pub envoy_tcp_als: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyTcpAls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lightstep: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersLightstep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opencensus: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersOpencensus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opentelemetry: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersOpentelemetry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersPrometheus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skywalking: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersSkywalking>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stackdriver: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersStackdriver>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zipkin: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersZipkin>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersDatadog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestBodyInCheck")]
    pub include_request_body_in_check: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzGrpcIncludeRequestBodyInCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzGrpcIncludeRequestBodyInCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToDownstreamOnAllow")]
    pub headers_to_downstream_on_allow: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToDownstreamOnDeny")]
    pub headers_to_downstream_on_deny: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToUpstreamOnAllow")]
    pub headers_to_upstream_on_allow: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeAdditionalHeadersInCheck")]
    pub include_additional_headers_in_check: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHeadersInCheck")]
    pub include_headers_in_check: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestBodyInCheck")]
    pub include_request_body_in_check: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzHttpIncludeRequestBodyInCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestHeadersInCheck")]
    pub include_request_headers_in_check: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyExtAuthzHttpIncludeRequestBodyInCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormatLabels>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormatLabels {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyHttpAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRequestHeadersToLog")]
    pub additional_request_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseHeadersToLog")]
    pub additional_response_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseTrailersToLog")]
    pub additional_response_trailers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAlsLogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAlsLogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAlsLogFormatLabels>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyOtelAlsLogFormatLabels {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersEnvoyTcpAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersLightstep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersOpencensus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersOpentelemetry {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersPrometheus {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersSkywalking {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersStackdriver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<PeerIstioControlPlaneMeshConfigExtensionProvidersStackdriverLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersStackdriverLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigExtensionProvidersZipkin {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigH2UpgradePolicy {
    #[serde(rename = "DO_NOT_UPGRADE")]
    DoNotUpgrade,
    #[serde(rename = "UPGRADE")]
    Upgrade,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigIngressControllerMode {
    #[serde(rename = "UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "OFF")]
    Off,
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "STRICT")]
    Strict,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigLocalityLbSetting {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribute: Option<Vec<PeerIstioControlPlaneMeshConfigLocalityLbSettingDistribute>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failover: Option<Vec<PeerIstioControlPlaneMeshConfigLocalityLbSettingFailover>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverPriority")]
    pub failover_priority: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigLocalityLbSettingDistribute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<BTreeMap<String, i64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigLocalityLbSettingFailover {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigMeshMtls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minProtocolVersion")]
    pub min_protocol_version: Option<PeerIstioControlPlaneMeshConfigMeshMtlsMinProtocolVersion>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigMeshMtlsMinProtocolVersion {
    #[serde(rename = "TLS_AUTO")]
    TlsAuto,
    #[serde(rename = "TLSV1_2")]
    Tlsv12,
    #[serde(rename = "TLSV1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigOutboundTrafficPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<PeerIstioControlPlaneMeshConfigOutboundTrafficPolicyMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigOutboundTrafficPolicyMode {
    #[serde(rename = "REGISTRY_ONLY")]
    RegistryOnly,
    #[serde(rename = "ALLOW_ANY")]
    AllowAny,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigPathNormalization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub normalization: Option<PeerIstioControlPlaneMeshConfigPathNormalizationNormalization>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshConfigPathNormalizationNormalization {
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "BASE")]
    Base,
    #[serde(rename = "MERGE_SLASHES")]
    MergeSlashes,
    #[serde(rename = "DECODE_AND_MERGE_SLASHES")]
    DecodeAndMergeSlashes,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigServiceSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<PeerIstioControlPlaneMeshConfigServiceSettingsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigServiceSettingsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterLocal")]
    pub cluster_local: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshConfigTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansion {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterServices")]
    pub cluster_services: Option<PeerIstioControlPlaneMeshExpansionClusterServices>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<PeerIstioControlPlaneMeshExpansionGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istiod: Option<PeerIstioControlPlaneMeshExpansionIstiod>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<PeerIstioControlPlaneMeshExpansionWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionClusterServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<PeerIstioControlPlaneMeshExpansionGatewayDeployment>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sResourceOverlays")]
    pub k8s_resource_overlays: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlays>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneMeshExpansionGatewayMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsRoot")]
    pub run_as_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<PeerIstioControlPlaneMeshExpansionGatewayService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeployment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentStrategy")]
    pub deployment_strategy: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentDeploymentStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodDisruptionBudget>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReplicas>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentTolerations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumeMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentDeploymentStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentDeploymentStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentDeploymentStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromSecretKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentEnvValueFromSecretKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodDisruptionBudget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentReplicas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCPUUtilizationPercentage")]
    pub target_cpu_utilization_percentage: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumeMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSource")]
    pub volume_source: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAwsElasticBlockStore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAzureDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAzureFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCephfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCinder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCsi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlexVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlocker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGcePersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGitRepo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGlusterfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceIscsi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceNfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePersistentVolumeClaim>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePhotonPersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePortworxVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjected>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceQuobyte>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceRbd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceScaleIo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceStorageos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceVsphereVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAwsElasticBlockStore {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAzureDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskURI")]
    pub disk_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceAzureFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareName")]
    pub share_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCephfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCephfsSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCephfsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCinder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCinderSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCinderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCsi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionGracePeriodSeconds")]
    pub deletion_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionTimestamp")]
    pub deletion_timestamp: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFields")]
    pub managed_fields: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsType")]
    pub fields_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsV1")]
    pub fields_v1: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manager: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subresource: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Raw")]
    pub raw: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockOwnerDeletion")]
    pub block_owner_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlexVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlexVolumeSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlexVolumeSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceFlocker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGcePersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdName")]
    pub pd_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGitRepo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceGlusterfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceHostPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceIscsi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceIscsiSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPortal")]
    pub target_portal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceIscsiSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceNfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePersistentVolumeClaim {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimName")]
    pub claim_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePhotonPersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdID")]
    pub pd_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourcePortworxVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjected {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceQuobyte {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceRbd {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceRbdSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceRbdSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceScaleIo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceScaleIoSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceScaleIoSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceStorageos {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceStorageosSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceStorageosSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayDeploymentVolumesVolumeSourceVsphereVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumePath")]
    pub volume_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlays {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupVersionKind")]
    pub group_version_kind: Option<PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysGroupVersionKind>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectKey")]
    pub object_key: Option<PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysObjectKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysPatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysGroupVersionKind {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysObjectKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysPatches {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseValue")]
    pub parse_value: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysPatchesType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshExpansionGatewayK8sResourceOverlaysPatchesType {
    #[serde(rename = "unspecified")]
    Unspecified,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "remove")]
    Remove,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIP")]
    pub cluster_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIPs")]
    pub external_i_ps: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalName")]
    pub external_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckNodePort")]
    pub health_check_node_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    pub ip_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneMeshExpansionGatewayServiceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<PeerIstioControlPlaneMeshExpansionGatewayServicePorts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishNotReadyAddresses")]
    pub publish_not_ready_addresses: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinityConfig")]
    pub session_affinity_config: Option<PeerIstioControlPlaneMeshExpansionGatewayServiceSessionAffinityConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<PeerIstioControlPlaneMeshExpansionGatewayServiceType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayServiceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayServicePorts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<i32>,
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayServiceSessionAffinityConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIP")]
    pub client_ip: Option<PeerIstioControlPlaneMeshExpansionGatewayServiceSessionAffinityConfigClientIp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionGatewayServiceSessionAffinityConfigClientIp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMeshExpansionGatewayServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionIstiod {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneMeshExpansionWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneMode {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "PASSIVE")]
    Passive,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDomain")]
    pub cluster_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentLogLevel")]
    pub component_log_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCoreDump")]
    pub enable_core_dump: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeIPRanges")]
    pub exclude_ip_ranges: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeInboundPorts")]
    pub exclude_inbound_ports: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeOutboundPorts")]
    pub exclude_outbound_ports: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdApplicationUntilProxyStarts")]
    pub hold_application_until_proxy_starts: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeIPRanges")]
    pub include_ip_ranges: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<PeerIstioControlPlaneProxyLifecycle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<PeerIstioControlPlaneProxyLogLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneProxyResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracer: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecycle {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<PeerIstioControlPlaneProxyLifecyclePostStart>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<PeerIstioControlPlaneProxyLifecyclePreStop>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePostStart {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneProxyLifecyclePostStartExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneProxyLifecyclePostStartHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneProxyLifecyclePostStartTcpSocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePostStartExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePostStartHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneProxyLifecyclePostStartHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePostStartHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePostStartTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePreStop {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneProxyLifecyclePreStopExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneProxyLifecyclePreStopHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneProxyLifecyclePreStopTcpSocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePreStopExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePreStopHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneProxyLifecyclePreStopHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePreStopHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyLifecyclePreStopTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneProxyLogLevel {
    #[serde(rename = "TRACE")]
    Trace,
    #[serde(rename = "DEBUG")]
    Debug,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARNING")]
    Warning,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "CRITICAL")]
    Critical,
    #[serde(rename = "OFF")]
    Off,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cni: Option<PeerIstioControlPlaneProxyInitCni>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneProxyInitResources>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCni {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binDir")]
    pub bin_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chained: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "confDir")]
    pub conf_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "confFileName")]
    pub conf_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub daemonset: Option<PeerIstioControlPlaneProxyInitCniDaemonset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeNamespaces")]
    pub exclude_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamespaces")]
    pub include_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pspClusterRoleName")]
    pub psp_cluster_role_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repair: Option<PeerIstioControlPlaneProxyInitCniRepair>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceQuotas")]
    pub resource_quotas: Option<PeerIstioControlPlaneProxyInitCniResourceQuotas>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taint: Option<PeerIstioControlPlaneProxyInitCniTaint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentStrategy")]
    pub deployment_strategy: Option<PeerIstioControlPlaneProxyInitCniDaemonsetDeploymentStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneProxyInitCniDaemonsetMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodDisruptionBudget>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReplicas>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneProxyInitCniDaemonsetResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetTolerations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumeMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetDeploymentStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<PeerIstioControlPlaneProxyInitCniDaemonsetDeploymentStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetDeploymentStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromConfigMapKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromConfigMapKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromSecretKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetEnvValueFromSecretKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodDisruptionBudget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetReplicas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCPUUtilizationPercentage")]
    pub target_cpu_utilization_percentage: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumeMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSource")]
    pub volume_source: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAwsElasticBlockStore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAzureDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAzureFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCephfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCinder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCsi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlexVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlocker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGcePersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGitRepo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGlusterfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceIscsi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceNfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePersistentVolumeClaim>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePhotonPersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePortworxVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjected>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceQuobyte>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceRbd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceScaleIo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceStorageos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceVsphereVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAwsElasticBlockStore {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAzureDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskURI")]
    pub disk_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceAzureFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareName")]
    pub share_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCephfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCephfsSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCephfsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCinder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCinderSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCinderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCsi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionGracePeriodSeconds")]
    pub deletion_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionTimestamp")]
    pub deletion_timestamp: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFields")]
    pub managed_fields: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsType")]
    pub fields_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsV1")]
    pub fields_v1: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manager: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subresource: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Raw")]
    pub raw: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockOwnerDeletion")]
    pub block_owner_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlexVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlexVolumeSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlexVolumeSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceFlocker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGcePersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdName")]
    pub pd_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGitRepo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceGlusterfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceHostPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceIscsi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceIscsiSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPortal")]
    pub target_portal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceIscsiSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceNfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePersistentVolumeClaim {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimName")]
    pub claim_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePhotonPersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdID")]
    pub pd_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourcePortworxVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjected {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesServiceAccountToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceProjectedSourcesServiceAccountToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceQuobyte {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceRbd {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceRbdSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceRbdSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceScaleIo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceScaleIoSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceScaleIoSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceStorageos {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceStorageosSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceStorageosSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniDaemonsetVolumesVolumeSourceVsphereVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumePath")]
    pub volume_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniRepair {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "brokenPodLabelKey")]
    pub broken_pod_label_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "brokenPodLabelValue")]
    pub broken_pod_label_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletePods")]
    pub delete_pods: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainerName")]
    pub init_container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelPods")]
    pub label_pods: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniResourceQuotas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClasses")]
    pub priority_classes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<PeerIstioControlPlaneProxyInitCniTaintContainer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<PeerIstioControlPlaneProxyInitCniTaintContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneProxyInitCniTaintContainerResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<PeerIstioControlPlaneProxyInitCniTaintContainerVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromConfigMapKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromConfigMapKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromSecretKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerEnvValueFromSecretKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitCniTaintContainerVolumeMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyInitResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneProxyWasm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenAudience")]
    pub token_audience: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<PeerIstioControlPlaneSidecarInjectorDeployment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<PeerIstioControlPlaneSidecarInjectorService>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<PeerIstioControlPlaneSidecarInjectorTemplates>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeployment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentStrategy")]
    pub deployment_strategy: Option<PeerIstioControlPlaneSidecarInjectorDeploymentDeploymentStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneSidecarInjectorDeploymentMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodDisruptionBudget>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReplicas>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneSidecarInjectorDeploymentResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentTolerations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumeMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentDeploymentStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<PeerIstioControlPlaneSidecarInjectorDeploymentDeploymentStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentDeploymentStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromConfigMapKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromSecretKeyRefLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentEnvValueFromSecretKeyRefLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodDisruptionBudget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentReplicas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetCPUUtilizationPercentage")]
    pub target_cpu_utilization_percentage: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumeMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSource")]
    pub volume_source: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAwsElasticBlockStore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAzureDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAzureFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCephfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCinder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCsi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlexVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlocker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGcePersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGitRepo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGlusterfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceIscsi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceNfs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePersistentVolumeClaim>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePhotonPersistentDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePortworxVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjected>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceQuobyte>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceRbd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceScaleIo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceStorageos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceVsphereVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAwsElasticBlockStore {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAzureDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskURI")]
    pub disk_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceAzureFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareName")]
    pub share_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCephfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCephfsSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCephfsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCinder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCinderSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCinderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCsi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionGracePeriodSeconds")]
    pub deletion_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionTimestamp")]
    pub deletion_timestamp: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFields")]
    pub managed_fields: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerReferences")]
    pub owner_references: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataCreationTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataDeletionTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFields {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsType")]
    pub fields_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldsV1")]
    pub fields_v1: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manager: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subresource: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsFieldsV1 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Raw")]
    pub raw: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataManagedFieldsTime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateMetadataOwnerReferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockOwnerDeletion")]
    pub block_owner_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecResourcesRequests {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlexVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlexVolumeSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlexVolumeSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceFlocker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGcePersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdName")]
    pub pd_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGitRepo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceGlusterfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceHostPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceIscsi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceIscsiSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPortal")]
    pub target_portal: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceIscsiSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceNfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePersistentVolumeClaim {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimName")]
    pub claim_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePhotonPersistentDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pdID")]
    pub pd_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourcePortworxVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjected {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesConfigMapLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItems {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesDownwardApiItemsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localObjectReference")]
    pub local_object_reference: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesSecretLocalObjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceProjectedSourcesServiceAccountToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceQuobyte {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceRbd {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceRbdSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceRbdSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceScaleIo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceScaleIoSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceScaleIoSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceStorageos {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceStorageosSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceStorageosSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorDeploymentVolumesVolumeSourceVsphereVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumePath")]
    pub volume_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIP")]
    pub cluster_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIPs")]
    pub external_i_ps: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalName")]
    pub external_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckNodePort")]
    pub health_check_node_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    pub ip_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PeerIstioControlPlaneSidecarInjectorServiceMetadata>,
    pub ports: Vec<PeerIstioControlPlaneSidecarInjectorServicePorts>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishNotReadyAddresses")]
    pub publish_not_ready_addresses: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinityConfig")]
    pub session_affinity_config: Option<PeerIstioControlPlaneSidecarInjectorServiceSessionAffinityConfig>,
    #[serde(rename = "type")]
    pub r#type: PeerIstioControlPlaneSidecarInjectorServiceType,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorServiceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorServicePorts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<i32>,
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorServiceSessionAffinityConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIP")]
    pub client_ip: Option<PeerIstioControlPlaneSidecarInjectorServiceSessionAffinityConfigClientIp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorServiceSessionAffinityConfigClientIp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneSidecarInjectorServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTemplates")]
    pub custom_templates: Option<Vec<PeerIstioControlPlaneSidecarInjectorTemplatesCustomTemplates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sidecar: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneSidecarInjectorTemplatesCustomTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTelemetryV2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTags")]
    pub custom_tags: Option<BTreeMap<String, PeerIstioControlPlaneTracerCustomTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<PeerIstioControlPlaneTracerDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lightstep: Option<PeerIstioControlPlaneTracerLightstep>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPathTagLength")]
    pub max_path_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusAgent")]
    pub open_census_agent: Option<PeerIstioControlPlaneTracerOpenCensusAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sampling: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stackdriver: Option<PeerIstioControlPlaneTracerStackdriver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneTracerTlsSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zipkin: Option<PeerIstioControlPlaneTracerZipkin>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerCustomTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<PeerIstioControlPlaneTracerCustomTagsEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<PeerIstioControlPlaneTracerCustomTagsHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub literal: Option<PeerIstioControlPlaneTracerCustomTagsLiteral>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerCustomTagsEnvironment {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerCustomTagsHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerCustomTagsLiteral {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerDatadog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerLightstep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerOpenCensusAgent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerStackdriver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneTracerTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneTracerTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneTracerZipkin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRootCertificate")]
    pub ca_root_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checksums: Option<PeerIstioControlPlaneStatusChecksums>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterID")]
    pub cluster_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorMessage")]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayAddress")]
    pub gateway_address: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "injectionNamespaces")]
    pub injection_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "istioControlPlaneName")]
    pub istio_control_plane_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "istiodAddresses")]
    pub istiod_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshConfig")]
    pub mesh_config: Option<PeerIstioControlPlaneStatusMeshConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<PeerIstioControlPlaneStatusStatus>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusChecksums {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshConfig")]
    pub mesh_config: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sidecarInjector")]
    pub sidecar_injector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogEncoding")]
    pub access_log_encoding: Option<PeerIstioControlPlaneStatusMeshConfigAccessLogEncoding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFile")]
    pub access_log_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFormat")]
    pub access_log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<PeerIstioControlPlaneStatusMeshConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<Vec<PeerIstioControlPlaneStatusMeshConfigCaCertificates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificates: Option<Vec<PeerIstioControlPlaneStatusMeshConfigCertificates>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configSources")]
    pub config_sources: Option<Vec<PeerIstioControlPlaneStatusMeshConfigConfigSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultConfig")]
    pub default_config: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDestinationRuleExportTo")]
    pub default_destination_rule_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHttpRetryPolicy")]
    pub default_http_retry_policy: Option<PeerIstioControlPlaneStatusMeshConfigDefaultHttpRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultProviders")]
    pub default_providers: Option<PeerIstioControlPlaneStatusMeshConfigDefaultProviders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultServiceExportTo")]
    pub default_service_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVirtualServiceExportTo")]
    pub default_virtual_service_export_to: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableEnvoyListenerLog")]
    pub disable_envoy_listener_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoverySelectors")]
    pub discovery_selectors: Option<Vec<PeerIstioControlPlaneStatusMeshConfigDiscoverySelectors>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoMtls")]
    pub enable_auto_mtls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEnvoyAccessLogService")]
    pub enable_envoy_access_log_service: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrometheusMerge")]
    pub enable_prometheus_merge: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTracing")]
    pub enable_tracing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extensionProviders")]
    pub extension_providers: Option<Vec<PeerIstioControlPlaneStatusMeshConfigExtensionProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "h2UpgradePolicy")]
    pub h2_upgrade_policy: Option<PeerIstioControlPlaneStatusMeshConfigH2UpgradePolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundClusterStatName")]
    pub inbound_cluster_stat_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClass")]
    pub ingress_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressControllerMode")]
    pub ingress_controller_mode: Option<PeerIstioControlPlaneStatusMeshConfigIngressControllerMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressSelector")]
    pub ingress_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressService")]
    pub ingress_service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbSetting")]
    pub locality_lb_setting: Option<PeerIstioControlPlaneStatusMeshConfigLocalityLbSetting>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshMTLS")]
    pub mesh_mtls: Option<PeerIstioControlPlaneStatusMeshConfigMeshMtls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundClusterStatName")]
    pub outbound_cluster_stat_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundTrafficPolicy")]
    pub outbound_traffic_policy: Option<PeerIstioControlPlaneStatusMeshConfigOutboundTrafficPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathNormalization")]
    pub path_normalization: Option<PeerIstioControlPlaneStatusMeshConfigPathNormalization>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolDetectionTimeout")]
    pub protocol_detection_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHttpPort")]
    pub proxy_http_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyListenPort")]
    pub proxy_listen_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootNamespace")]
    pub root_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSettings")]
    pub service_settings: Option<Vec<PeerIstioControlPlaneStatusMeshConfigServiceSettings>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneStatusMeshConfigTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomain")]
    pub trust_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomainAliases")]
    pub trust_domain_aliases: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyCertificateAtClient")]
    pub verify_certificate_at_client: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigAccessLogEncoding {
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "JSON")]
    Json,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "istiodSide")]
    pub istiod_side: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneStatusMeshConfigCaTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigCaTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneStatusMeshConfigCaTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigCaTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigCaCertificates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSigners")]
    pub cert_signers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pem: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spiffeBundleUrl")]
    pub spiffe_bundle_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustDomains")]
    pub trust_domains: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigCertificates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsNames")]
    pub dns_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigConfigSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscribedResources")]
    pub subscribed_resources: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneStatusMeshConfigConfigSourcesTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigConfigSourcesTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneStatusMeshConfigConfigSourcesTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigConfigSourcesTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryPath")]
    pub binary_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificatesPem")]
    pub ca_certificates_pem: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configPath")]
    pub config_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneAuthPolicy")]
    pub control_plane_auth_policy: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigControlPlaneAuthPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigFile")]
    pub custom_config_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryAddress")]
    pub discovery_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryRefreshDelay")]
    pub discovery_refresh_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainDuration")]
    pub drain_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyAccessLogService")]
    pub envoy_access_log_service: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetricsService")]
    pub envoy_metrics_service: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetricsServiceAddress")]
    pub envoy_metrics_service_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraStatTags")]
    pub extra_stat_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayTopology")]
    pub gateway_topology: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigGatewayTopology>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdApplicationUntilProxyStarts")]
    pub hold_application_until_proxy_starts: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interceptionMode")]
    pub interception_mode: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigInterceptionMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshId")]
    pub mesh_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeyProvider")]
    pub private_key_provider: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyAdminPort")]
    pub proxy_admin_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyBootstrapTemplatePath")]
    pub proxy_bootstrap_template_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyMetadata")]
    pub proxy_metadata: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyStatsMatcher")]
    pub proxy_stats_matcher: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigProxyStatsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeValues")]
    pub runtime_values: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceCluster")]
    pub service_cluster: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statNameLength")]
    pub stat_name_length: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statsdUdpAddress")]
    pub statsd_udp_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusPort")]
    pub status_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationDrainDuration")]
    pub termination_drain_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracingServiceName")]
    pub tracing_service_name: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingServiceName>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinAddress")]
    pub zipkin_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigControlPlaneAuthPolicy {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "MUTUAL_TLS")]
    MutualTls,
    #[serde(rename = "INHERIT")]
    Inherit,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyAccessLogServiceTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTcpKeepalive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigEnvoyMetricsServiceTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigGatewayTopology {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigGatewayTopologyForwardClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numTrustedProxies")]
    pub num_trusted_proxies: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigGatewayTopologyForwardClientCertDetails {
    #[serde(rename = "UNDEFINED")]
    Undefined,
    #[serde(rename = "SANITIZE")]
    Sanitize,
    #[serde(rename = "FORWARD_ONLY")]
    ForwardOnly,
    #[serde(rename = "APPEND_FORWARD")]
    AppendForward,
    #[serde(rename = "SANITIZE_SET")]
    SanitizeSet,
    #[serde(rename = "ALWAYS_FORWARD_ONLY")]
    AlwaysForwardOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigImage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigInterceptionMode {
    #[serde(rename = "REDIRECT")]
    Redirect,
    #[serde(rename = "TPROXY")]
    Tproxy,
    #[serde(rename = "NONE")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cryptomb: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProviderCryptomb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qat: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProviderQat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProviderCryptomb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollDelay")]
    pub poll_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigPrivateKeyProviderQat {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollDelay")]
    pub poll_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigProxyStatsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionPrefixes")]
    pub inclusion_prefixes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionRegexps")]
    pub inclusion_regexps: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionSuffixes")]
    pub inclusion_suffixes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeHttpGetHttpHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sSaJwtPath")]
    pub k8s_sa_jwt_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTags")]
    pub custom_tags: Option<BTreeMap<String, PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lightstep: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingLightstep>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPathTagLength")]
    pub max_path_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusAgent")]
    pub open_census_agent: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingOpenCensusAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sampling: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stackdriver: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingStackdriver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSettings")]
    pub tls_settings: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingTlsSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zipkin: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingZipkin>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub literal: Option<PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsLiteral>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsEnvironment {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingCustomTagsLiteral {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingDatadog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingLightstep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingOpenCensusAgent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingStackdriver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingTlsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificates")]
    pub ca_certificates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialName")]
    pub credential_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    pub mode: PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingTlsSettingsMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingTlsSettingsMode {
    #[serde(rename = "DISABLE")]
    Disable,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "MUTUAL")]
    Mutual,
    #[serde(rename = "ISTIO_MUTUAL")]
    IstioMutual,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingZipkin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigDefaultConfigTracingServiceName {
    #[serde(rename = "APP_LABEL_AND_NAMESPACE")]
    AppLabelAndNamespace,
    #[serde(rename = "CANONICAL_NAME_ONLY")]
    CanonicalNameOnly,
    #[serde(rename = "CANONICAL_NAME_AND_NAMESPACE")]
    CanonicalNameAndNamespace,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultHttpRetryPolicy {
    pub attempts: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryRemoteLocalities")]
    pub retry_remote_localities: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDefaultProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogging")]
    pub access_logging: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDiscoverySelectors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PeerIstioControlPlaneStatusMeshConfigDiscoverySelectorsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigDiscoverySelectorsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProviders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyExtAuthzGrpc")]
    pub envoy_ext_authz_grpc: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyExtAuthzHttp")]
    pub envoy_ext_authz_http: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyFileAccessLog")]
    pub envoy_file_access_log: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLog>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyHttpAls")]
    pub envoy_http_als: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyHttpAls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyOtelAls")]
    pub envoy_otel_als: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyTcpAls")]
    pub envoy_tcp_als: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyTcpAls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lightstep: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersLightstep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opencensus: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersOpencensus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opentelemetry: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersOpentelemetry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersPrometheus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skywalking: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersSkywalking>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stackdriver: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersStackdriver>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zipkin: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersZipkin>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersDatadog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestBodyInCheck")]
    pub include_request_body_in_check: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzGrpcIncludeRequestBodyInCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzGrpcIncludeRequestBodyInCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToDownstreamOnAllow")]
    pub headers_to_downstream_on_allow: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToDownstreamOnDeny")]
    pub headers_to_downstream_on_deny: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToUpstreamOnAllow")]
    pub headers_to_upstream_on_allow: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeAdditionalHeadersInCheck")]
    pub include_additional_headers_in_check: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHeadersInCheck")]
    pub include_headers_in_check: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestBodyInCheck")]
    pub include_request_body_in_check: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzHttpIncludeRequestBodyInCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestHeadersInCheck")]
    pub include_request_headers_in_check: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyExtAuthzHttpIncludeRequestBodyInCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormatLabels>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyFileAccessLogLogFormatLabels {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyHttpAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRequestHeadersToLog")]
    pub additional_request_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseHeadersToLog")]
    pub additional_response_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseTrailersToLog")]
    pub additional_response_trailers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAlsLogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAlsLogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAlsLogFormatLabels>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyOtelAlsLogFormatLabels {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersEnvoyTcpAls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersLightstep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersOpencensus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersOpentelemetry {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersPrometheus {
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersSkywalking {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersStackdriver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<PeerIstioControlPlaneStatusMeshConfigExtensionProvidersStackdriverLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersStackdriverLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigExtensionProvidersZipkin {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTagLength")]
    pub max_tag_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigH2UpgradePolicy {
    #[serde(rename = "DO_NOT_UPGRADE")]
    DoNotUpgrade,
    #[serde(rename = "UPGRADE")]
    Upgrade,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigIngressControllerMode {
    #[serde(rename = "UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "OFF")]
    Off,
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "STRICT")]
    Strict,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigLocalityLbSetting {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribute: Option<Vec<PeerIstioControlPlaneStatusMeshConfigLocalityLbSettingDistribute>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failover: Option<Vec<PeerIstioControlPlaneStatusMeshConfigLocalityLbSettingFailover>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverPriority")]
    pub failover_priority: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigLocalityLbSettingDistribute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<BTreeMap<String, i64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigLocalityLbSettingFailover {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigMeshMtls {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minProtocolVersion")]
    pub min_protocol_version: Option<PeerIstioControlPlaneStatusMeshConfigMeshMtlsMinProtocolVersion>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigMeshMtlsMinProtocolVersion {
    #[serde(rename = "TLS_AUTO")]
    TlsAuto,
    #[serde(rename = "TLSV1_2")]
    Tlsv12,
    #[serde(rename = "TLSV1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigOutboundTrafficPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<PeerIstioControlPlaneStatusMeshConfigOutboundTrafficPolicyMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigOutboundTrafficPolicyMode {
    #[serde(rename = "REGISTRY_ONLY")]
    RegistryOnly,
    #[serde(rename = "ALLOW_ANY")]
    AllowAny,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigPathNormalization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub normalization: Option<PeerIstioControlPlaneStatusMeshConfigPathNormalizationNormalization>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusMeshConfigPathNormalizationNormalization {
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "BASE")]
    Base,
    #[serde(rename = "MERGE_SLASHES")]
    MergeSlashes,
    #[serde(rename = "DECODE_AND_MERGE_SLASHES")]
    DecodeAndMergeSlashes,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigServiceSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<PeerIstioControlPlaneStatusMeshConfigServiceSettingsSettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigServiceSettingsSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterLocal")]
    pub cluster_local: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PeerIstioControlPlaneStatusMeshConfigTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PeerIstioControlPlaneStatusStatus {
    Unspecified,
    Created,
    ReconcileFailed,
    Reconciling,
    Available,
    Unmanaged,
}

