// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/extensions.kubeblocks.io/v1alpha1/addons.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// AddonSpec defines the desired state of an add-on.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "extensions.kubeblocks.io", version = "v1alpha1", kind = "Addon", plural = "addons")]
#[kube(status = "AddonStatus")]
#[kube(schema = "disabled")]
pub struct AddonSpec {
    /// Specifies the CLI plugin installation specifications.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliPlugins")]
    pub cli_plugins: Option<Vec<AddonCliPlugins>>,
    /// Specifies the default installation parameters.
    #[serde(rename = "defaultInstallValues")]
    pub default_install_values: Vec<AddonDefaultInstallValues>,
    /// Specifies the description of the add-on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Represents the Helm installation specifications. This is only processed when the type is set to 'helm'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<AddonHelm>,
    /// Defines the installation parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub install: Option<AddonInstall>,
    /// Represents the installable specifications of the add-on. This includes the selector and auto-install settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installable: Option<AddonInstallable>,
    /// Specifies the provider of the add-on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// Defines the type of the add-on. The only valid value is 'helm'.
    #[serde(rename = "type")]
    pub r#type: AddonType,
    /// Indicates the version of the add-on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonCliPlugins {
    /// Provides a brief description of the plugin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Defines the index repository of the plugin.
    #[serde(rename = "indexRepository")]
    pub index_repository: String,
    /// Specifies the name of the plugin.
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonDefaultInstallValues {
    /// Can be set to true if there are no specific installation attributes to be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the installation specifications for extra items.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extras: Option<Vec<AddonDefaultInstallValuesExtras>>,
    /// Indicates whether the Persistent Volume is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<bool>,
    /// Specifies the number of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Specifies the resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonDefaultInstallValuesResources>,
    /// Indicates the default selectors for add-on installations. If multiple selectors are provided, all selectors must evaluate to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<AddonDefaultInstallValuesSelectors>>,
    /// Specifies the name of the storage class.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
    /// Specifies the tolerations in a JSON array string format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonDefaultInstallValuesExtras {
    /// Specifies the name of the item.
    pub name: String,
    /// Indicates whether the Persistent Volume is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<bool>,
    /// Specifies the number of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Specifies the resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonDefaultInstallValuesExtrasResources>,
    /// Specifies the name of the storage class.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
    /// Specifies the tolerations in a JSON array string format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

/// Specifies the resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonDefaultInstallValuesExtrasResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified; otherwise, it defaults to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Specifies the resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonDefaultInstallValuesResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified; otherwise, it defaults to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonDefaultInstallValuesSelectors {
    /// The selector key. Valid values are KubeVersion, KubeGitVersion and KubeProvider. 
    ///  - `KubeVersion` the semver expression of Kubernetes versions, i.e., v1.24. - `KubeGitVersion` may contain distro. info., i.e., v1.24.4+eks. - `KubeProvider` the Kubernetes provider, i.e., aws, gcp, azure, huaweiCloud, tencentCloud etc.
    pub key: AddonDefaultInstallValuesSelectorsKey,
    /// Represents a key's relationship to a set of values. Valid operators are Contains, NotIn, DoesNotContain, MatchRegex, and DoesNoteMatchRegex. 
    ///  Possible enum values: 
    ///  - `Contains` line contains a string. - `DoesNotContain` line does not contain a string. - `MatchRegex` line contains a match to the regular expression. - `DoesNotMatchRegex` line does not contain a match to the regular expression.
    pub operator: AddonDefaultInstallValuesSelectorsOperator,
    /// Represents an array of string values. This serves as an "OR" expression to the operator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonDefaultInstallValuesSelectorsKey {
    KubeGitVersion,
    KubeVersion,
    KubeProvider,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonDefaultInstallValuesSelectorsOperator {
    Contains,
    DoesNotContain,
    MatchRegex,
    DoesNotMatchRegex,
}

/// Represents the Helm installation specifications. This is only processed when the type is set to 'helm'.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelm {
    /// Specifies the URL location of the Helm Chart.
    #[serde(rename = "chartLocationURL")]
    pub chart_location_url: String,
    /// Defines the image of Helm charts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chartsImage")]
    pub charts_image: Option<String>,
    /// Defines the path of Helm charts in the image. This path is used to copy Helm charts from the image to the shared volume. The default path is "/charts".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chartsPathInImage")]
    pub charts_path_in_image: Option<String>,
    /// Defines the options for Helm release installation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installOptions")]
    pub install_options: Option<BTreeMap<String, String>>,
    /// Defines the set values for Helm release installation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installValues")]
    pub install_values: Option<AddonHelmInstallValues>,
    /// Defines the mapping of add-on normalized resources parameters to Helm values' keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesMapping")]
    pub values_mapping: Option<AddonHelmValuesMapping>,
}

/// Defines the set values for Helm release installation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmInstallValues {
    /// Selects a key from a ConfigMap item list. The value can be a JSON or YAML string content. Use a key name with ".json", ".yaml", or ".yml" extension to specify a content type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRefs")]
    pub config_map_refs: Option<Vec<AddonHelmInstallValuesConfigMapRefs>>,
    /// Selects a key from a Secrets item list. The value can be a JSON or YAML string content. Use a key name with ".json", ".yaml", or ".yml" extension to specify a content type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRefs")]
    pub secret_refs: Option<Vec<AddonHelmInstallValuesSecretRefs>>,
    /// JSON values set during Helm installation. Multiple or separate values can be specified with commas (key1=jsonval1,key2=jsonval2).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setJSONValues")]
    pub set_json_values: Option<Vec<String>>,
    /// Values set during Helm installation. Multiple or separate values can be specified with commas (key1=val1,key2=val2).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setValues")]
    pub set_values: Option<Vec<String>>,
    /// Specifies the URL location of the values file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub urls: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmInstallValuesConfigMapRefs {
    /// Specifies the key to be selected.
    pub key: String,
    /// Defines the name of the object being referred to.
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmInstallValuesSecretRefs {
    /// Specifies the key to be selected.
    pub key: String,
    /// Defines the name of the object being referred to.
    pub name: String,
}

/// Defines the mapping of add-on normalized resources parameters to Helm values' keys.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMapping {
    /// Helm value mapping items for extra items.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extras: Option<Vec<AddonHelmValuesMappingExtras>>,
    /// Defines the "key" mapping values. The valid key is tolerations. Enum values explained: 
    ///  - `tolerations` sets the toleration mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonMap")]
    pub json_map: Option<AddonHelmValuesMappingJsonMap>,
    /// Sets resources related mapping keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonHelmValuesMappingResources>,
    /// Defines the "key" mapping values. Valid keys include `replicaCount`, `persistentVolumeEnabled`, and `storageClass`. Enum values explained: 
    ///  - `replicaCount` sets the replicaCount value mapping key. - `persistentVolumeEnabled` sets the persistent volume enabled mapping key. - `storageClass` sets the storageClass mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueMap")]
    pub value_map: Option<AddonHelmValuesMappingValueMap>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtras {
    /// Defines the "key" mapping values. The valid key is tolerations. Enum values explained: 
    ///  - `tolerations` sets the toleration mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonMap")]
    pub json_map: Option<AddonHelmValuesMappingExtrasJsonMap>,
    /// Name of the item.
    pub name: String,
    /// Sets resources related mapping keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonHelmValuesMappingExtrasResources>,
    /// Defines the "key" mapping values. Valid keys include `replicaCount`, `persistentVolumeEnabled`, and `storageClass`. Enum values explained: 
    ///  - `replicaCount` sets the replicaCount value mapping key. - `persistentVolumeEnabled` sets the persistent volume enabled mapping key. - `storageClass` sets the storageClass mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueMap")]
    pub value_map: Option<AddonHelmValuesMappingExtrasValueMap>,
}

/// Defines the "key" mapping values. The valid key is tolerations. Enum values explained: 
///  - `tolerations` sets the toleration mapping key.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtrasJsonMap {
    /// Specifies the toleration mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

/// Sets resources related mapping keys.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtrasResources {
    /// Specifies the key used for mapping both CPU requests and limits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<AddonHelmValuesMappingExtrasResourcesCpu>,
    /// Specifies the key used for mapping both Memory requests and limits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<AddonHelmValuesMappingExtrasResourcesMemory>,
    /// Specifies the key used for mapping the storage size value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<String>,
}

/// Specifies the key used for mapping both CPU requests and limits.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtrasResourcesCpu {
    /// Specifies the mapping key for the limit value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<String>,
    /// Specifies the mapping key for the request value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<String>,
}

/// Specifies the key used for mapping both Memory requests and limits.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtrasResourcesMemory {
    /// Specifies the mapping key for the limit value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<String>,
    /// Specifies the mapping key for the request value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<String>,
}

/// Defines the "key" mapping values. Valid keys include `replicaCount`, `persistentVolumeEnabled`, and `storageClass`. Enum values explained: 
///  - `replicaCount` sets the replicaCount value mapping key. - `persistentVolumeEnabled` sets the persistent volume enabled mapping key. - `storageClass` sets the storageClass mapping key.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingExtrasValueMap {
    /// Indicates whether the persistent volume is enabled in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<String>,
    /// Defines the key for setting the replica count in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<String>,
    /// Specifies the key for setting the storage class in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Defines the "key" mapping values. The valid key is tolerations. Enum values explained: 
///  - `tolerations` sets the toleration mapping key.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingJsonMap {
    /// Specifies the toleration mapping key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

/// Sets resources related mapping keys.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingResources {
    /// Specifies the key used for mapping both CPU requests and limits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<AddonHelmValuesMappingResourcesCpu>,
    /// Specifies the key used for mapping both Memory requests and limits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<AddonHelmValuesMappingResourcesMemory>,
    /// Specifies the key used for mapping the storage size value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<String>,
}

/// Specifies the key used for mapping both CPU requests and limits.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingResourcesCpu {
    /// Specifies the mapping key for the limit value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<String>,
    /// Specifies the mapping key for the request value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<String>,
}

/// Specifies the key used for mapping both Memory requests and limits.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingResourcesMemory {
    /// Specifies the mapping key for the limit value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<String>,
    /// Specifies the mapping key for the request value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<String>,
}

/// Defines the "key" mapping values. Valid keys include `replicaCount`, `persistentVolumeEnabled`, and `storageClass`. Enum values explained: 
///  - `replicaCount` sets the replicaCount value mapping key. - `persistentVolumeEnabled` sets the persistent volume enabled mapping key. - `storageClass` sets the storageClass mapping key.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonHelmValuesMappingValueMap {
    /// Indicates whether the persistent volume is enabled in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<String>,
    /// Defines the key for setting the replica count in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<String>,
    /// Specifies the key for setting the storage class in the Helm values map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
}

/// Defines the installation parameters.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstall {
    /// Can be set to true if there are no specific installation attributes to be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the installation specifications for extra items.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extras: Option<Vec<AddonInstallExtras>>,
    /// Indicates whether the Persistent Volume is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<bool>,
    /// Specifies the number of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Specifies the resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonInstallResources>,
    /// Specifies the name of the storage class.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
    /// Specifies the tolerations in a JSON array string format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstallExtras {
    /// Specifies the name of the item.
    pub name: String,
    /// Indicates whether the Persistent Volume is enabled or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeEnabled")]
    pub persistent_volume_enabled: Option<bool>,
    /// Specifies the number of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Specifies the resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<AddonInstallExtrasResources>,
    /// Specifies the name of the storage class.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClass")]
    pub storage_class: Option<String>,
    /// Specifies the tolerations in a JSON array string format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<String>,
}

/// Specifies the resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstallExtrasResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified; otherwise, it defaults to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Specifies the resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstallResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified; otherwise, it defaults to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Represents the installable specifications of the add-on. This includes the selector and auto-install settings.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstallable {
    /// Indicates whether an add-on should be installed automatically.
    #[serde(rename = "autoInstall")]
    pub auto_install: bool,
    /// Specifies the selectors for add-on installation. If multiple selectors are provided, they must all evaluate to true for the add-on to be installed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<AddonInstallableSelectors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonInstallableSelectors {
    /// The selector key. Valid values are KubeVersion, KubeGitVersion and KubeProvider. 
    ///  - `KubeVersion` the semver expression of Kubernetes versions, i.e., v1.24. - `KubeGitVersion` may contain distro. info., i.e., v1.24.4+eks. - `KubeProvider` the Kubernetes provider, i.e., aws, gcp, azure, huaweiCloud, tencentCloud etc.
    pub key: AddonInstallableSelectorsKey,
    /// Represents a key's relationship to a set of values. Valid operators are Contains, NotIn, DoesNotContain, MatchRegex, and DoesNoteMatchRegex. 
    ///  Possible enum values: 
    ///  - `Contains` line contains a string. - `DoesNotContain` line does not contain a string. - `MatchRegex` line contains a match to the regular expression. - `DoesNotMatchRegex` line does not contain a match to the regular expression.
    pub operator: AddonInstallableSelectorsOperator,
    /// Represents an array of string values. This serves as an "OR" expression to the operator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonInstallableSelectorsKey {
    KubeGitVersion,
    KubeVersion,
    KubeProvider,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonInstallableSelectorsOperator {
    Contains,
    DoesNotContain,
    MatchRegex,
    DoesNotMatchRegex,
}

/// AddonSpec defines the desired state of an add-on.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonType {
    Helm,
}

/// AddonStatus defines the observed state of an add-on.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AddonStatus {
    /// Provides a detailed description of the current state of add-on API installation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Represents the most recent generation observed for this add-on. It corresponds to the add-on's generation, which is updated on mutation by the API Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Defines the current installation phase of the add-on. It can take one of the following values: `Disabled`, `Enabled`, `Failed`, `Enabling`, `Disabling`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<AddonStatusPhase>,
}

/// AddonStatus defines the observed state of an add-on.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AddonStatusPhase {
    Disabled,
    Enabled,
    Failed,
    Enabling,
    Disabling,
}

