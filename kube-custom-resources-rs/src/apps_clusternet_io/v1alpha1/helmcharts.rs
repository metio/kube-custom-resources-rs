// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/clusternet/clusternet/apps.clusternet.io/v1alpha1/helmcharts.yaml --derive=Default --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// HelmChartSpec defines the spec of HelmChart
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "apps.clusternet.io", version = "v1alpha1", kind = "HelmChart", plural = "helmcharts")]
#[kube(namespaced)]
#[kube(status = "HelmChartStatus")]
#[kube(schema = "disabled")]
pub struct HelmChartSpec {
    /// Atomic, for install case, if true, will uninstall failed release.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub atomic: Option<bool>,
    /// Chart is the name of a Helm Chart in the Repository.
    pub chart: String,
    /// ChartPullSecret is the name of the secret that contains the auth information for the chart repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chartPullSecret")]
    pub chart_pull_secret: Option<HelmChartChartPullSecret>,
    /// CreateNamespace create namespace when install helm release
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createNamespace")]
    pub create_namespace: Option<bool>,
    /// DisableHooks disables hook processing if set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHooks")]
    pub disable_hooks: Option<bool>,
    /// Force will, if set to `true`, ignore certain warnings and perform the upgrade anyway.
    /// This should be used with caution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    /// Replace will re-use the given name, only if that name is a deleted release that remains in the history.
    /// This is unsafe in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replace: Option<bool>,
    /// ReplaceCRDs replace all crds in chart and sub charts before upgrade and install, not working when SkipCRDs true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replaceCRDs")]
    pub replace_cr_ds: Option<bool>,
    /// a Helm Repository to be used.
    /// OCI-based registries are also supported.
    /// For example, https://charts.bitnami.com/bitnami or oci://localhost:5000/helm-charts
    pub repo: String,
    /// SkipCRDs skips installing CRDs when install flag is enabled during upgrade
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCRDs")]
    pub skip_cr_ds: Option<bool>,
    /// TargetNamespace specifies the namespace to install this HelmChart
    #[serde(rename = "targetNamespace")]
    pub target_namespace: String,
    /// TimeoutSeconds is the timeout of the chart to be install/upgrade/rollback/uninstall
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
    /// UpgradeAtomic, for upgrade case, if true, will roll back failed release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeAtomic")]
    pub upgrade_atomic: Option<bool>,
    /// ChartVersion is the version of the chart to be deployed.
    /// It will be defaulted with current latest version if empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Wait determines whether the wait operation should be performed after helm install, upgrade or uninstall is requested.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<bool>,
    /// WaitForJobs determines whether the wait operation for the Jobs should be performed after the upgrade is requested.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForJob")]
    pub wait_for_job: Option<bool>,
}

/// ChartPullSecret is the name of the secret that contains the auth information for the chart repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HelmChartChartPullSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// HelmChartStatus defines the observed state of HelmChart
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HelmChartStatus {
    /// Phase denotes the phase of HelmChart
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<HelmChartStatusPhase>,
    /// Reason indicates the reason of HelmChartPhase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

/// HelmChartStatus defines the observed state of HelmChart
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HelmChartStatusPhase {
    Found,
    NotFound,
}

