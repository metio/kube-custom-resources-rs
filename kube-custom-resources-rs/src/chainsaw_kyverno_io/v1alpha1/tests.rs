// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kyverno/chainsaw/chainsaw.kyverno.io/v1alpha1/tests.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Test spec.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "chainsaw.kyverno.io", version = "v1alpha1", kind = "Test", plural = "tests")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TestSpec {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestBindings>>,
    /// Catch defines what the steps will execute when an error happens.
    /// This will be combined with catch handlers defined at the step level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub catch: Option<Vec<TestCatch>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestClusters>>,
    /// Concurrent determines whether the test should run concurrently with other tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrent: Option<bool>,
    /// DelayBeforeCleanup adds a delay between the time a test ends and the time cleanup starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeCleanup")]
    pub delay_before_cleanup: Option<String>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestDeletionPropagationPolicy>,
    /// Description contains a description of the test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// ForceTerminationGracePeriod forces the termination grace period on pods, statefulsets, daemonsets and deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceTerminationGracePeriod")]
    pub force_termination_grace_period: Option<String>,
    /// Namespace determines whether the test should run in a random ephemeral namespace or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// NamespaceTemplate defines a template to create the test namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceTemplate")]
    pub namespace_template: Option<BTreeMap<String, serde_json::Value>>,
    /// Scenarios defines test scenarios.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scenarios: Option<Vec<TestScenarios>>,
    /// Skip determines whether the test should skipped.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip: Option<bool>,
    /// SkipDelete determines whether the resources created by the test should be deleted after the test is executed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipDelete")]
    pub skip_delete: Option<bool>,
    /// Steps defining the test.
    pub steps: Vec<TestSteps>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeouts for the test. Overrides the global timeouts set in the Configuration on a per operation basis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<TestTimeouts>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// CatchFinally defines actions to be executed in catch, finally and cleanup blocks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatch {
    /// Command defines a command to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<TestCatchCommand>,
    /// Delete represents a deletion operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<TestCatchDelete>,
    /// Describe determines the resource describe collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub describe: Option<TestCatchDescribe>,
    /// Description contains a description of the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Events determines the events collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<TestCatchEvents>,
    /// Get determines the resource get collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get: Option<TestCatchGet>,
    /// PodLogs determines the pod logs collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podLogs")]
    pub pod_logs: Option<TestCatchPodLogs>,
    /// Script defines a script to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<TestCatchScript>,
    /// Sleep defines zzzz.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<TestCatchSleep>,
    /// Wait determines the resource wait collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<TestCatchWait>,
}

/// Command defines a command to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchCommand {
    /// Args is the command arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestCatchCommandBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchCommandClusters>>,
    /// Entrypoint is the command entry point to run.
    pub entrypoint: String,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestCatchCommandEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestCatchCommandOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchCommandBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchCommandClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchCommandEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchCommandOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDelete {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestCatchDeleteBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchDeleteClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestCatchDeleteDeletionPropagationPolicy>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestCatchDeleteExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Ref determines objects to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<TestCatchDeleteRef>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDeleteBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDeleteClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestCatchDeleteDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDeleteExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ref determines objects to be deleted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDeleteRef {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Label selector to match objects to delete
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Describe determines the resource describe collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDescribe {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchDescribeClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Show Events indicates whether to include related events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "showEvents")]
    pub show_events: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchDescribeClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Events determines the events collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchEvents {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchEventsClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchEventsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Get determines the resource get collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchGet {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchGetClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchGetClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// PodLogs determines the pod logs collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchPodLogs {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchPodLogsClusters>>,
    /// Container in pod to get logs from else --all-containers is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Tail is the number of last lines to collect from pods. If omitted or zero,
    /// then the default is 10 if you use a selector, or -1 (all) if you use a pod name.
    /// This matches default behavior of `kubectl logs`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tail: Option<i64>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchPodLogsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Script defines a script to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchScript {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestCatchScriptBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchScriptClusters>>,
    /// Content defines a shell script (run with "sh -c ...").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestCatchScriptEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestCatchScriptOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchScriptBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchScriptClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchScriptEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchScriptOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Sleep defines zzzz.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchSleep {
    /// Duration is the delay used for sleeping.
    pub duration: String,
}

/// Wait determines the resource wait collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWait {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestCatchWaitClusters>>,
    /// WaitFor specifies the condition to wait for.
    #[serde(rename = "for")]
    pub r#for: TestCatchWaitFor,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWaitClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// WaitFor specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWaitFor {
    /// Condition specifies the condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<TestCatchWaitForCondition>,
    /// Deletion specifies parameters for waiting on a resource's deletion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<TestCatchWaitForDeletion>,
    /// JsonPath specifies the json path condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<TestCatchWaitForJsonPath>,
}

/// Condition specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWaitForCondition {
    /// Name defines the specific condition to wait for, e.g., "Available", "Ready".
    pub name: String,
    /// Value defines the specific condition status to wait for, e.g., "True", "False".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Deletion specifies parameters for waiting on a resource's deletion.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWaitForDeletion {
}

/// JsonPath specifies the json path condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestCatchWaitForJsonPath {
    /// Path defines the json path to wait for, e.g. '{.status.phase}'.
    pub path: String,
    /// Value defines the expected value to wait for, e.g., "Running".
    pub value: String,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Test spec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Scenario defines per scenario bindings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestScenarios {
    /// Bindings defines binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestScenariosBindings>>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestScenariosBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// TestStep contains the test step definition used in a test spec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestSteps {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsBindings>>,
    /// Catch defines what the step will execute when an error happens.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub catch: Option<Vec<TestStepsCatch>>,
    /// Cleanup defines what will be executed after the test is terminated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<Vec<TestStepsCleanup>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in both the Configuration and the Test.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestStepsDeletionPropagationPolicy>,
    /// Description contains a description of the test step.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Finally defines what the step will execute after the step is terminated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finally: Option<Vec<TestStepsFinally>>,
    /// Name of the step.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// SkipDelete determines whether the resources created by the step should be deleted after the test step is executed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipDelete")]
    pub skip_delete: Option<bool>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeouts for the test step. Overrides the global timeouts set in the Configuration and the timeouts eventually set in the Test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<TestStepsTimeouts>,
    /// Try defines what the step will try to execute.
    #[serde(rename = "try")]
    pub r#try: Vec<TestStepsTry>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// CatchFinally defines actions to be executed in catch, finally and cleanup blocks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatch {
    /// Command defines a command to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<TestStepsCatchCommand>,
    /// Delete represents a deletion operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<TestStepsCatchDelete>,
    /// Describe determines the resource describe collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub describe: Option<TestStepsCatchDescribe>,
    /// Description contains a description of the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Events determines the events collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<TestStepsCatchEvents>,
    /// Get determines the resource get collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get: Option<TestStepsCatchGet>,
    /// PodLogs determines the pod logs collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podLogs")]
    pub pod_logs: Option<TestStepsCatchPodLogs>,
    /// Script defines a script to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<TestStepsCatchScript>,
    /// Sleep defines zzzz.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<TestStepsCatchSleep>,
    /// Wait determines the resource wait collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<TestStepsCatchWait>,
}

/// Command defines a command to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchCommand {
    /// Args is the command arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCatchCommandBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchCommandClusters>>,
    /// Entrypoint is the command entry point to run.
    pub entrypoint: String,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsCatchCommandEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsCatchCommandOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchCommandBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchCommandClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchCommandEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchCommandOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDelete {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCatchDeleteBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchDeleteClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestStepsCatchDeleteDeletionPropagationPolicy>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsCatchDeleteExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Ref determines objects to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<TestStepsCatchDeleteRef>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDeleteBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDeleteClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestStepsCatchDeleteDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDeleteExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ref determines objects to be deleted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDeleteRef {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Label selector to match objects to delete
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Describe determines the resource describe collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDescribe {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchDescribeClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Show Events indicates whether to include related events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "showEvents")]
    pub show_events: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchDescribeClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Events determines the events collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchEvents {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchEventsClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchEventsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Get determines the resource get collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchGet {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchGetClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchGetClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// PodLogs determines the pod logs collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchPodLogs {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchPodLogsClusters>>,
    /// Container in pod to get logs from else --all-containers is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Tail is the number of last lines to collect from pods. If omitted or zero,
    /// then the default is 10 if you use a selector, or -1 (all) if you use a pod name.
    /// This matches default behavior of `kubectl logs`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tail: Option<i64>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchPodLogsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Script defines a script to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchScript {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCatchScriptBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchScriptClusters>>,
    /// Content defines a shell script (run with "sh -c ...").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsCatchScriptEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsCatchScriptOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchScriptBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchScriptClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchScriptEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchScriptOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Sleep defines zzzz.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchSleep {
    /// Duration is the delay used for sleeping.
    pub duration: String,
}

/// Wait determines the resource wait collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWait {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCatchWaitClusters>>,
    /// WaitFor specifies the condition to wait for.
    #[serde(rename = "for")]
    pub r#for: TestStepsCatchWaitFor,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWaitClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// WaitFor specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWaitFor {
    /// Condition specifies the condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<TestStepsCatchWaitForCondition>,
    /// Deletion specifies parameters for waiting on a resource's deletion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<TestStepsCatchWaitForDeletion>,
    /// JsonPath specifies the json path condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<TestStepsCatchWaitForJsonPath>,
}

/// Condition specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWaitForCondition {
    /// Name defines the specific condition to wait for, e.g., "Available", "Ready".
    pub name: String,
    /// Value defines the specific condition status to wait for, e.g., "True", "False".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Deletion specifies parameters for waiting on a resource's deletion.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWaitForDeletion {
}

/// JsonPath specifies the json path condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCatchWaitForJsonPath {
    /// Path defines the json path to wait for, e.g. '{.status.phase}'.
    pub path: String,
    /// Value defines the expected value to wait for, e.g., "Running".
    pub value: String,
}

/// CatchFinally defines actions to be executed in catch, finally and cleanup blocks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanup {
    /// Command defines a command to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<TestStepsCleanupCommand>,
    /// Delete represents a deletion operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<TestStepsCleanupDelete>,
    /// Describe determines the resource describe collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub describe: Option<TestStepsCleanupDescribe>,
    /// Description contains a description of the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Events determines the events collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<TestStepsCleanupEvents>,
    /// Get determines the resource get collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get: Option<TestStepsCleanupGet>,
    /// PodLogs determines the pod logs collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podLogs")]
    pub pod_logs: Option<TestStepsCleanupPodLogs>,
    /// Script defines a script to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<TestStepsCleanupScript>,
    /// Sleep defines zzzz.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<TestStepsCleanupSleep>,
    /// Wait determines the resource wait collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<TestStepsCleanupWait>,
}

/// Command defines a command to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupCommand {
    /// Args is the command arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCleanupCommandBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupCommandClusters>>,
    /// Entrypoint is the command entry point to run.
    pub entrypoint: String,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsCleanupCommandEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsCleanupCommandOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupCommandBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupCommandClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupCommandEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupCommandOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDelete {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCleanupDeleteBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupDeleteClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestStepsCleanupDeleteDeletionPropagationPolicy>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsCleanupDeleteExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Ref determines objects to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<TestStepsCleanupDeleteRef>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDeleteBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDeleteClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestStepsCleanupDeleteDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDeleteExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ref determines objects to be deleted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDeleteRef {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Label selector to match objects to delete
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Describe determines the resource describe collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDescribe {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupDescribeClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Show Events indicates whether to include related events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "showEvents")]
    pub show_events: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupDescribeClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Events determines the events collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupEvents {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupEventsClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupEventsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Get determines the resource get collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupGet {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupGetClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupGetClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// PodLogs determines the pod logs collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupPodLogs {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupPodLogsClusters>>,
    /// Container in pod to get logs from else --all-containers is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Tail is the number of last lines to collect from pods. If omitted or zero,
    /// then the default is 10 if you use a selector, or -1 (all) if you use a pod name.
    /// This matches default behavior of `kubectl logs`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tail: Option<i64>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupPodLogsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Script defines a script to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupScript {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsCleanupScriptBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupScriptClusters>>,
    /// Content defines a shell script (run with "sh -c ...").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsCleanupScriptEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsCleanupScriptOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupScriptBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupScriptClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupScriptEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupScriptOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Sleep defines zzzz.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupSleep {
    /// Duration is the delay used for sleeping.
    pub duration: String,
}

/// Wait determines the resource wait collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWait {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsCleanupWaitClusters>>,
    /// WaitFor specifies the condition to wait for.
    #[serde(rename = "for")]
    pub r#for: TestStepsCleanupWaitFor,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWaitClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// WaitFor specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWaitFor {
    /// Condition specifies the condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<TestStepsCleanupWaitForCondition>,
    /// Deletion specifies parameters for waiting on a resource's deletion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<TestStepsCleanupWaitForDeletion>,
    /// JsonPath specifies the json path condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<TestStepsCleanupWaitForJsonPath>,
}

/// Condition specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWaitForCondition {
    /// Name defines the specific condition to wait for, e.g., "Available", "Ready".
    pub name: String,
    /// Value defines the specific condition status to wait for, e.g., "True", "False".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Deletion specifies parameters for waiting on a resource's deletion.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWaitForDeletion {
}

/// JsonPath specifies the json path condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsCleanupWaitForJsonPath {
    /// Path defines the json path to wait for, e.g. '{.status.phase}'.
    pub path: String,
    /// Value defines the expected value to wait for, e.g., "Running".
    pub value: String,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// TestStep contains the test step definition used in a test spec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestStepsDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// CatchFinally defines actions to be executed in catch, finally and cleanup blocks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinally {
    /// Command defines a command to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<TestStepsFinallyCommand>,
    /// Delete represents a deletion operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<TestStepsFinallyDelete>,
    /// Describe determines the resource describe collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub describe: Option<TestStepsFinallyDescribe>,
    /// Description contains a description of the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Events determines the events collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<TestStepsFinallyEvents>,
    /// Get determines the resource get collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get: Option<TestStepsFinallyGet>,
    /// PodLogs determines the pod logs collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podLogs")]
    pub pod_logs: Option<TestStepsFinallyPodLogs>,
    /// Script defines a script to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<TestStepsFinallyScript>,
    /// Sleep defines zzzz.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<TestStepsFinallySleep>,
    /// Wait determines the resource wait collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<TestStepsFinallyWait>,
}

/// Command defines a command to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyCommand {
    /// Args is the command arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsFinallyCommandBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyCommandClusters>>,
    /// Entrypoint is the command entry point to run.
    pub entrypoint: String,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsFinallyCommandEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsFinallyCommandOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyCommandBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyCommandClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyCommandEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyCommandOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDelete {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsFinallyDeleteBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyDeleteClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestStepsFinallyDeleteDeletionPropagationPolicy>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsFinallyDeleteExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Ref determines objects to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<TestStepsFinallyDeleteRef>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDeleteBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDeleteClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestStepsFinallyDeleteDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDeleteExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ref determines objects to be deleted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDeleteRef {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Label selector to match objects to delete
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Describe determines the resource describe collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDescribe {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyDescribeClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Show Events indicates whether to include related events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "showEvents")]
    pub show_events: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyDescribeClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Events determines the events collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyEvents {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyEventsClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyEventsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Get determines the resource get collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyGet {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyGetClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyGetClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// PodLogs determines the pod logs collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyPodLogs {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyPodLogsClusters>>,
    /// Container in pod to get logs from else --all-containers is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Tail is the number of last lines to collect from pods. If omitted or zero,
    /// then the default is 10 if you use a selector, or -1 (all) if you use a pod name.
    /// This matches default behavior of `kubectl logs`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tail: Option<i64>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyPodLogsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Script defines a script to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyScript {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsFinallyScriptBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyScriptClusters>>,
    /// Content defines a shell script (run with "sh -c ...").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsFinallyScriptEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsFinallyScriptOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyScriptBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyScriptClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyScriptEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyScriptOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Sleep defines zzzz.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallySleep {
    /// Duration is the delay used for sleeping.
    pub duration: String,
}

/// Wait determines the resource wait collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWait {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsFinallyWaitClusters>>,
    /// WaitFor specifies the condition to wait for.
    #[serde(rename = "for")]
    pub r#for: TestStepsFinallyWaitFor,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWaitClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// WaitFor specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWaitFor {
    /// Condition specifies the condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<TestStepsFinallyWaitForCondition>,
    /// Deletion specifies parameters for waiting on a resource's deletion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<TestStepsFinallyWaitForDeletion>,
    /// JsonPath specifies the json path condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<TestStepsFinallyWaitForJsonPath>,
}

/// Condition specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWaitForCondition {
    /// Name defines the specific condition to wait for, e.g., "Available", "Ready".
    pub name: String,
    /// Value defines the specific condition status to wait for, e.g., "True", "False".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Deletion specifies parameters for waiting on a resource's deletion.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWaitForDeletion {
}

/// JsonPath specifies the json path condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsFinallyWaitForJsonPath {
    /// Path defines the json path to wait for, e.g. '{.status.phase}'.
    pub path: String,
    /// Value defines the expected value to wait for, e.g., "Running".
    pub value: String,
}

/// Timeouts for the test step. Overrides the global timeouts set in the Configuration and the timeouts eventually set in the Test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTimeouts {
    /// Apply defines the timeout for the apply operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<String>,
    /// Assert defines the timeout for the assert operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assert: Option<String>,
    /// Cleanup defines the timeout for the cleanup operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<String>,
    /// Delete defines the timeout for the delete operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<String>,
    /// Error defines the timeout for the error operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Exec defines the timeout for exec operations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<String>,
}

/// Operation defines a single operation, only one action is permitted for a given operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTry {
    /// Apply represents resources that should be applied for this test step. This can include things
    /// like configuration settings or any other resources that need to be available during the test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<TestStepsTryApply>,
    /// Assert represents an assertion to be made. It checks whether the conditions specified in the assertion hold true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestStepsTryAssert>,
    /// Command defines a command to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<TestStepsTryCommand>,
    /// ContinueOnError determines whether a test should continue or not in case the operation was not successful.
    /// Even if the test continues executing, it will still be reported as failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "continueOnError")]
    pub continue_on_error: Option<bool>,
    /// Create represents a creation operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create: Option<TestStepsTryCreate>,
    /// Delete represents a deletion operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<TestStepsTryDelete>,
    /// Describe determines the resource describe collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub describe: Option<TestStepsTryDescribe>,
    /// Description contains a description of the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Error represents the expected errors for this test step. If any of these errors occur, the test
    /// will consider them as expected; otherwise, they will be treated as test failures.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<TestStepsTryError>,
    /// Events determines the events collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<TestStepsTryEvents>,
    /// Get determines the resource get collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get: Option<TestStepsTryGet>,
    /// Patch represents a patch operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<TestStepsTryPatch>,
    /// PodLogs determines the pod logs collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podLogs")]
    pub pod_logs: Option<TestStepsTryPodLogs>,
    /// Proxy runs a proxy request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<TestStepsTryProxy>,
    /// Script defines a script to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<TestStepsTryScript>,
    /// Sleep defines zzzz.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<TestStepsTrySleep>,
    /// Update represents an update operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub update: Option<TestStepsTryUpdate>,
    /// Wait determines the resource wait collector to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<TestStepsTryWait>,
}

/// Apply represents resources that should be applied for this test step. This can include things
/// like configuration settings or any other resources that need to be available during the test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryApply {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryApplyBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryApplyClusters>>,
    /// DryRun determines whether the file should be applied in dry run mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsTryApplyExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryApplyOutputs>>,
    /// Resource provides a resource to be applied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryApplyBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryApplyClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryApplyExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryApplyOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Assert represents an assertion to be made. It checks whether the conditions specified in the assertion hold true.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryAssert {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryAssertBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryAssertClusters>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Check provides a check used in assertions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryAssertBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryAssertClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Command defines a command to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCommand {
    /// Args is the command arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryCommandBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryCommandClusters>>,
    /// Entrypoint is the command entry point to run.
    pub entrypoint: String,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsTryCommandEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryCommandOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCommandBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCommandClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCommandEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCommandOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Create represents a creation operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCreate {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryCreateBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryCreateClusters>>,
    /// DryRun determines whether the file should be applied in dry run mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsTryCreateExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryCreateOutputs>>,
    /// Resource provides a resource to be applied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCreateBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCreateClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCreateExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryCreateOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDelete {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryDeleteBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryDeleteClusters>>,
    /// DeletionPropagationPolicy decides if a deletion will propagate to the dependents of
    /// the object, and how the garbage collector will handle the propagation.
    /// Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPropagationPolicy")]
    pub deletion_propagation_policy: Option<TestStepsTryDeleteDeletionPropagationPolicy>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsTryDeleteExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Ref determines objects to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<TestStepsTryDeleteRef>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDeleteBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDeleteClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Delete represents a deletion operation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TestStepsTryDeleteDeletionPropagationPolicy {
    Orphan,
    Background,
    Foreground,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDeleteExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Ref determines objects to be deleted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDeleteRef {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Label selector to match objects to delete
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Describe determines the resource describe collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDescribe {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryDescribeClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Show Events indicates whether to include related events.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "showEvents")]
    pub show_events: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryDescribeClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Error represents the expected errors for this test step. If any of these errors occur, the test
/// will consider them as expected; otherwise, they will be treated as test failures.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryError {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryErrorBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryErrorClusters>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Check provides a check used in assertions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryErrorBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryErrorClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Events determines the events collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryEvents {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryEventsClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryEventsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Get determines the resource get collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryGet {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryGetClusters>>,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryGetClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Patch represents a patch operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPatch {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryPatchBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryPatchClusters>>,
    /// DryRun determines whether the file should be applied in dry run mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsTryPatchExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryPatchOutputs>>,
    /// Resource provides a resource to be applied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPatchBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPatchClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPatchExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPatchOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// PodLogs determines the pod logs collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPodLogs {
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryPodLogsClusters>>,
    /// Container in pod to get logs from else --all-containers is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Tail is the number of last lines to collect from pods. If omitted or zero,
    /// then the default is 10 if you use a selector, or -1 (all) if you use a pod name.
    /// This matches default behavior of `kubectl logs`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tail: Option<i64>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryPodLogsClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Proxy runs a proxy request.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryProxy {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryProxyClusters>>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryProxyOutputs>>,
    /// TargetPath defines the target path to proxy the request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// TargetPort defines the target port to proxy the request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryProxyClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryProxyOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Script defines a script to run.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryScript {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryScriptBindings>>,
    /// Check is an assertion tree to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check: Option<BTreeMap<String, serde_json::Value>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryScriptClusters>>,
    /// Content defines a shell script (run with "sh -c ...").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Env defines additional environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<TestStepsTryScriptEnv>>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryScriptOutputs>>,
    /// SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipLogOutput")]
    pub skip_log_output: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryScriptBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryScriptClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryScriptEnv {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryScriptOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Sleep defines zzzz.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTrySleep {
    /// Duration is the delay used for sleeping.
    pub duration: String,
}

/// Update represents an update operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryUpdate {
    /// Bindings defines additional binding key/values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bindings: Option<Vec<TestStepsTryUpdateBindings>>,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryUpdateClusters>>,
    /// DryRun determines whether the file should be applied in dry run mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Expect defines a list of matched checks to validate the operation outcome.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expect: Option<Vec<TestStepsTryUpdateExpect>>,
    /// File is the path to the referenced file. This can be a direct path to a file
    /// or an expression that matches multiple files, such as "manifest/*.yaml" for all YAML
    /// files within the "manifest" directory.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Outputs defines output bindings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<TestStepsTryUpdateOutputs>>,
    /// Resource provides a resource to be applied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<BTreeMap<String, serde_json::Value>>,
    /// Template determines whether resources should be considered for templating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Binding represents a key/value set as a binding in an executing test.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryUpdateBindings {
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryUpdateClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// Expectation represents a check to be applied on the result of an operation
/// with a match filter to determine if the verification should be considered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryUpdateExpect {
    /// Check defines the verification statement.
    pub check: BTreeMap<String, serde_json::Value>,
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
}

/// Output represents an output binding with a match to determine if the binding must be considered or not.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryUpdateOutputs {
    /// Match defines the matching statement.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Name the name of the binding.
    pub name: String,
    /// Value value of the binding.
    pub value: serde_json::Value,
}

/// Wait determines the resource wait collector to execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWait {
    /// API version of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Cluster defines the target cluster (default cluster will be used if not specified and/or overridden).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Clusters holds a registry to clusters to support multi-cluster tests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<BTreeMap<String, TestStepsTryWaitClusters>>,
    /// WaitFor specifies the condition to wait for.
    #[serde(rename = "for")]
    pub r#for: TestStepsTryWaitFor,
    /// Format determines the output format (json or yaml).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Selector defines labels selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// Timeout for the operation. Overrides the global timeout set in the Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Clusters holds a registry to clusters to support multi-cluster tests.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWaitClusters {
    /// Context is the name of the context to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Kubeconfig is the path to the referenced file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubeconfig: Option<String>,
}

/// WaitFor specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWaitFor {
    /// Condition specifies the condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<TestStepsTryWaitForCondition>,
    /// Deletion specifies parameters for waiting on a resource's deletion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<TestStepsTryWaitForDeletion>,
    /// JsonPath specifies the json path condition to wait for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<TestStepsTryWaitForJsonPath>,
}

/// Condition specifies the condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWaitForCondition {
    /// Name defines the specific condition to wait for, e.g., "Available", "Ready".
    pub name: String,
    /// Value defines the specific condition status to wait for, e.g., "True", "False".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Deletion specifies parameters for waiting on a resource's deletion.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWaitForDeletion {
}

/// JsonPath specifies the json path condition to wait for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsTryWaitForJsonPath {
    /// Path defines the json path to wait for, e.g. '{.status.phase}'.
    pub path: String,
    /// Value defines the expected value to wait for, e.g., "Running".
    pub value: String,
}

/// Timeouts for the test. Overrides the global timeouts set in the Configuration on a per operation basis.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestTimeouts {
    /// Apply defines the timeout for the apply operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<String>,
    /// Assert defines the timeout for the assert operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assert: Option<String>,
    /// Cleanup defines the timeout for the cleanup operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<String>,
    /// Delete defines the timeout for the delete operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete: Option<String>,
    /// Error defines the timeout for the error operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Exec defines the timeout for exec operations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<String>,
}

