// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename ./crd-catalog/aws-controllers-k8s/rds-controller/rds.services.k8s.aws/v1alpha1/dbclusters.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// DBClusterSpec defines the desired state of DBCluster. 
///  Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. 
///  For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. 
///  For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. 
///  For more information on Amazon Aurora DB clusters, see What is Amazon Aurora? (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. 
///  For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "rds.services.k8s.aws", version = "v1alpha1", kind = "DBCluster", plural = "dbclusters")]
#[kube(namespaced)]
#[kube(status = "DBClusterStatus")]
#[kube(schema = "disabled")]
pub struct DBClusterSpec {
    /// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster. 
    ///  This setting is required to create a Multi-AZ DB cluster. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedStorage")]
    pub allocated_storage: Option<i64>,
    /// A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMinorVersionUpgrade")]
    pub auto_minor_version_upgrade: Option<bool>,
    /// A list of Availability Zones (AZs) where DB instances in the DB cluster can be created. 
    ///  For information on Amazon Web Services Regions and Availability Zones, see Choosing the Regions and Availability Zones (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    pub availability_zones: Option<Vec<String>>,
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. 
    ///  Default: 0 
    ///  Constraints: 
    ///  * If specified, this value must be set to a number from 0 to 259,200 (72 hours). 
    ///  Valid for: Aurora MySQL DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backtrackWindow")]
    pub backtrack_window: Option<i64>,
    /// The number of days for which automated backups are retained. 
    ///  Default: 1 
    ///  Constraints: 
    ///  * Must be a value from 1 to 35 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionPeriod")]
    pub backup_retention_period: Option<i64>,
    /// A value that indicates that the DB cluster should be associated with the specified CharacterSet. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "characterSetName")]
    pub character_set_name: Option<String>,
    /// A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTagsToSnapshot")]
    pub copy_tags_to_snapshot: Option<bool>,
    /// The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The DB cluster identifier. This parameter is stored as a lowercase string. 
    ///  Constraints: 
    ///  * Must contain from 1 to 63 letters, numbers, or hyphens. 
    ///  * First character must be a letter. 
    ///  * Can't end with a hyphen or contain two consecutive hyphens. 
    ///  Example: my-cluster1 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(rename = "dbClusterIdentifier")]
    pub db_cluster_identifier: String,
    /// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. 
    ///  For the full list of DB instance classes and availability for your engine, see DB instance class (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. 
    ///  This setting is required to create a Multi-AZ DB cluster. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterInstanceClass")]
    pub db_cluster_instance_class: Option<String>,
    /// The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. 
    ///  Constraints: 
    ///  * If supplied, must match the name of an existing DB cluster parameter group. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterParameterGroupName")]
    pub db_cluster_parameter_group_name: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterParameterGroupRef")]
    pub db_cluster_parameter_group_ref: Option<DBClusterDbClusterParameterGroupRef>,
    /// A DB subnet group to associate with this DB cluster. 
    ///  This setting is required to create a Multi-AZ DB cluster. 
    ///  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. 
    ///  Example: mydbsubnetgroup 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupName")]
    pub db_subnet_group_name: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupRef")]
    pub db_subnet_group_ref: Option<DBClusterDbSubnetGroupRef>,
    /// Reserved for future use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSystemID")]
    pub db_system_id: Option<String>,
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// DestinationRegion is used for presigning the request to a given region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationRegion")]
    pub destination_region: Option<String>,
    /// The Active Directory directory ID to create the DB cluster in. 
    ///  For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication to authenticate users that connect to the DB cluster. 
    ///  For more information, see Kerberos authentication (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// Specify the name of the IAM role to be used when making API calls to the Directory Service. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIAMRoleName")]
    pub domain_iam_role_name: Option<String>,
    /// The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. 
    ///  RDS for MySQL 
    ///  Possible values are error, general, and slowquery. 
    ///  RDS for PostgreSQL 
    ///  Possible values are postgresql and upgrade. 
    ///  Aurora MySQL 
    ///  Possible values are audit, error, general, and slowquery. 
    ///  Aurora PostgreSQL 
    ///  Possible value is postgresql. 
    ///  For more information about exporting CloudWatch Logs for Amazon RDS, see Publishing Database Logs to Amazon CloudWatch Logs (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. 
    ///  For more information about exporting CloudWatch Logs for Amazon Aurora, see Publishing Database Logs to Amazon CloudWatch Logs (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCloudwatchLogsExports")]
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (GlobalCluster). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database. 
    ///  You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the FailoverGlobalCluster API operation, but it does nothing until then. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGlobalWriteForwarding")]
    pub enable_global_write_forwarding: Option<bool>,
    /// A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint is disabled. 
    ///  When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor. 
    ///  For more information, see Using the Data API for Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHTTPEndpoint")]
    pub enable_http_endpoint: Option<bool>,
    /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. 
    ///  For more information, see IAM Database Authentication (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIAMDatabaseAuthentication")]
    pub enable_iam_database_authentication: Option<bool>,
    /// A value that indicates whether to turn on Performance Insights for the DB cluster. 
    ///  For more information, see Using Amazon Performance Insights (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePerformanceInsights")]
    pub enable_performance_insights: Option<bool>,
    /// The name of the database engine to be used for this DB cluster. 
    ///  Valid Values: 
    ///  * aurora-mysql 
    ///  * aurora-postgresql 
    ///  * mysql 
    ///  * postgres 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    pub engine: String,
    /// The DB engine mode of the DB cluster, either provisioned or serverless. 
    ///  The serverless engine mode only applies for Aurora Serverless v1 DB clusters. 
    ///  Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the Amazon Aurora User Guide: 
    ///  * Limitations of Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations) 
    ///  * Requirements for Aurora Serverless v2 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.requirements.html) 
    ///  * Limitations of parallel query (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations) 
    ///  * Limitations of Aurora global databases (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations) 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineMode")]
    pub engine_mode: Option<String>,
    /// The version number of the database engine to use. 
    ///  To list all of the available engine versions for Aurora MySQL version 2 (5.7-compatible) and version 3 (MySQL 8.0-compatible), use the following command: 
    ///  aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion" 
    ///  You can supply either 5.7 or 8.0 to use the default engine version for Aurora MySQL version 2 or version 3, respectively. 
    ///  To list all of the available engine versions for Aurora PostgreSQL, use the following command: 
    ///  aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion" 
    ///  To list all of the available engine versions for RDS for MySQL, use the following command: 
    ///  aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion" 
    ///  To list all of the available engine versions for RDS for PostgreSQL, use the following command: 
    ///  aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion" 
    ///  Aurora MySQL 
    ///  For information, see Database engine updates for Amazon Aurora MySQL (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) in the Amazon Aurora User Guide. 
    ///  Aurora PostgreSQL 
    ///  For information, see Amazon Aurora PostgreSQL releases and engine versions (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html) in the Amazon Aurora User Guide. 
    ///  MySQL 
    ///  For information, see Amazon RDS for MySQL (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt) in the Amazon RDS User Guide. 
    ///  PostgreSQL 
    ///  For information, see Amazon RDS for PostgreSQL (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts) in the Amazon RDS User Guide. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalClusterIdentifier")]
    pub global_cluster_identifier: Option<String>,
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. 
    ///  For information about valid IOPS values, see Provisioned IOPS storage (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. 
    ///  This setting is required to create a Multi-AZ DB cluster. 
    ///  Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB cluster. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<i64>,
    /// The Amazon Web Services KMS key identifier for an encrypted DB cluster. 
    ///  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. 
    ///  When a KMS key isn't specified in KmsKeyId: 
    ///  * If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS will use the KMS key used to encrypt the source. Otherwise, Amazon RDS will use your default KMS key. 
    ///  * If the StorageEncrypted parameter is enabled and ReplicationSourceIdentifier isn't specified, then Amazon RDS will use your default KMS key. 
    ///  There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. 
    ///  If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you must set KmsKeyId to a KMS key identifier that is valid in the destination Amazon Web Services Region. This KMS key is used to encrypt the read replica in that Amazon Web Services Region. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyRef")]
    pub kms_key_ref: Option<DBClusterKmsKeyRef>,
    /// A value that indicates whether to manage the master user password with Amazon Web Services Secrets Manager. 
    ///  For more information, see Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide. 
    ///  Constraints: 
    ///  * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterUserPassword")]
    pub manage_master_user_password: Option<bool>,
    /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". 
    ///  Constraints: 
    ///  * Must contain from 8 to 41 characters. 
    ///  * Can't be specified if ManageMasterUserPassword is turned on. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserPassword")]
    pub master_user_password: Option<DBClusterMasterUserPassword>,
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. 
    ///  This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster. 
    ///  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. 
    ///  If you don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key. 
    ///  There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKMSKeyID")]
    pub master_user_secret_kms_key_id: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKMSKeyRef")]
    pub master_user_secret_kms_key_ref: Option<DBClusterMasterUserSecretKmsKeyRef>,
    /// The name of the master user for the DB cluster. 
    ///  Constraints: 
    ///  * Must be 1 to 16 letters or numbers. 
    ///  * First character must be a letter. 
    ///  * Can't be a reserved word for the chosen database engine. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUsername")]
    pub master_username: Option<String>,
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0. 
    ///  If MonitoringRoleArn is specified, also set MonitoringInterval to a value other than 0. 
    ///  Valid Values: 0, 1, 5, 10, 15, 30, 60 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringInterval")]
    pub monitoring_interval: Option<i64>,
    /// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see Setting up and enabling Enhanced Monitoring (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the Amazon RDS User Guide. 
    ///  If MonitoringInterval is set to a value other than 0, supply a MonitoringRoleArn value. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleARN")]
    pub monitoring_role_arn: Option<String>,
    /// The network type of the DB cluster. 
    ///  Valid values: 
    ///  * IPV4 
    ///  * DUAL 
    ///  The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). 
    ///  For more information, see Working with a DB instance in a VPC (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// A value that indicates that the DB cluster should be associated with the specified option group. 
    ///  DB clusters are associated with a default option group that can't be modified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionGroupName")]
    pub option_group_name: Option<String>,
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. 
    ///  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. 
    ///  If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsKMSKeyID")]
    pub performance_insights_kms_key_id: Option<String>,
    /// The number of days to retain Performance Insights data. The default is 7 days. The following values are valid: 
    ///  * 7 
    ///  * month * 31, where month is a number of months from 1-23 
    ///  * 731 
    ///  For example, the following values are valid: 
    ///  * 93 (3 months * 31) 
    ///  * 341 (11 months * 31) 
    ///  * 589 (19 months * 31) 
    ///  * 731 
    ///  If you specify a retention period such as 94, which isn't a valid value, RDS issues an error. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsRetentionPeriod")]
    pub performance_insights_retention_period: Option<i64>,
    /// The port number on which the instances in the DB cluster accept connections. 
    ///  RDS for MySQL and Aurora MySQL 
    ///  Default: 3306 
    ///  Valid values: 1150-65535 
    ///  RDS for PostgreSQL and Aurora PostgreSQL 
    ///  Default: 5432 
    ///  Valid values: 1150-65535 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// When you are replicating a DB cluster from one Amazon Web Services GovCloud (US) Region to another, an URL that contains a Signature Version 4 signed request for the CreateDBCluster operation to be called in the source Amazon Web Services Region where the DB cluster is replicated from. Specify PreSignedUrl only when you are performing cross-Region replication from an encrypted DB cluster. 
    ///  The presigned URL must be a valid request for the CreateDBCluster API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster to copy. 
    ///  The presigned URL request must contain the following parameter values: 
    ///  * KmsKeyId - The KMS key identifier for the KMS key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same KMS key for both the CreateDBCluster operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL. 
    ///  * DestinationRegion - The name of the Amazon Web Services Region that Aurora read replica will be created in. 
    ///  * ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your ReplicationSourceIdentifier would look like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1. 
    ///  To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) (https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and Signature Version 4 Signing Process (https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). 
    ///  If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preSignedURL")]
    pub pre_signed_url: Option<String>,
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. 
    ///  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see Backup window (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow) in the Amazon Aurora User Guide. 
    ///  Constraints: 
    ///  * Must be in the format hh24:mi-hh24:mi. 
    ///  * Must be in Universal Coordinated Time (UTC). 
    ///  * Must not conflict with the preferred maintenance window. 
    ///  * Must be at least 30 minutes. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredBackupWindow")]
    pub preferred_backup_window: Option<String>,
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). 
    ///  Format: ddd:hh24:mi-ddd:hh24:mi 
    ///  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora) in the Amazon Aurora User Guide. 
    ///  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. 
    ///  Constraints: Minimum 30-minute window. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredMaintenanceWindow")]
    pub preferred_maintenance_window: Option<String>,
    /// A value that indicates whether the DB cluster is publicly accessible. 
    ///  When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. 
    ///  When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address. 
    ///  Default: The default behavior varies depending on whether DBSubnetGroupName is specified. 
    ///  If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies: 
    ///  * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private. 
    ///  * If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public. 
    ///  If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies: 
    ///  * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private. 
    ///  * If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public. 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationSourceIdentifier")]
    pub replication_source_identifier: Option<String>,
    /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster. 
    ///  Valid for: Aurora DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingConfiguration")]
    pub scaling_configuration: Option<DBClusterScalingConfiguration>,
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. 
    ///  For more information, see Using Amazon Aurora Serverless v2 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverlessV2ScalingConfiguration")]
    pub serverless_v2_scaling_configuration: Option<DBClusterServerlessV2ScalingConfiguration>,
    /// The identifier for the DB snapshot or DB cluster snapshot to restore from. 
    ///  You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. 
    ///  Constraints: 
    ///  * Must match the identifier of an existing Snapshot. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// SourceRegion is the source region where the resource exists. This is not sent over the wire and is only used for presigning. This value should always have the same region as the source ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRegion")]
    pub source_region: Option<String>,
    /// A value that indicates whether the DB cluster is encrypted. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageEncrypted")]
    pub storage_encrypted: Option<bool>,
    /// Specifies the storage type to be associated with the DB cluster. 
    ///  This setting is required to create a Multi-AZ DB cluster. 
    ///  Valid values: io1 
    ///  When specified, a value for the Iops parameter is required. 
    ///  Default: io1 
    ///  Valid for: Multi-AZ DB clusters only
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<String>,
    /// Tags to assign to the DB cluster. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<DBClusterTags>>,
    /// A list of EC2 VPC security groups to associate with this DB cluster. 
    ///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIDs")]
    pub vpc_security_group_i_ds: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupRefs")]
    pub vpc_security_group_refs: Option<Vec<DBClusterVpcSecurityGroupRefs>>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterDbClusterParameterGroupRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<DBClusterDbClusterParameterGroupRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterDbClusterParameterGroupRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterDbSubnetGroupRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<DBClusterDbSubnetGroupRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterDbSubnetGroupRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterKmsKeyRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<DBClusterKmsKeyRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterKmsKeyRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". 
///  Constraints: 
///  * Must contain from 8 to 41 characters. 
///  * Can't be specified if ManageMasterUserPassword is turned on. 
///  Valid for: Aurora DB clusters and Multi-AZ DB clusters
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterMasterUserPassword {
    /// Key is the key within the secret
    pub key: String,
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterMasterUserSecretKmsKeyRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<DBClusterMasterUserSecretKmsKeyRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterMasterUserSecretKmsKeyRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster. 
///  Valid for: Aurora DB clusters only
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterScalingConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoPause")]
    pub auto_pause: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    pub max_capacity: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCapacity")]
    pub min_capacity: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondsBeforeTimeout")]
    pub seconds_before_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondsUntilAutoPause")]
    pub seconds_until_auto_pause: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutAction")]
    pub timeout_action: Option<String>,
}

/// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. 
///  For more information, see Using Amazon Aurora Serverless v2 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterServerlessV2ScalingConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCapacity")]
    pub max_capacity: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCapacity")]
    pub min_capacity: Option<f64>,
}

/// Metadata assigned to an Amazon RDS resource consisting of a key-value pair. 
///  For more information, see Tagging Amazon RDS Resources (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterVpcSecurityGroupRefs {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<DBClusterVpcSecurityGroupRefsFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterVpcSecurityGroupRefsFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// DBClusterStatus defines the observed state of DBCluster
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<DBClusterStatusAckResourceMetadata>,
    /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. 
    ///  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityStreamKMSKeyID")]
    pub activity_stream_kms_key_id: Option<String>,
    /// The name of the Amazon Kinesis data stream used for the database activity stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityStreamKinesisStreamName")]
    pub activity_stream_kinesis_stream_name: Option<String>,
    /// The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityStreamMode")]
    pub activity_stream_mode: Option<String>,
    /// The status of the database activity stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activityStreamStatus")]
    pub activity_stream_status: Option<String>,
    /// Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedRoles")]
    pub associated_roles: Option<Vec<DBClusterStatusAssociatedRoles>>,
    /// The time when a stopped DB cluster is restarted automatically.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticRestartTime")]
    pub automatic_restart_time: Option<String>,
    /// The number of change records stored for Backtrack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backtrackConsumedChangeRecords")]
    pub backtrack_consumed_change_records: Option<i64>,
    /// The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused. 
    ///  For more information about Aurora Serverless v1, see Using Amazon Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<i64>,
    /// Identifies the clone group to which the DB cluster is associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloneGroupID")]
    pub clone_group_id: Option<String>,
    /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterCreateTime")]
    pub cluster_create_time: Option<String>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<DBClusterStatusConditions>>,
    /// Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossAccountClone")]
    pub cross_account_clone: Option<bool>,
    /// Identifies all custom endpoints associated with the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customEndpoints")]
    pub custom_endpoints: Option<Vec<String>>,
    /// Provides the list of instances that make up the DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterMembers")]
    pub db_cluster_members: Option<Vec<DBClusterStatusDbClusterMembers>>,
    /// Provides the list of option group memberships for this DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterOptionGroupMemberships")]
    pub db_cluster_option_group_memberships: Option<Vec<DBClusterStatusDbClusterOptionGroupMemberships>>,
    /// Specifies the name of the DB cluster parameter group for the DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterParameterGroup")]
    pub db_cluster_parameter_group: Option<String>,
    /// The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterResourceID")]
    pub db_cluster_resource_id: Option<String>,
    /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroup")]
    pub db_subnet_group: Option<String>,
    /// The Active Directory Domain membership records associated with the DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainMemberships")]
    pub domain_memberships: Option<Vec<DBClusterStatusDomainMemberships>>,
    /// The earliest time to which a DB cluster can be backtracked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earliestBacktrackTime")]
    pub earliest_backtrack_time: Option<String>,
    /// The earliest time to which a database can be restored with point-in-time restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earliestRestorableTime")]
    pub earliest_restorable_time: Option<String>,
    /// A list of log types that this DB cluster is configured to export to CloudWatch Logs. 
    ///  Log types vary by DB engine. For information about the log types for each DB engine, see Amazon RDS Database Log Files (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html) in the Amazon Aurora User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledCloudwatchLogsExports")]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// Specifies the connection endpoint for the primary instance of the DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of GlobalWriteForwardingStatus to confirm that the request has completed before using the write forwarding feature for this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalWriteForwardingRequested")]
    pub global_write_forwarding_requested: Option<bool>,
    /// Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalWriteForwardingStatus")]
    pub global_write_forwarding_status: Option<String>,
    /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneID")]
    pub hosted_zone_id: Option<String>,
    /// A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled. 
    ///  When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor. 
    ///  For more information, see Using the Data API for Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) in the Amazon Aurora User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointEnabled")]
    pub http_endpoint_enabled: Option<bool>,
    /// A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamDatabaseAuthenticationEnabled")]
    pub iam_database_authentication_enabled: Option<bool>,
    /// Specifies the latest time to which a database can be restored with point-in-time restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRestorableTime")]
    pub latest_restorable_time: Option<String>,
    /// Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password. 
    ///  For more information, see Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecret")]
    pub master_user_secret: Option<DBClusterStatusMasterUserSecret>,
    /// Specifies whether the DB cluster has instances in multiple Availability Zones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAZ")]
    pub multi_az: Option<bool>,
    /// A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pendingModifiedValues")]
    pub pending_modified_values: Option<DBClusterStatusPendingModifiedValues>,
    /// Specifies the progress of the operation as a percentage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentProgress")]
    pub percent_progress: Option<String>,
    /// True if Performance Insights is enabled for the DB cluster, and otherwise false. 
    ///  This setting is only for non-Aurora Multi-AZ DB clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsEnabled")]
    pub performance_insights_enabled: Option<bool>,
    /// Contains one or more identifiers of the read replicas associated with this DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readReplicaIdentifiers")]
    pub read_replica_identifiers: Option<Vec<String>>,
    /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster. 
    ///  If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readerEndpoint")]
    pub reader_endpoint: Option<String>,
    /// Specifies the current state of this DB cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagList")]
    pub tag_list: Option<Vec<DBClusterStatusTagList>>,
    /// Provides a list of VPC security groups that the DB cluster belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroups")]
    pub vpc_security_groups: Option<Vec<DBClusterStatusVpcSecurityGroups>>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB cluster.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusAssociatedRoles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureName")]
    pub feature_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusConditions {
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type is the type of the Condition
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Contains information about an instance that is part of a DB cluster.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusDbClusterMembers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterParameterGroupStatus")]
    pub db_cluster_parameter_group_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbInstanceIdentifier")]
    pub db_instance_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isClusterWriter")]
    pub is_cluster_writer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promotionTier")]
    pub promotion_tier: Option<i64>,
}

/// Contains status information for a DB cluster option group.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusDbClusterOptionGroupMemberships {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterOptionGroupName")]
    pub db_cluster_option_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// An Active Directory Domain membership record associated with the DB instance or cluster.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusDomainMemberships {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fQDN")]
    pub f_qdn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleName")]
    pub iam_role_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password. 
///  For more information, see Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and Password management with Amazon Web Services Secrets Manager (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusMasterUserSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretARN")]
    pub secret_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretStatus")]
    pub secret_status: Option<String>,
}

/// A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusPendingModifiedValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedStorage")]
    pub allocated_storage: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionPeriod")]
    pub backup_retention_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterIdentifier")]
    pub db_cluster_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamDatabaseAuthenticationEnabled")]
    pub iam_database_authentication_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserPassword")]
    pub master_user_password: Option<String>,
    /// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pendingCloudwatchLogsExports")]
    pub pending_cloudwatch_logs_exports: Option<DBClusterStatusPendingModifiedValuesPendingCloudwatchLogsExports>,
}

/// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusPendingModifiedValuesPendingCloudwatchLogsExports {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logTypesToDisable")]
    pub log_types_to_disable: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logTypesToEnable")]
    pub log_types_to_enable: Option<Vec<String>>,
}

/// Metadata assigned to an Amazon RDS resource consisting of a key-value pair. 
///  For more information, see Tagging Amazon RDS Resources (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusTagList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// This data type is used as a response element for queries on VPC security group membership.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct DBClusterStatusVpcSecurityGroups {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupID")]
    pub vpc_security_group_id: Option<String>,
}

