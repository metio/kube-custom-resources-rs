// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/hive/hiveinternal.openshift.io/v1alpha1/clustersyncs.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// ClusterSyncSpec defines the desired state of ClusterSync
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "hiveinternal.openshift.io", version = "v1alpha1", kind = "ClusterSync", plural = "clustersyncs")]
#[kube(namespaced)]
#[kube(status = "ClusterSyncStatus")]
#[kube(schema = "disabled")]
pub struct ClusterSyncSpec {
}

/// ClusterSyncStatus defines the observed state of ClusterSync
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSyncStatus {
    /// Conditions is a list of conditions associated with syncing to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ControlledByReplica indicates which replica of the hive-clustersync StatefulSet is responsible for (the CD related to) this clustersync. Note that this value indicates the replica that most recently handled the ClusterSync. If the hive-clustersync statefulset is scaled up or down, the controlling replica can change, potentially causing logs to be spread across multiple pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlledByReplica")]
    pub controlled_by_replica: Option<i64>,
    /// FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstSuccessTime")]
    pub first_success_time: Option<String>,
    /// SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorSyncSets")]
    pub selector_sync_sets: Option<Vec<ClusterSyncStatusSelectorSyncSets>>,
    /// SyncSets is the sync status of all of the SyncSets for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncSets")]
    pub sync_sets: Option<Vec<ClusterSyncStatusSyncSets>>,
}

/// SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSyncStatusSelectorSyncSets {
    /// FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureMessage")]
    pub failure_message: Option<String>,
    /// FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstSuccessTime")]
    pub first_success_time: Option<String>,
    /// LastTransitionTime is the time when this status last changed.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// Name is the name of the SyncSet or SelectorSyncSet.
    pub name: String,
    /// ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
    #[serde(rename = "observedGeneration")]
    pub observed_generation: i64,
    /// ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesToDelete")]
    pub resources_to_delete: Option<Vec<ClusterSyncStatusSelectorSyncSetsResourcesToDelete>>,
    /// Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
    pub result: ClusterSyncStatusSelectorSyncSetsResult,
}

/// SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSyncStatusSelectorSyncSetsResourcesToDelete {
    /// APIVersion is the Group and Version of the resource.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind is the Kind of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the resource.
    pub name: String,
    /// Namespace is the namespace of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSyncStatusSelectorSyncSetsResult {
    Success,
    Failure,
}

/// SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSyncStatusSyncSets {
    /// FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureMessage")]
    pub failure_message: Option<String>,
    /// FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstSuccessTime")]
    pub first_success_time: Option<String>,
    /// LastTransitionTime is the time when this status last changed.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// Name is the name of the SyncSet or SelectorSyncSet.
    pub name: String,
    /// ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
    #[serde(rename = "observedGeneration")]
    pub observed_generation: i64,
    /// ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesToDelete")]
    pub resources_to_delete: Option<Vec<ClusterSyncStatusSyncSetsResourcesToDelete>>,
    /// Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
    pub result: ClusterSyncStatusSyncSetsResult,
}

/// SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterSyncStatusSyncSetsResourcesToDelete {
    /// APIVersion is the Group and Version of the resource.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind is the Kind of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the resource.
    pub name: String,
    /// Namespace is the namespace of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterSyncStatusSyncSetsResult {
    Success,
    Failure,
}

