// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/aws-app-mesh-controller-for-k8/appmesh.k8s.aws/v1beta2/virtualnodes.yaml
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// VirtualNodeSpec defines the desired state of VirtualNode refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualNodeSpec.html
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "appmesh.k8s.aws", version = "v1beta2", kind = "VirtualNode", plural = "virtualnodes")]
#[kube(namespaced)]
#[kube(status = "VirtualNodeStatus")]
#[kube(schema = "disabled")]
pub struct VirtualNodeSpec {
    /// AWSName is the AppMesh VirtualNode object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s VirtualNode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsName")]
    pub aws_name: Option<String>,
    /// A reference to an object that represents the defaults for backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendDefaults")]
    pub backend_defaults: Option<VirtualNodeBackendDefaults>,
    /// BackendGroups that define a set of backends the virtual node is expected to send outbound traffic to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendGroups")]
    pub backend_groups: Option<Vec<VirtualNodeBackendGroups>>,
    /// The backends that the virtual node is expected to send outbound traffic to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backends: Option<Vec<VirtualNodeBackends>>,
    /// The listener that the virtual node is expected to receive inbound traffic from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listeners: Option<Vec<VirtualNodeListeners>>,
    /// The inbound and outbound access logging information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<VirtualNodeLogging>,
    /// A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
    ///  Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshRef")]
    pub mesh_ref: Option<VirtualNodeMeshRef>,
    /// PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSelector")]
    pub pod_selector: Option<VirtualNodePodSelector>,
    /// The service discovery information for the virtual node. Optional if there is no inbound traffic(no listeners). Mandatory if a listener is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceDiscovery")]
    pub service_discovery: Option<VirtualNodeServiceDiscovery>,
}

/// A reference to an object that represents the defaults for backends.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaults {
    /// A reference to an object that represents a client policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicy")]
    pub client_policy: Option<VirtualNodeBackendDefaultsClientPolicy>,
}

/// A reference to an object that represents a client policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicy {
    /// A reference to an object that represents a Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualNodeBackendDefaultsClientPolicyTls>,
}

/// A reference to an object that represents a Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTls {
    /// A reference to an object that represents TLS certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualNodeBackendDefaultsClientPolicyTlsCertificate>,
    /// Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<bool>,
    /// The range of ports that the policy is enforced for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<i64>>,
    /// A reference to an object that represents a TLS validation context.
    pub validation: VirtualNodeBackendDefaultsClientPolicyTlsValidation,
}

/// A reference to an object that represents TLS certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsCertificate {
    /// An object that represents a TLS cert via a local file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeBackendDefaultsClientPolicyTlsCertificateFile>,
    /// An object that represents a TLS cert via SDS entry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeBackendDefaultsClientPolicyTlsCertificateSds>,
}

/// An object that represents a TLS cert via a local file
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsCertificateFile {
    /// The certificate chain for the certificate.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
    /// The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "privateKey")]
    pub private_key: String,
}

/// An object that represents a TLS cert via SDS entry
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsCertificateSds {
    /// The certificate trust chain for a certificate issued via SDS cluster
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// A reference to an object that represents a TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidation {
    /// Possible Alternative names to consider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualNodeBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>,
    /// A reference to an object that represents a TLS validation context trust
    pub trust: VirtualNodeBackendDefaultsClientPolicyTlsValidationTrust,
}

/// Possible Alternative names to consider
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /// Match is a required field
    #[serde(rename = "match")]
    pub r#match: VirtualNodeBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch,
}

/// Match is a required field
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /// Exact is a required field
    pub exact: Vec<String>,
}

/// A reference to an object that represents a TLS validation context trust
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationTrust {
    /// A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustAcm>,
    /// An object that represents a TLS validation context trust for a local file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustFile>,
    /// An object that represents a TLS validation context trust for a SDS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustSds>,
}

/// A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /// One or more ACM Amazon Resource Name (ARN)s.
    #[serde(rename = "certificateAuthorityARNs")]
    pub certificate_authority_ar_ns: Vec<String>,
}

/// An object that represents a TLS validation context trust for a local file.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustFile {
    /// The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
}

/// An object that represents a TLS validation context trust for a SDS.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendDefaultsClientPolicyTlsValidationTrustSds {
    /// The certificate trust chain for a certificate obtained via SDS
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// BackendGroupReference holds a reference to BackendGroup.appmesh.k8s.aws
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendGroups {
    /// Name is the name of BackendGroup CR
    pub name: String,
    /// Namespace is the namespace of BackendGroup CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Backend refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Backend.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackends {
    /// Specifies a virtual service to use as a backend for a virtual node.
    #[serde(rename = "virtualService")]
    pub virtual_service: VirtualNodeBackendsVirtualService,
}

/// Specifies a virtual service to use as a backend for a virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualService {
    /// A reference to an object that represents the client policy for a backend.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicy")]
    pub client_policy: Option<VirtualNodeBackendsVirtualServiceClientPolicy>,
    /// Amazon Resource Name to AppMesh VirtualService object that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceARN")]
    pub virtual_service_arn: Option<String>,
    /// Reference to Kubernetes VirtualService CR in cluster that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceRef")]
    pub virtual_service_ref: Option<VirtualNodeBackendsVirtualServiceVirtualServiceRef>,
}

/// A reference to an object that represents the client policy for a backend.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicy {
    /// A reference to an object that represents a Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualNodeBackendsVirtualServiceClientPolicyTls>,
}

/// A reference to an object that represents a Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTls {
    /// A reference to an object that represents TLS certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificate>,
    /// Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<bool>,
    /// The range of ports that the policy is enforced for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<i64>>,
    /// A reference to an object that represents a TLS validation context.
    pub validation: VirtualNodeBackendsVirtualServiceClientPolicyTlsValidation,
}

/// A reference to an object that represents TLS certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificate {
    /// An object that represents a TLS cert via a local file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificateFile>,
    /// An object that represents a TLS cert via SDS entry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificateSds>,
}

/// An object that represents a TLS cert via a local file
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificateFile {
    /// The certificate chain for the certificate.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
    /// The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "privateKey")]
    pub private_key: String,
}

/// An object that represents a TLS cert via SDS entry
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsCertificateSds {
    /// The certificate trust chain for a certificate issued via SDS cluster
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// A reference to an object that represents a TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidation {
    /// Possible Alternative names to consider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames>,
    /// A reference to an object that represents a TLS validation context trust
    pub trust: VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrust,
}

/// Possible Alternative names to consider
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames {
    /// Match is a required field
    #[serde(rename = "match")]
    pub r#match: VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch,
}

/// Match is a required field
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /// Exact is a required field
    pub exact: Vec<String>,
}

/// A reference to an object that represents a TLS validation context trust
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrust {
    /// A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustAcm>,
    /// An object that represents a TLS validation context trust for a local file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustFile>,
    /// An object that represents a TLS validation context trust for a SDS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustSds>,
}

/// A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustAcm {
    /// One or more ACM Amazon Resource Name (ARN)s.
    #[serde(rename = "certificateAuthorityARNs")]
    pub certificate_authority_ar_ns: Vec<String>,
}

/// An object that represents a TLS validation context trust for a local file.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustFile {
    /// The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
}

/// An object that represents a TLS validation context trust for a SDS.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceClientPolicyTlsValidationTrustSds {
    /// The certificate trust chain for a certificate obtained via SDS
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Reference to Kubernetes VirtualService CR in cluster that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeBackendsVirtualServiceVirtualServiceRef {
    /// Name is the name of VirtualService CR
    pub name: String,
    /// Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Listener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Listener.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListeners {
    /// The connection pool settings for the listener
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPool")]
    pub connection_pool: Option<VirtualNodeListenersConnectionPool>,
    /// The health check information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<VirtualNodeListenersHealthCheck>,
    /// The outlier detection for the listener
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<VirtualNodeListenersOutlierDetection>,
    /// The port mapping information for the listener.
    #[serde(rename = "portMapping")]
    pub port_mapping: VirtualNodeListenersPortMapping,
    /// A reference to an object that represents
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<VirtualNodeListenersTimeout>,
    /// A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualNodeListenersTls>,
}

/// The connection pool settings for the listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersConnectionPool {
    /// Specifies grpc connection pool settings for the virtual node listener
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualNodeListenersConnectionPoolGrpc>,
    /// Specifies http connection pool settings for the virtual node listener
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualNodeListenersConnectionPoolHttp>,
    /// Specifies http2 connection pool settings for the virtual node listener
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http2: Option<VirtualNodeListenersConnectionPoolHttp2>,
    /// Specifies tcp connection pool settings for the virtual node listener
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tcp: Option<VirtualNodeListenersConnectionPoolTcp>,
}

/// Specifies grpc connection pool settings for the virtual node listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersConnectionPoolGrpc {
    /// Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
    #[serde(rename = "maxRequests")]
    pub max_requests: i64,
}

/// Specifies http connection pool settings for the virtual node listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersConnectionPoolHttp {
    /// Represents the maximum number of outbound TCP connections the envoy can establish concurrently with all the hosts in the upstream cluster.
    #[serde(rename = "maxConnections")]
    pub max_connections: i64,
    /// Represents the number of overflowing requests after max_connections that an envoy will queue to an upstream cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
}

/// Specifies http2 connection pool settings for the virtual node listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersConnectionPoolHttp2 {
    /// Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
    #[serde(rename = "maxRequests")]
    pub max_requests: i64,
}

/// Specifies tcp connection pool settings for the virtual node listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersConnectionPoolTcp {
    /// Represents the maximum number of outbound TCP connections the envoy can establish concurrently with all the hosts in the upstream cluster.
    #[serde(rename = "maxConnections")]
    pub max_connections: i64,
}

/// The health check information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersHealthCheck {
    /// The number of consecutive successful health checks that must occur before declaring listener healthy.
    #[serde(rename = "healthyThreshold")]
    pub healthy_threshold: i64,
    /// The time period in milliseconds between each health check execution.
    #[serde(rename = "intervalMillis")]
    pub interval_millis: i64,
    /// The destination path for the health check request. This value is only used if the specified protocol is http or http2. For any other protocol, this value is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The destination port for the health check request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The protocol for the health check request
    pub protocol: VirtualNodeListenersHealthCheckProtocol,
    /// The amount of time to wait when receiving a response from the health check, in milliseconds.
    #[serde(rename = "timeoutMillis")]
    pub timeout_millis: i64,
    /// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
    #[serde(rename = "unhealthyThreshold")]
    pub unhealthy_threshold: i64,
}

/// The health check information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersHealthCheckProtocol {
    #[serde(rename = "grpc")]
    Grpc,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "http2")]
    Http2,
    #[serde(rename = "tcp")]
    Tcp,
}

/// The outlier detection for the listener
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected
    #[serde(rename = "baseEjectionDuration")]
    pub base_ejection_duration: VirtualNodeListenersOutlierDetectionBaseEjectionDuration,
    /// The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service
    pub interval: VirtualNodeListenersOutlierDetectionInterval,
    /// The threshold for the max percentage of outlier hosts that can be ejected from the load balancing set. maxEjectionPercent=100 means outlier detection can potentially eject all of the hosts from the upstream service if they are all considered outliers, leaving the load balancing set with zero hosts
    #[serde(rename = "maxEjectionPercent")]
    pub max_ejection_percent: i64,
    /// The threshold for the number of server errors returned by a given host during an outlier detection interval. If the server error count meets/exceeds this threshold the host is ejected. A server error is defined as any HTTP 5xx response (or the equivalent for gRPC and TCP connections)
    #[serde(rename = "maxServerErrors")]
    pub max_server_errors: i64,
}

/// The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersOutlierDetectionBaseEjectionDuration {
    /// A unit of time.
    pub unit: VirtualNodeListenersOutlierDetectionBaseEjectionDurationUnit,
    /// A number of time units.
    pub value: i64,
}

/// The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersOutlierDetectionBaseEjectionDurationUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersOutlierDetectionInterval {
    /// A unit of time.
    pub unit: VirtualNodeListenersOutlierDetectionIntervalUnit,
    /// A number of time units.
    pub value: i64,
}

/// The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersOutlierDetectionIntervalUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// The port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersPortMapping {
    /// The port used for the port mapping.
    pub port: i64,
    /// The protocol used for the port mapping.
    pub protocol: VirtualNodeListenersPortMappingProtocol,
}

/// The port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersPortMappingProtocol {
    #[serde(rename = "grpc")]
    Grpc,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "http2")]
    Http2,
    #[serde(rename = "tcp")]
    Tcp,
}

/// A reference to an object that represents
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeout {
    /// Specifies grpc timeout information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualNodeListenersTimeoutGrpc>,
    /// Specifies http timeout information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualNodeListenersTimeoutHttp>,
    /// Specifies http2 information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http2: Option<VirtualNodeListenersTimeoutHttp2>,
    /// Specifies tcp timeout information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tcp: Option<VirtualNodeListenersTimeoutTcp>,
}

/// Specifies grpc timeout information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutGrpc {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualNodeListenersTimeoutGrpcIdle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualNodeListenersTimeoutGrpcPerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutGrpcIdle {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutGrpcIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutGrpcIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutGrpcPerRequest {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutGrpcPerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutGrpcPerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// Specifies http timeout information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttp {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualNodeListenersTimeoutHttpIdle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualNodeListenersTimeoutHttpPerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttpIdle {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutHttpIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutHttpIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttpPerRequest {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutHttpPerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutHttpPerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// Specifies http2 information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttp2 {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualNodeListenersTimeoutHttp2Idle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualNodeListenersTimeoutHttp2PerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttp2Idle {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutHttp2IdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutHttp2IdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutHttp2PerRequest {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutHttp2PerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutHttp2PerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// Specifies tcp timeout information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutTcp {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualNodeListenersTimeoutTcpIdle>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTimeoutTcpIdle {
    /// A unit of time.
    pub unit: VirtualNodeListenersTimeoutTcpIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTimeoutTcpIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTls {
    /// A reference to an object that represents a listener's TLS certificate.
    pub certificate: VirtualNodeListenersTlsCertificate,
    /// ListenerTLS mode
    pub mode: VirtualNodeListenersTlsMode,
    /// A reference to an object that represents an SDS Trust Domain
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualNodeListenersTlsValidation>,
}

/// A reference to an object that represents a listener's TLS certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsCertificate {
    /// A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualNodeListenersTlsCertificateAcm>,
    /// A reference to an object that represents a local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeListenersTlsCertificateFile>,
    /// A reference to an object that represents an SDS certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeListenersTlsCertificateSds>,
}

/// A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsCertificateAcm {
    /// The Amazon Resource Name (ARN) for the certificate.
    #[serde(rename = "certificateARN")]
    pub certificate_arn: String,
}

/// A reference to an object that represents a local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsCertificateFile {
    /// The certificate chain for the certificate.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
    /// The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "privateKey")]
    pub private_key: String,
}

/// A reference to an object that represents an SDS certificate.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsCertificateSds {
    /// The certificate trust chain for a certificate issued via SDS cluster
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeListenersTlsMode {
    #[serde(rename = "DISABLED")]
    Disabled,
    #[serde(rename = "PERMISSIVE")]
    Permissive,
    #[serde(rename = "STRICT")]
    Strict,
}

/// A reference to an object that represents an SDS Trust Domain
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidation {
    /// Possible alternative names to consider
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualNodeListenersTlsValidationSubjectAlternativeNames>,
    pub trust: VirtualNodeListenersTlsValidationTrust,
}

/// Possible alternative names to consider
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidationSubjectAlternativeNames {
    /// Match is a required field
    #[serde(rename = "match")]
    pub r#match: VirtualNodeListenersTlsValidationSubjectAlternativeNamesMatch,
}

/// Match is a required field
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidationSubjectAlternativeNamesMatch {
    /// Exact is a required field
    pub exact: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidationTrust {
    /// An object that represents a TLS validation context trust for a local file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeListenersTlsValidationTrustFile>,
    /// An object that represents a TLS validation context trust for an SDS server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualNodeListenersTlsValidationTrustSds>,
}

/// An object that represents a TLS validation context trust for a local file.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidationTrustFile {
    /// The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
    #[serde(rename = "certificateChain")]
    pub certificate_chain: String,
}

/// An object that represents a TLS validation context trust for an SDS server
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeListenersTlsValidationTrustSds {
    /// The certificate trust chain for a certificate obtained via SDS
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// The inbound and outbound access logging information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeLogging {
    /// The access log configuration for a virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<VirtualNodeLoggingAccessLog>,
}

/// The access log configuration for a virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeLoggingAccessLog {
    /// The file object to send virtual node access logs to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualNodeLoggingAccessLogFile>,
}

/// The file object to send virtual node access logs to.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeLoggingAccessLogFile {
    /// Structured access log output format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<VirtualNodeLoggingAccessLogFileFormat>,
    /// The file path to write access logs to.
    pub path: String,
}

/// Structured access log output format
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeLoggingAccessLogFileFormat {
    /// Output specified fields as a JSON object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<Vec<VirtualNodeLoggingAccessLogFileFormatJson>>,
    /// Custom format string
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeLoggingAccessLogFileFormatJson {
    /// The name of the field in the JSON object
    pub key: String,
    /// The format string
    pub value: String,
}

/// A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
///  Populated by the system. Read-only.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeMeshRef {
    /// Name is the name of Mesh CR
    pub name: String,
    /// UID is the UID of Mesh CR
    pub uid: String,
}

/// PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodePodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualNodePodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodePodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// The service discovery information for the virtual node. Optional if there is no inbound traffic(no listeners). Mandatory if a listener is specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeServiceDiscovery {
    /// Specifies any AWS Cloud Map information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsCloudMap")]
    pub aws_cloud_map: Option<VirtualNodeServiceDiscoveryAwsCloudMap>,
    /// Specifies the DNS information for the virtual node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<VirtualNodeServiceDiscoveryDns>,
}

/// Specifies any AWS Cloud Map information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeServiceDiscoveryAwsCloudMap {
    /// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<VirtualNodeServiceDiscoveryAwsCloudMapAttributes>>,
    /// The name of the AWS Cloud Map namespace to use.
    #[serde(rename = "namespaceName")]
    pub namespace_name: String,
    /// The name of the AWS Cloud Map service to use.
    #[serde(rename = "serviceName")]
    pub service_name: String,
}

/// AWSCloudMapInstanceAttribute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_AwsCloudMapInstanceAttribute.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeServiceDiscoveryAwsCloudMapAttributes {
    /// The name of an AWS Cloud Map service instance attribute key.
    pub key: String,
    /// The value of an AWS Cloud Map service instance attribute key.
    pub value: String,
}

/// Specifies the DNS information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeServiceDiscoveryDns {
    /// Specifies the DNS service discovery hostname for the virtual node.
    pub hostname: String,
    /// Choose between ENDPOINTS (strict DNS) and LOADBALANCER (logical DNS) mode in Envoy sidecar
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseType")]
    pub response_type: Option<VirtualNodeServiceDiscoveryDnsResponseType>,
}

/// Specifies the DNS information for the virtual node.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualNodeServiceDiscoveryDnsResponseType {
    #[serde(rename = "ENDPOINTS")]
    Endpoints,
    #[serde(rename = "LOADBALANCER")]
    Loadbalancer,
}

/// VirtualNodeStatus defines the observed state of VirtualNode
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualNodeStatus {
    /// The current VirtualNode status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The generation observed by the VirtualNode controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// VirtualNodeARN is the AppMesh VirtualNode object's Amazon Resource Name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeARN")]
    pub virtual_node_arn: Option<String>,
}

