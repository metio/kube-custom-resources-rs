// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/aws-app-mesh-controller-for-k8/appmesh.k8s.aws/v1beta2/virtualrouters.yaml
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// VirtualRouterSpec defines the desired state of VirtualRouter refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterSpec.html
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "appmesh.k8s.aws", version = "v1beta2", kind = "VirtualRouter", plural = "virtualrouters")]
#[kube(namespaced)]
#[kube(status = "VirtualRouterStatus")]
#[kube(schema = "disabled")]
pub struct VirtualRouterSpec {
    /// AWSName is the AppMesh VirtualRouter object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s VirtualRouter
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsName")]
    pub aws_name: Option<String>,
    /// The listeners that the virtual router is expected to receive inbound traffic from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listeners: Option<Vec<VirtualRouterListeners>>,
    /// A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
    ///  Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshRef")]
    pub mesh_ref: Option<VirtualRouterMeshRef>,
    /// The routes associated with VirtualRouter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<VirtualRouterRoutes>>,
}

/// VirtualRouterListener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterListener.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterListeners {
    /// The port mapping information for the listener.
    #[serde(rename = "portMapping")]
    pub port_mapping: VirtualRouterListenersPortMapping,
}

/// The port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterListenersPortMapping {
    /// The port used for the port mapping.
    pub port: i64,
    /// The protocol used for the port mapping.
    pub protocol: VirtualRouterListenersPortMappingProtocol,
}

/// The port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterListenersPortMappingProtocol {
    #[serde(rename = "grpc")]
    Grpc,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "http2")]
    Http2,
    #[serde(rename = "tcp")]
    Tcp,
}

/// A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
///  Populated by the system. Read-only.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterMeshRef {
    /// Name is the name of Mesh CR
    pub name: String,
    /// UID is the UID of Mesh CR
    pub uid: String,
}

/// Route refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_RouteSpec.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutes {
    /// An object that represents the specification of a gRPC route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRoute")]
    pub grpc_route: Option<VirtualRouterRoutesGrpcRoute>,
    /// An object that represents the specification of an HTTP/2 route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2Route")]
    pub http2_route: Option<VirtualRouterRoutesHttp2Route>,
    /// An object that represents the specification of an HTTP route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRoute")]
    pub http_route: Option<VirtualRouterRoutesHttpRoute>,
    /// Route's name
    pub name: String,
    /// The priority for the route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// An object that represents the specification of a TCP route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpRoute")]
    pub tcp_route: Option<VirtualRouterRoutesTcpRoute>,
}

/// An object that represents the specification of a gRPC route.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRoute {
    /// An object that represents the action to take if a match is determined.
    pub action: VirtualRouterRoutesGrpcRouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: VirtualRouterRoutesGrpcRouteMatch,
    /// An object that represents a retry policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<VirtualRouterRoutesGrpcRouteRetryPolicy>,
    /// An object that represents a grpc timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<VirtualRouterRoutesGrpcRouteTimeout>,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteAction {
    /// An object that represents the targets that traffic is routed to when a request matches the route.
    #[serde(rename = "weightedTargets")]
    pub weighted_targets: Vec<VirtualRouterRoutesGrpcRouteActionWeightedTargets>,
}

/// WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteActionWeightedTargets {
    /// Specifies the targeted port of the weighted object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeARN")]
    pub virtual_node_arn: Option<String>,
    /// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeRef")]
    pub virtual_node_ref: Option<VirtualRouterRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef>,
    /// The relative weight of the weighted target.
    pub weight: i64,
}

/// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef {
    /// Name is the name of VirtualNode CR
    pub name: String,
    /// Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteMatch {
    /// An object that represents the data to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<VirtualRouterRoutesGrpcRouteMatchMetadata>>,
    /// The method name to match from the request. If you specify a name, you must also specify a serviceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodName")]
    pub method_name: Option<String>,
    /// Specifies the port to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The fully qualified domain name for the service to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// GRPCRouteMetadata refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteMetadata.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteMatchMetadata {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// An object that represents the data to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesGrpcRouteMatchMetadataMatch>,
    /// The name of the route.
    pub name: String,
}

/// An object that represents the data to match from the request.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteMatchMetadataMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<VirtualRouterRoutesGrpcRouteMatchMetadataMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteMatchMetadataMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// An object that represents a retry policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRetryEvents")]
    pub grpc_retry_events: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRetryEvents")]
    pub http_retry_events: Option<Vec<String>>,
    /// The maximum number of retry attempts.
    #[serde(rename = "maxRetries")]
    pub max_retries: i64,
    /// An object that represents a duration of time.
    #[serde(rename = "perRetryTimeout")]
    pub per_retry_timeout: VirtualRouterRoutesGrpcRouteRetryPolicyPerRetryTimeout,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpRetryEvents")]
    pub tcp_retry_events: Option<Vec<String>>,
}

/// An object that represents a duration of time.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteRetryPolicyPerRetryTimeout {
    /// A unit of time.
    pub unit: VirtualRouterRoutesGrpcRouteRetryPolicyPerRetryTimeoutUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents a duration of time.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesGrpcRouteRetryPolicyPerRetryTimeoutUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents a grpc timeout.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteTimeout {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualRouterRoutesGrpcRouteTimeoutIdle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualRouterRoutesGrpcRouteTimeoutPerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteTimeoutIdle {
    /// A unit of time.
    pub unit: VirtualRouterRoutesGrpcRouteTimeoutIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesGrpcRouteTimeoutIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesGrpcRouteTimeoutPerRequest {
    /// A unit of time.
    pub unit: VirtualRouterRoutesGrpcRouteTimeoutPerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesGrpcRouteTimeoutPerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents the specification of an HTTP/2 route.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2Route {
    /// An object that represents the action to take if a match is determined.
    pub action: VirtualRouterRoutesHttp2RouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: VirtualRouterRoutesHttp2RouteMatch,
    /// An object that represents a retry policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<VirtualRouterRoutesHttp2RouteRetryPolicy>,
    /// An object that represents a http timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<VirtualRouterRoutesHttp2RouteTimeout>,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteAction {
    /// An object that represents the targets that traffic is routed to when a request matches the route.
    #[serde(rename = "weightedTargets")]
    pub weighted_targets: Vec<VirtualRouterRoutesHttp2RouteActionWeightedTargets>,
}

/// WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteActionWeightedTargets {
    /// Specifies the targeted port of the weighted object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeARN")]
    pub virtual_node_arn: Option<String>,
    /// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeRef")]
    pub virtual_node_ref: Option<VirtualRouterRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef>,
    /// The relative weight of the weighted target.
    pub weight: i64,
}

/// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef {
    /// Name is the name of VirtualNode CR
    pub name: String,
    /// Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatch {
    /// An object that represents the client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualRouterRoutesHttp2RouteMatchHeaders>>,
    /// The client request method to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<VirtualRouterRoutesHttp2RouteMatchMethod>,
    /// The client specified Path to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<VirtualRouterRoutesHttp2RouteMatchPath>,
    /// Specifies the port to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Specifies the prefix to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The client specified queryParameters to match on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualRouterRoutesHttp2RouteMatchQueryParameters>>,
    /// The client request scheme to match on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<VirtualRouterRoutesHttp2RouteMatchScheme>,
}

/// HTTPRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteHeader.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchHeaders {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// The HeaderMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesHttp2RouteMatchHeadersMatch>,
    /// A name for the HTTP header in the client request that will be matched on.
    pub name: String,
}

/// The HeaderMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchHeadersMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<VirtualRouterRoutesHttp2RouteMatchHeadersMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchHeadersMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttp2RouteMatchMethod {
    #[serde(rename = "CONNECT")]
    Connect,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "HEAD")]
    Head,
    #[serde(rename = "OPTIONS")]
    Options,
    #[serde(rename = "PATCH")]
    Patch,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "TRACE")]
    Trace,
}

/// The client specified Path to match on.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchPath {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

/// HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchQueryParameters {
    /// The QueryMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesHttp2RouteMatchQueryParametersMatch>,
    pub name: String,
}

/// The QueryMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteMatchQueryParametersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttp2RouteMatchScheme {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

/// An object that represents a retry policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRetryEvents")]
    pub http_retry_events: Option<Vec<String>>,
    /// The maximum number of retry attempts.
    #[serde(rename = "maxRetries")]
    pub max_retries: i64,
    /// An object that represents a duration of time
    #[serde(rename = "perRetryTimeout")]
    pub per_retry_timeout: VirtualRouterRoutesHttp2RouteRetryPolicyPerRetryTimeout,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpRetryEvents")]
    pub tcp_retry_events: Option<Vec<String>>,
}

/// An object that represents a duration of time
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteRetryPolicyPerRetryTimeout {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttp2RouteRetryPolicyPerRetryTimeoutUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents a duration of time
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttp2RouteRetryPolicyPerRetryTimeoutUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents a http timeout.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteTimeout {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualRouterRoutesHttp2RouteTimeoutIdle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualRouterRoutesHttp2RouteTimeoutPerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteTimeoutIdle {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttp2RouteTimeoutIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttp2RouteTimeoutIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttp2RouteTimeoutPerRequest {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttp2RouteTimeoutPerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttp2RouteTimeoutPerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents the specification of an HTTP route.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRoute {
    /// An object that represents the action to take if a match is determined.
    pub action: VirtualRouterRoutesHttpRouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: VirtualRouterRoutesHttpRouteMatch,
    /// An object that represents a retry policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<VirtualRouterRoutesHttpRouteRetryPolicy>,
    /// An object that represents a http timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<VirtualRouterRoutesHttpRouteTimeout>,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteAction {
    /// An object that represents the targets that traffic is routed to when a request matches the route.
    #[serde(rename = "weightedTargets")]
    pub weighted_targets: Vec<VirtualRouterRoutesHttpRouteActionWeightedTargets>,
}

/// WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteActionWeightedTargets {
    /// Specifies the targeted port of the weighted object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeARN")]
    pub virtual_node_arn: Option<String>,
    /// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeRef")]
    pub virtual_node_ref: Option<VirtualRouterRoutesHttpRouteActionWeightedTargetsVirtualNodeRef>,
    /// The relative weight of the weighted target.
    pub weight: i64,
}

/// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteActionWeightedTargetsVirtualNodeRef {
    /// Name is the name of VirtualNode CR
    pub name: String,
    /// Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatch {
    /// An object that represents the client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualRouterRoutesHttpRouteMatchHeaders>>,
    /// The client request method to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<VirtualRouterRoutesHttpRouteMatchMethod>,
    /// The client specified Path to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<VirtualRouterRoutesHttpRouteMatchPath>,
    /// Specifies the port to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Specifies the prefix to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The client specified queryParameters to match on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualRouterRoutesHttpRouteMatchQueryParameters>>,
    /// The client request scheme to match on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<VirtualRouterRoutesHttpRouteMatchScheme>,
}

/// HTTPRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteHeader.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchHeaders {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// The HeaderMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesHttpRouteMatchHeadersMatch>,
    /// A name for the HTTP header in the client request that will be matched on.
    pub name: String,
}

/// The HeaderMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchHeadersMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<VirtualRouterRoutesHttpRouteMatchHeadersMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchHeadersMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttpRouteMatchMethod {
    #[serde(rename = "CONNECT")]
    Connect,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "HEAD")]
    Head,
    #[serde(rename = "OPTIONS")]
    Options,
    #[serde(rename = "PATCH")]
    Patch,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "TRACE")]
    Trace,
}

/// The client specified Path to match on.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchPath {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

/// HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchQueryParameters {
    /// The QueryMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesHttpRouteMatchQueryParametersMatch>,
    pub name: String,
}

/// The QueryMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteMatchQueryParametersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttpRouteMatchScheme {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

/// An object that represents a retry policy.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRetryEvents")]
    pub http_retry_events: Option<Vec<String>>,
    /// The maximum number of retry attempts.
    #[serde(rename = "maxRetries")]
    pub max_retries: i64,
    /// An object that represents a duration of time
    #[serde(rename = "perRetryTimeout")]
    pub per_retry_timeout: VirtualRouterRoutesHttpRouteRetryPolicyPerRetryTimeout,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpRetryEvents")]
    pub tcp_retry_events: Option<Vec<String>>,
}

/// An object that represents a duration of time
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteRetryPolicyPerRetryTimeout {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttpRouteRetryPolicyPerRetryTimeoutUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents a duration of time
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttpRouteRetryPolicyPerRetryTimeoutUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents a http timeout.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteTimeout {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualRouterRoutesHttpRouteTimeoutIdle>,
    /// An object that represents per request timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perRequest")]
    pub per_request: Option<VirtualRouterRoutesHttpRouteTimeoutPerRequest>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteTimeoutIdle {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttpRouteTimeoutIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttpRouteTimeoutIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesHttpRouteTimeoutPerRequest {
    /// A unit of time.
    pub unit: VirtualRouterRoutesHttpRouteTimeoutPerRequestUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents per request timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesHttpRouteTimeoutPerRequestUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// An object that represents the specification of a TCP route.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRoute {
    /// The action to take if a match is determined.
    pub action: VirtualRouterRoutesTcpRouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualRouterRoutesTcpRouteMatch>,
    /// An object that represents a tcp timeout.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<VirtualRouterRoutesTcpRouteTimeout>,
}

/// The action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteAction {
    /// An object that represents the targets that traffic is routed to when a request matches the route.
    #[serde(rename = "weightedTargets")]
    pub weighted_targets: Vec<VirtualRouterRoutesTcpRouteActionWeightedTargets>,
}

/// WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteActionWeightedTargets {
    /// Specifies the targeted port of the weighted object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeARN")]
    pub virtual_node_arn: Option<String>,
    /// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualNodeRef")]
    pub virtual_node_ref: Option<VirtualRouterRoutesTcpRouteActionWeightedTargetsVirtualNodeRef>,
    /// The relative weight of the weighted target.
    pub weight: i64,
}

/// Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteActionWeightedTargetsVirtualNodeRef {
    /// Name is the name of VirtualNode CR
    pub name: String,
    /// Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteMatch {
    /// Specifies the port to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// An object that represents a tcp timeout.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteTimeout {
    /// An object that represents idle timeout duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<VirtualRouterRoutesTcpRouteTimeoutIdle>,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterRoutesTcpRouteTimeoutIdle {
    /// A unit of time.
    pub unit: VirtualRouterRoutesTcpRouteTimeoutIdleUnit,
    /// A number of time units.
    pub value: i64,
}

/// An object that represents idle timeout duration.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum VirtualRouterRoutesTcpRouteTimeoutIdleUnit {
    #[serde(rename = "s")]
    S,
    #[serde(rename = "ms")]
    Ms,
}

/// VirtualRouterStatus defines the observed state of VirtualRouter
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct VirtualRouterStatus {
    /// The current VirtualRouter status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The generation observed by the VirtualRouter controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// RouteARNs is a map of AppMesh Route objects' Amazon Resource Names, indexed by route name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeARNs")]
    pub route_ar_ns: Option<BTreeMap<String, String>>,
    /// VirtualRouterARN is the AppMesh VirtualRouter object's Amazon Resource Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualRouterARN")]
    pub virtual_router_arn: Option<String>,
}

