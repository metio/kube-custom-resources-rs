// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/aws-app-mesh-controller-for-k8/appmesh.k8s.aws/v1beta2/meshes.yaml
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// MeshSpec defines the desired state of Mesh refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_MeshSpec.html
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "appmesh.k8s.aws", version = "v1beta2", kind = "Mesh", plural = "meshes")]
#[kube(status = "MeshStatus")]
#[kube(schema = "disabled")]
pub struct MeshSpec {
    /// AWSName is the AppMesh Mesh object's name. If unspecified or empty, it defaults to be "${name}" of k8s Mesh
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsName")]
    pub aws_name: Option<String>,
    /// The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressFilter")]
    pub egress_filter: Option<MeshEgressFilter>,
    /// The AWS IAM account ID of the service mesh owner. Required if the account ID is not your own.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshServiceDiscovery")]
    pub mesh_service_discovery: Option<MeshMeshServiceDiscovery>,
    /// NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: 	if present but empty, it selects all namespaces. 	if absent, it selects no namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<MeshNamespaceSelector>,
}

/// The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MeshEgressFilter {
    /// The egress filter type.
    #[serde(rename = "type")]
    pub r#type: MeshEgressFilterType,
}

/// The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum MeshEgressFilterType {
    #[serde(rename = "ALLOW_ALL")]
    AllowAll,
    #[serde(rename = "DROP_ALL")]
    DropAll,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MeshMeshServiceDiscovery {
    /// The ipPreference for the mesh.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipPreference")]
    pub ip_preference: Option<MeshMeshServiceDiscoveryIpPreference>,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum MeshMeshServiceDiscoveryIpPreference {
    #[serde(rename = "IPv6_ONLY")]
    IPv6Only,
    #[serde(rename = "IPv4_ONLY")]
    IPv4Only,
}

/// NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: 	if present but empty, it selects all namespaces. 	if absent, it selects no namespace.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MeshNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MeshNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MeshNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// MeshStatus defines the observed state of Mesh
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MeshStatus {
    /// The current Mesh status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// MeshARN is the AppMesh Mesh object's Amazon Resource Name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshARN")]
    pub mesh_arn: Option<String>,
    /// The generation observed by the Mesh controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

