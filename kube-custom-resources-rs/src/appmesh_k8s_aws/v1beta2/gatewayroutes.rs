// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/aws-app-mesh-controller-for-k8/appmesh.k8s.aws/v1beta2/gatewayroutes.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GatewayRouteSpec defines the desired state of GatewayRoute refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "appmesh.k8s.aws", version = "v1beta2", kind = "GatewayRoute", plural = "gatewayroutes")]
#[kube(namespaced)]
#[kube(status = "GatewayRouteStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GatewayRouteSpec {
    /// AWSName is the AppMesh GatewayRoute object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s GatewayRoute
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsName")]
    pub aws_name: Option<String>,
    /// An object that represents the specification of a gRPC gatewayRoute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRoute")]
    pub grpc_route: Option<GatewayRouteGrpcRoute>,
    /// An object that represents the specification of an HTTP/2 gatewayRoute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2Route")]
    pub http2_route: Option<GatewayRouteHttp2Route>,
    /// An object that represents the specification of an HTTP gatewayRoute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRoute")]
    pub http_route: Option<GatewayRouteHttpRoute>,
    /// A reference to k8s Mesh CR that this GatewayRoute belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
    ///  Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshRef")]
    pub mesh_ref: Option<GatewayRouteMeshRef>,
    /// Priority for the gatewayroute. Default Priority is 1000 which is lowest priority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// A reference to k8s VirtualGateway CR that this GatewayRoute belongs to. The admission controller populates it using VirtualGateway's selector, and prevents users from setting this field. 
    ///  Populated by the system. Read-only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayRef")]
    pub virtual_gateway_ref: Option<GatewayRouteVirtualGatewayRef>,
}

/// An object that represents the specification of a gRPC gatewayRoute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRoute {
    /// An object that represents the action to take if a match is determined.
    pub action: GatewayRouteGrpcRouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: GatewayRouteGrpcRouteMatch,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteAction {
    /// GrpcGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteGrpcRouteActionRewrite>,
    /// An object that represents the target that traffic is routed to when a request matches the route.
    pub target: GatewayRouteGrpcRouteActionTarget,
}

/// GrpcGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteActionRewrite {
    /// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteGrpcRouteActionRewriteHostname>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteActionRewriteHostname {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<GatewayRouteGrpcRouteActionRewriteHostnameDefaultTargetHostname>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteGrpcRouteActionRewriteHostnameDefaultTargetHostname {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

/// An object that represents the target that traffic is routed to when a request matches the route.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteActionTarget {
    /// Specifies the port of the gateway route target
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The virtual service to associate with the gateway route target.
    #[serde(rename = "virtualService")]
    pub virtual_service: GatewayRouteGrpcRouteActionTargetVirtualService,
}

/// The virtual service to associate with the gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteActionTargetVirtualService {
    /// Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceARN")]
    pub virtual_service_arn: Option<String>,
    /// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceRef")]
    pub virtual_service_ref: Option<GatewayRouteGrpcRouteActionTargetVirtualServiceVirtualServiceRef>,
}

/// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteActionTargetVirtualServiceVirtualServiceRef {
    /// Name is the name of VirtualService CR
    pub name: String,
    /// Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteMatch {
    /// The client specified Hostname to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteGrpcRouteMatchHostname>,
    /// An object that represents the data to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<GatewayRouteGrpcRouteMatchMetadata>>,
    /// Specifies the port the request to be matched on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Either ServiceName or Hostname must be specified. Both are allowed as well The fully qualified domain name for the service to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// The client specified Hostname to match on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteMatchHostname {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// GRPCGatewayRouteMetadata refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteMetadata.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteMatchMetadata {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// An object that represents the data to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteGrpcRouteMatchMetadataMatch>,
    /// The name of the route.
    pub name: String,
}

/// An object that represents the data to match from the request.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteMatchMetadataMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteGrpcRouteMatchMetadataMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteGrpcRouteMatchMetadataMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// An object that represents the specification of an HTTP/2 gatewayRoute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2Route {
    /// An object that represents the action to take if a match is determined.
    pub action: GatewayRouteHttp2RouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: GatewayRouteHttp2RouteMatch,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteAction {
    /// HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteHttp2RouteActionRewrite>,
    /// An object that represents the target that traffic is routed to when a request matches the route.
    pub target: GatewayRouteHttp2RouteActionTarget,
}

/// HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionRewrite {
    /// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteHttp2RouteActionRewriteHostname>,
    /// GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteHttp2RouteActionRewritePath>,
    /// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteHttp2RouteActionRewritePrefix>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionRewriteHostname {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<GatewayRouteHttp2RouteActionRewriteHostnameDefaultTargetHostname>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttp2RouteActionRewriteHostnameDefaultTargetHostname {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

/// GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionRewritePath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionRewritePrefix {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<GatewayRouteHttp2RouteActionRewritePrefixDefaultPrefix>,
    /// When DefaultPrefix is specified, Value cannot be set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttp2RouteActionRewritePrefixDefaultPrefix {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

/// An object that represents the target that traffic is routed to when a request matches the route.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionTarget {
    /// Specifies the port of the gateway route target
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The virtual service to associate with the gateway route target.
    #[serde(rename = "virtualService")]
    pub virtual_service: GatewayRouteHttp2RouteActionTargetVirtualService,
}

/// The virtual service to associate with the gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionTargetVirtualService {
    /// Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceARN")]
    pub virtual_service_arn: Option<String>,
    /// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceRef")]
    pub virtual_service_ref: Option<GatewayRouteHttp2RouteActionTargetVirtualServiceVirtualServiceRef>,
}

/// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteActionTargetVirtualServiceVirtualServiceRef {
    /// Name is the name of VirtualService CR
    pub name: String,
    /// Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatch {
    /// An object that represents the client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayRouteHttp2RouteMatchHeaders>>,
    /// The client specified Hostname to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteHttp2RouteMatchHostname>,
    /// The client request method to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<GatewayRouteHttp2RouteMatchMethod>,
    /// Specified path of the request to be matched on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteHttp2RouteMatchPath>,
    /// Specifies the port the request to be matched on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Either Prefix or Hostname must be specified. Both are allowed as well. Specifies the prefix to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client specified query parameters to match on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayRouteHttp2RouteMatchQueryParameters>>,
}

/// HTTPGatewayRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteHeader.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchHeaders {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// The HeaderMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteHttp2RouteMatchHeadersMatch>,
    /// A name for the HTTP header in the client request that will be matched on.
    pub name: String,
}

/// The HeaderMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchHeadersMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteHttp2RouteMatchHeadersMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchHeadersMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// The client specified Hostname to match on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchHostname {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttp2RouteMatchMethod {
    #[serde(rename = "CONNECT")]
    Connect,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "HEAD")]
    Head,
    #[serde(rename = "OPTIONS")]
    Options,
    #[serde(rename = "PATCH")]
    Patch,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "TRACE")]
    Trace,
}

/// Specified path of the request to be matched on
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchPath {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

/// HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchQueryParameters {
    /// The QueryMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteHttp2RouteMatchQueryParametersMatch>,
    pub name: String,
}

/// The QueryMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttp2RouteMatchQueryParametersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// An object that represents the specification of an HTTP gatewayRoute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRoute {
    /// An object that represents the action to take if a match is determined.
    pub action: GatewayRouteHttpRouteAction,
    /// An object that represents the criteria for determining a request match.
    #[serde(rename = "match")]
    pub r#match: GatewayRouteHttpRouteMatch,
}

/// An object that represents the action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteAction {
    /// HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteHttpRouteActionRewrite>,
    /// An object that represents the target that traffic is routed to when a request matches the route.
    pub target: GatewayRouteHttpRouteActionTarget,
}

/// HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionRewrite {
    /// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteHttpRouteActionRewriteHostname>,
    /// GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteHttpRouteActionRewritePath>,
    /// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteHttpRouteActionRewritePrefix>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionRewriteHostname {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<GatewayRouteHttpRouteActionRewriteHostnameDefaultTargetHostname>,
}

/// GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttpRouteActionRewriteHostnameDefaultTargetHostname {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

/// GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionRewritePath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionRewritePrefix {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<GatewayRouteHttpRouteActionRewritePrefixDefaultPrefix>,
    /// When DefaultPrefix is specified, Value cannot be set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttpRouteActionRewritePrefixDefaultPrefix {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

/// An object that represents the target that traffic is routed to when a request matches the route.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionTarget {
    /// Specifies the port of the gateway route target
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The virtual service to associate with the gateway route target.
    #[serde(rename = "virtualService")]
    pub virtual_service: GatewayRouteHttpRouteActionTargetVirtualService,
}

/// The virtual service to associate with the gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionTargetVirtualService {
    /// Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceARN")]
    pub virtual_service_arn: Option<String>,
    /// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceRef")]
    pub virtual_service_ref: Option<GatewayRouteHttpRouteActionTargetVirtualServiceVirtualServiceRef>,
}

/// Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteActionTargetVirtualServiceVirtualServiceRef {
    /// Name is the name of VirtualService CR
    pub name: String,
    /// Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatch {
    /// An object that represents the client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayRouteHttpRouteMatchHeaders>>,
    /// The client specified Hostname to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteHttpRouteMatchHostname>,
    /// The client request method to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<GatewayRouteHttpRouteMatchMethod>,
    /// Specified path of the request to be matched on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteHttpRouteMatchPath>,
    /// Specifies the port the request to be matched on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Either Prefix or Hostname must be specified. Both are allowed as well. Specifies the prefix to match requests with
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client specified query parameters to match on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayRouteHttpRouteMatchQueryParameters>>,
}

/// HTTPGatewayRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteHeader.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchHeaders {
    /// Specify True to match anything except the match criteria. The default value is False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// The HeaderMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteHttpRouteMatchHeadersMatch>,
    /// A name for the HTTP header in the client request that will be matched on.
    pub name: String,
}

/// The HeaderMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchHeadersMatch {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must begin with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// An object that represents the range of values to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteHttpRouteMatchHeadersMatchRange>,
    /// The value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the range of values to match on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchHeadersMatchRange {
    /// The end of the range.
    pub end: i64,
    /// The start of the range.
    pub start: i64,
}

/// The client specified Hostname to match on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchHostname {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// An object that represents the criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GatewayRouteHttpRouteMatchMethod {
    #[serde(rename = "CONNECT")]
    Connect,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "HEAD")]
    Head,
    #[serde(rename = "OPTIONS")]
    Options,
    #[serde(rename = "PATCH")]
    Patch,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "TRACE")]
    Trace,
}

/// Specified path of the request to be matched on
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchPath {
    /// The value sent by the client must match the specified value exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// The value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

/// HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchQueryParameters {
    /// The QueryMatchMethod object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteHttpRouteMatchQueryParametersMatch>,
    pub name: String,
}

/// The QueryMatchMethod object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteHttpRouteMatchQueryParametersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// A reference to k8s Mesh CR that this GatewayRoute belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field. 
///  Populated by the system. Read-only.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteMeshRef {
    /// Name is the name of Mesh CR
    pub name: String,
    /// UID is the UID of Mesh CR
    pub uid: String,
}

/// A reference to k8s VirtualGateway CR that this GatewayRoute belongs to. The admission controller populates it using VirtualGateway's selector, and prevents users from setting this field. 
///  Populated by the system. Read-only.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteVirtualGatewayRef {
    /// Name is the name of VirtualGateway CR
    pub name: String,
    /// Namespace is the namespace of VirtualGateway CR. If unspecified, defaults to the referencing object's namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// UID is the UID of VirtualGateway CR
    pub uid: String,
}

/// GatewayRouteStatus defines the observed state of GatewayRoute
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteStatus {
    /// The current GatewayRoute status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// GatewayRouteARN is the AppMesh GatewayRoute object's Amazon Resource Name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayRouteARN")]
    pub gateway_route_arn: Option<String>,
    /// The generation observed by the GatewayRoute controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

