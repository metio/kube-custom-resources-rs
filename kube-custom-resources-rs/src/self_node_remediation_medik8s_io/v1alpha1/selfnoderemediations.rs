// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/medik8s/self-node-remediation/self-node-remediation.medik8s.io/v1alpha1/selfnoderemediations.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SelfNodeRemediationSpec defines the desired state of SelfNodeRemediation
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "self-node-remediation.medik8s.io", version = "v1alpha1", kind = "SelfNodeRemediation", plural = "selfnoderemediations")]
#[kube(namespaced)]
#[kube(status = "SelfNodeRemediationStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SelfNodeRemediationSpec {
    /// RemediationStrategy is the remediation method for unhealthy nodes.
    /// Currently, it could be either "Automatic", "OutOfServiceTaint" or "ResourceDeletion".
    /// ResourceDeletion will iterate over all pods and VolumeAttachment related to the unhealthy node and delete them.
    /// OutOfServiceTaint will add the out-of-service taint which is a new well-known taint "node.kubernetes.io/out-of-service"
    /// that enables automatic deletion of pv-attached pods on failed nodes, "out-of-service" taint is only supported on clusters with k8s version 1.26+ or OCP/OKD version 4.13+.
    /// Automatic will choose the most appropriate strategy during runtime.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remediationStrategy")]
    pub remediation_strategy: Option<SelfNodeRemediationRemediationStrategy>,
}

/// SelfNodeRemediationSpec defines the desired state of SelfNodeRemediation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SelfNodeRemediationRemediationStrategy {
    Automatic,
    ResourceDeletion,
    OutOfServiceTaint,
}

/// SelfNodeRemediationStatus defines the observed state of SelfNodeRemediation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelfNodeRemediationStatus {
    /// Represents the observations of a SelfNodeRemediation's current state.
    /// Known .status.conditions.type are: "Processing"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// LastError captures the last error that occurred during remediation.
    /// If no error occurred it would be empty
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastError")]
    pub last_error: Option<String>,
    /// Phase represents the current phase of remediation,
    /// One of: TBD
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// TimeAssumedRebooted is the time by then the unhealthy node assumed to be rebooted
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeAssumedRebooted")]
    pub time_assumed_rebooted: Option<String>,
}

