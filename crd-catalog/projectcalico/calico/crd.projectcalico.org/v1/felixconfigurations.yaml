apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.16.5"
  name: "felixconfigurations.crd.projectcalico.org"
spec:
  group: "crd.projectcalico.org"
  names:
    kind: "FelixConfiguration"
    listKind: "FelixConfigurationList"
    plural: "felixconfigurations"
    singular: "felixconfiguration"
  preserveUnknownFields: false
  scope: "Cluster"
  versions:
    - name: "v1"
      schema:
        openAPIV3Schema:
          description: "Felix Configuration contains the configuration for Felix."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            spec:
              description: "FelixConfigurationSpec contains the values of the Felix configuration."
              properties:
                allowIPIPPacketsFromWorkloads:
                  description: "AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic\nfrom workloads. [Default: false]"
                  type: "boolean"
                allowVXLANPacketsFromWorkloads:
                  description: "AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic\nfrom workloads. [Default: false]"
                  type: "boolean"
                awsSrcDstCheck:
                  description: "AWSSrcDstCheck controls whether Felix will try to change the \"source/dest check\" setting on the EC2 instance\non which it is running. A value of \"Disable\" will try to disable the source/dest check. Disabling the check\nallows for sending workload traffic without encapsulation within the same AWS subnet.\n[Default: DoNothing]"
                  enum:
                    - "DoNothing"
                    - "Enable"
                    - "Disable"
                  type: "string"
                bpfCTLBLogFilter:
                  description: "BPFCTLBLogFilter specifies, what is logged by connect time load balancer when BPFLogLevel is\ndebug. Currently has to be specified as 'all' when BPFLogFilters is set\nto see CTLB logs.\n[Default: unset - means logs are emitted when BPFLogLevel id debug and BPFLogFilters not set.]"
                  type: "string"
                bpfConnectTimeLoadBalancing:
                  description: "BPFConnectTimeLoadBalancing when in BPF mode, controls whether Felix installs the connect-time load\nbalancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services\nand it improves the performance of pod-to-service connections.When set to TCP, connect time load balancing\nis available only for services with TCP ports. [Default: TCP]"
                  enum:
                    - "TCP"
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                bpfConnectTimeLoadBalancingEnabled:
                  description: "BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load\nbalancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services\nand it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging\npurposes.\n\nDeprecated: Use BPFConnectTimeLoadBalancing [Default: true]"
                  type: "boolean"
                bpfConntrackLogLevel:
                  description: "BPFConntrackLogLevel controls the log level of the BPF conntrack cleanup program, which runs periodically\nto clean up expired BPF conntrack entries.\n[Default: Off]."
                  enum:
                    - "Off"
                    - "Debug"
                  type: "string"
                bpfConntrackMode:
                  description: "BPFConntrackCleanupMode controls how BPF conntrack entries are cleaned up.  `Auto` will use a BPF program if supported,\nfalling back to userspace if not.  `Userspace` will always use the userspace cleanup code.  `BPFProgram` will\nalways use the BPF program (failing if not supported).\n[Default: Auto]"
                  enum:
                    - "Auto"
                    - "Userspace"
                    - "BPFProgram"
                  type: "string"
                bpfConntrackTimeouts:
                  description: "BPFConntrackTimers overrides the default values for the specified conntrack timer if\nset. Each value can be either a duration or `Auto` to pick the value from\na Linux conntrack timeout.\n\nConfigurable timers are: CreationGracePeriod, TCPSynSent,\nTCPEstablished, TCPFinsSeen, TCPResetSeen, UDPTimeout, GenericTimeout,\nICMPTimeout.\n\nUnset values are replaced by the default values with a warning log for\nincorrect values."
                  properties:
                    creationGracePeriod:
                      description: " CreationGracePeriod gives a generic grace period to new connection\n before they are considered for cleanup [Default: 10s]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    genericTimeout:
                      description: "GenericTimeout controls how long it takes before considering this\nentry for cleanup after the connection became idle. If set to 'Auto', the\nvalue from nf_conntrack_generic_timeout is used. If nil, Calico uses its\nown default value. [Default: 10m]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    icmpTimeout:
                      description: "ICMPTimeout controls how long it takes before considering this\nentry for cleanup after the connection became idle. If set to 'Auto', the\nvalue from nf_conntrack_icmp_timeout is used. If nil, Calico uses its\nown default value. [Default: 5s]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    tcpEstablished:
                      description: "TCPEstablished controls how long it takes before considering this entry for\ncleanup after the connection became idle. If set to 'Auto', the\nvalue from nf_conntrack_tcp_timeout_established is used. If nil, Calico uses\nits own default value. [Default: 1h]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    tcpFinsSeen:
                      description: "TCPFinsSeen controls how long it takes before considering this entry for\ncleanup after the connection was closed gracefully. If set to 'Auto', the\nvalue from nf_conntrack_tcp_timeout_time_wait is used. If nil, Calico uses\nits own default value. [Default: Auto]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    tcpResetSeen:
                      description: "TCPResetSeen controls how long it takes before considering this entry for\ncleanup after the connection was aborted. If nil, Calico uses its own\ndefault value. [Default: 40s]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    tcpSynSent:
                      description: "TCPSynSent controls how long it takes before considering this entry for\ncleanup after the last SYN without a response. If set to 'Auto', the\nvalue from nf_conntrack_tcp_timeout_syn_sent is used. If nil, Calico uses\nits own default value. [Default: 20s]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                    udpTimeout:
                      description: "UDPTimeout controls how long it takes before considering this entry for\ncleanup after the connection became idle. If nil, Calico uses its own\ndefault value. [Default: 60s]."
                      pattern: "^(([0-9]*(\\.[0-9]*)?(ms|s|h|m|us)+)+|Auto)$"
                      type: "string"
                  type: "object"
                bpfDSROptoutCIDRs:
                  description: "BPFDSROptoutCIDRs is a list of CIDRs which are excluded from DSR. That is, clients\nin those CIDRs will access service node ports as if BPFExternalServiceMode was set to\nTunnel."
                  items:
                    type: "string"
                  type: "array"
                bpfDataIfacePattern:
                  description: "BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to\nin order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic\nflows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the\ncluster.  It should not match the workload interfaces (usually named cali...) or any other special device managed\nby Calico itself (e.g., tunnels)."
                  type: "string"
                bpfDisableGROForIfaces:
                  description: "BPFDisableGROForIfaces is a regular expression that controls which interfaces Felix should disable the\nGeneric Receive Offload [GRO] option.  It should not match the workload interfaces (usually named cali...)."
                  type: "string"
                bpfDisableUnprivileged:
                  description: "BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable\nunprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and\ncannot insert their own BPF programs to interfere with Calico's. [Default: true]"
                  type: "boolean"
                bpfEnabled:
                  description: "BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]"
                  type: "boolean"
                bpfEnforceRPF:
                  description: "BPFEnforceRPF enforce strict RPF on all host interfaces with BPF programs regardless of\nwhat is the per-interfaces or global setting. Possible values are Disabled, Strict\nor Loose. [Default: Loose]"
                  pattern: "^(?i)(Disabled|Strict|Loose)?$"
                  type: "string"
                bpfExcludeCIDRsFromNAT:
                  description: "BPFExcludeCIDRsFromNAT is a list of CIDRs that are to be excluded from NAT\nresolution so that host can handle them. A typical usecase is node local\nDNS cache."
                  items:
                    type: "string"
                  type: "array"
                bpfExportBufferSizeMB:
                  description: "BPFExportBufferSizeMB in BPF mode, controls the buffer size used for sending BPF events to felix.\n[Default: 1]"
                  type: "integer"
                bpfExtToServiceConnmark:
                  description: "BPFExtToServiceConnmark in BPF mode, controls a 32bit mark that is set on connections from an\nexternal client to a local service. This mark allows us to control how packets of that\nconnection are routed within the host and how is routing interpreted by RPF check. [Default: 0]"
                  type: "integer"
                bpfExternalServiceMode:
                  description: "BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports\nand cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic\nis tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic\nis sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress\nnode; this requires a permissive L2 network.  [Default: Tunnel]"
                  pattern: "^(?i)(Tunnel|DSR)?$"
                  type: "string"
                bpfForceTrackPacketsFromIfaces:
                  description: "BPFForceTrackPacketsFromIfaces in BPF mode, forces traffic from these interfaces\nto skip Calico's iptables NOTRACK rule, allowing traffic from those interfaces to be\ntracked by Linux conntrack.  Should only be used for interfaces that are not used for\nthe Calico fabric.  For example, a docker bridge device for non-Calico-networked\ncontainers. [Default: docker+]"
                  items:
                    type: "string"
                  type: "array"
                bpfHostConntrackBypass:
                  description: "BPFHostConntrackBypass Controls whether to bypass Linux conntrack in BPF mode for\nworkloads and services. [Default: true - bypass Linux conntrack]"
                  type: "boolean"
                bpfHostNetworkedNATWithoutCTLB:
                  description: "BPFHostNetworkedNATWithoutCTLB when in BPF mode, controls whether Felix does a NAT without CTLB. This along with BPFConnectTimeLoadBalancing\ndetermines the CTLB behavior. [Default: Enabled]"
                  enum:
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                bpfKubeProxyEndpointSlicesEnabled:
                  description: "BPFKubeProxyEndpointSlicesEnabled is deprecated and has no effect. BPF\nkube-proxy always accepts endpoint slices. This option will be removed in\nthe next release."
                  type: "boolean"
                bpfKubeProxyIptablesCleanupEnabled:
                  description: "BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream\nKubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]"
                  type: "boolean"
                bpfKubeProxyMinSyncPeriod:
                  description: "BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's\nembedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by\nbatching up more work.  [Default: 1s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                bpfL3IfacePattern:
                  description: "BPFL3IfacePattern is a regular expression that allows to list tunnel devices like wireguard or vxlan (i.e., L3 devices)\nin addition to BPFDataIfacePattern. That is, tunnel interfaces not created by Calico, that Calico workload traffic flows\nover as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster."
                  type: "string"
                bpfLogFilters:
                  additionalProperties:
                    type: "string"
                  description: "BPFLogFilters is a map of key=values where the value is\na pcap filter expression and the key is an interface name with 'all'\ndenoting all interfaces, 'weps' all workload endpoints and 'heps' all host\nendpoints.\n\nWhen specified as an env var, it accepts a comma-separated list of\nkey=values.\n[Default: unset - means all debug logs are emitted]"
                  type: "object"
                bpfLogLevel:
                  description: "BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or\n\"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`.\n[Default: Off]."
                  pattern: "^(?i)(Off|Info|Debug)?$"
                  type: "string"
                bpfMapSizeConntrack:
                  description: "BPFMapSizeConntrack sets the size for the conntrack map.  This map must be large enough to hold\nan entry for each active connection.  Warning: changing the size of the conntrack map can cause disruption."
                  type: "integer"
                bpfMapSizeConntrackCleanupQueue:
                  description: "BPFMapSizeConntrackCleanupQueue sets the size for the map used to hold NAT conntrack entries that are queued\nfor cleanup.  This should be big enough to hold all the NAT entries that expire within one cleanup interval."
                  minimum: 1.0
                  type: "integer"
                bpfMapSizeConntrackScaling:
                  description: "BPFMapSizeConntrackScaling controls whether and how we scale the conntrack map size depending\non its usage. 'Disabled' make the size stay at the default or whatever is set by\nBPFMapSizeConntrack*. 'DoubleIfFull' doubles the size when the map is pretty much full even\nafter cleanups. [Default: DoubleIfFull]"
                  pattern: "^(?i)(Disabled|DoubleIfFull)?$"
                  type: "string"
                bpfMapSizeIPSets:
                  description: "BPFMapSizeIPSets sets the size for ipsets map.  The IP sets map must be large enough to hold an entry\nfor each endpoint matched by every selector in the source/destination matches in network policy.  Selectors\nsuch as \"all()\" can result in large numbers of entries (one entry per endpoint in that case)."
                  type: "integer"
                bpfMapSizeIfState:
                  description: "BPFMapSizeIfState sets the size for ifstate map.  The ifstate map must be large enough to hold an entry\nfor each device (host + workloads) on a host."
                  type: "integer"
                bpfMapSizeNATAffinity:
                  description: "BPFMapSizeNATAffinity sets the size of the BPF map that stores the affinity of a connection (for services that\nenable that feature."
                  type: "integer"
                bpfMapSizeNATBackend:
                  description: "BPFMapSizeNATBackend sets the size for NAT back end map.\nThis is the total number of endpoints. This is mostly\nmore than the size of the number of services."
                  type: "integer"
                bpfMapSizeNATFrontend:
                  description: "BPFMapSizeNATFrontend sets the size for NAT front end map.\nFrontendMap should be large enough to hold an entry for each nodeport,\nexternal IP and each port in each service."
                  type: "integer"
                bpfMapSizePerCpuConntrack:
                  description: "BPFMapSizePerCPUConntrack determines the size of conntrack map based on the number of CPUs. If set to a\nnon-zero value, overrides BPFMapSizeConntrack with `BPFMapSizePerCPUConntrack * (Number of CPUs)`.\nThis map must be large enough to hold an entry for each active connection.  Warning: changing the size of the\nconntrack map can cause disruption."
                  type: "integer"
                bpfMapSizeRoute:
                  description: "BPFMapSizeRoute sets the size for the routes map.  The routes map should be large enough\nto hold one entry per workload and a handful of entries per host (enough to cover its own IPs and\ntunnel IPs)."
                  type: "integer"
                bpfPSNATPorts:
                  anyOf:
                    - type: "integer"
                    - type: "string"
                  description: "BPFPSNATPorts sets the range from which we randomly pick a port if there is a source port\ncollision. This should be within the ephemeral range as defined by RFC 6056 (1024–65535) and\npreferably outside the  ephemeral ranges used by common operating systems. Linux uses\n32768–60999, while others mostly use the IANA defined range 49152–65535. It is not necessarily\na problem if this range overlaps with the operating systems. Both ends of the range are\ninclusive. [Default: 20000:29999]"
                  pattern: "^.*"
                  x-kubernetes-int-or-string: true
                bpfPolicyDebugEnabled:
                  description: "BPFPolicyDebugEnabled when true, Felix records detailed information\nabout the BPF policy programs, which can be examined with the calico-bpf command-line tool."
                  type: "boolean"
                bpfProfiling:
                  description: "BPFProfiling controls profiling of BPF programs. At the monent, it can be\nDisabled or Enabled. [Default: Disabled]"
                  enum:
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                bpfRedirectToPeer:
                  description: "BPFRedirectToPeer controls which whether it is allowed to forward straight to the\npeer side of the workload devices. It is allowed for any host L2 devices by default\n(L2Only), but it breaks TCP dump on the host side of workload device as it bypasses\nit on ingress. Value of Enabled also allows redirection from L3 host devices like\nIPIP tunnel or Wireguard directly to the peer side of the workload's device. This\nmakes redirection faster, however, it breaks tools like tcpdump on the peer side.\nUse Enabled with caution. [Default: L2Only]"
                  enum:
                    - "Enabled"
                    - "Disabled"
                    - "L2Only"
                  type: "string"
                chainInsertMode:
                  description: "ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule\nat the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents\nCalico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains\nsignal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed.\n[Default: insert]"
                  pattern: "^(?i)(Insert|Append)?$"
                  type: "string"
                dataplaneDriver:
                  description: "DataplaneDriver filename of the external dataplane driver to use.  Only used if UseInternalDataplaneDriver\nis set to false."
                  type: "string"
                dataplaneWatchdogTimeout:
                  description: "DataplaneWatchdogTimeout is the readiness/liveness timeout used for Felix's (internal) dataplane driver.\nDeprecated: replaced by the generic HealthTimeoutOverrides."
                  type: "string"
                debugDisableLogDropping:
                  description: "DebugDisableLogDropping disables the dropping of log messages when the log buffer is full.  This can\nsignificantly impact performance if log write-out is a bottleneck. [Default: false]"
                  type: "boolean"
                debugHost:
                  description: "DebugHost is the host IP or hostname to bind the debug port to.  Only used\nif DebugPort is set. [Default:localhost]"
                  type: "string"
                debugMemoryProfilePath:
                  description: "DebugMemoryProfilePath is the path to write the memory profile to when triggered by signal."
                  type: "string"
                debugPort:
                  description: "DebugPort if set, enables Felix's debug HTTP port, which allows memory and CPU profiles\nto be retrieved.  The debug port is not secure, it should not be exposed to the internet."
                  type: "integer"
                debugSimulateCalcGraphHangAfter:
                  description: "DebugSimulateCalcGraphHangAfter is used to simulate a hang in the calculation graph after the specified duration.\nThis is useful in tests of the watchdog system only!"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                debugSimulateDataplaneApplyDelay:
                  description: "DebugSimulateDataplaneApplyDelay adds an artificial delay to every dataplane operation.  This is useful for\nsimulating a heavily loaded system for test purposes only."
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                debugSimulateDataplaneHangAfter:
                  description: "DebugSimulateDataplaneHangAfter is used to simulate a hang in the dataplane after the specified duration.\nThis is useful in tests of the watchdog system only!"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                defaultEndpointToHostAction:
                  description: "DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host\nitself (after the endpoint's egress policy is applied). By default, Calico blocks traffic from workload\nendpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from\nendpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables\n\"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain\nonce it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets\nfrom workloads after processing workload endpoint egress policy. [Default: Drop]"
                  pattern: "^(?i)(Drop|Accept|Return)?$"
                  type: "string"
                deviceRouteProtocol:
                  description: "DeviceRouteProtocol controls the protocol to set on routes programmed by Felix. The protocol is an 8-bit label\nused to identify the owner of the route."
                  type: "integer"
                deviceRouteSourceAddress:
                  description: "DeviceRouteSourceAddress IPv4 address to set as the source hint for routes programmed by Felix. When not set\nthe source address for local traffic from host to workload will be determined by the kernel."
                  type: "string"
                deviceRouteSourceAddressIPv6:
                  description: "DeviceRouteSourceAddressIPv6 IPv6 address to set as the source hint for routes programmed by Felix. When not set\nthe source address for local traffic from host to workload will be determined by the kernel."
                  type: "string"
                disableConntrackInvalidCheck:
                  description: "DisableConntrackInvalidCheck disables the check for invalid connections in conntrack. While the conntrack\ninvalid check helps to detect malicious traffic, it can also cause issues with certain multi-NIC scenarios."
                  type: "boolean"
                endpointReportingDelay:
                  description: "EndpointReportingDelay is the delay before Felix reports endpoint status to the datastore. This is only used\nby the OpenStack integration. [Default: 1s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                endpointReportingEnabled:
                  description: "EndpointReportingEnabled controls whether Felix reports endpoint status to the datastore. This is only used\nby the OpenStack integration. [Default: false]"
                  type: "boolean"
                endpointStatusPathPrefix:
                  description: "EndpointStatusPathPrefix is the path to the directory where endpoint status will be written. Endpoint status\nfile reporting is disabled if field is left empty.\n\nChosen directory should match the directory used by the CNI plugin for PodStartupDelay.\n[Default: /var/run/calico]"
                  type: "string"
                externalNodesList:
                  description: "ExternalNodesCIDRList is a list of CIDR's of external, non-Calico nodes from which VXLAN/IPIP overlay traffic\nwill be allowed.  By default, external tunneled traffic is blocked to reduce attack surface."
                  items:
                    type: "string"
                  type: "array"
                failsafeInboundHostPorts:
                  description: "FailsafeInboundHostPorts is a list of ProtoPort struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will\nallow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally\ncutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified,\nit defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports,\nuse the value \"[]\". The default value allows ssh access, DHCP, BGP, etcd and the Kubernetes API.\n[Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:5473, tcp:6443, tcp:6666, tcp:6667 ]"
                  items:
                    description: "ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified."
                    properties:
                      net:
                        type: "string"
                      port:
                        type: "integer"
                      protocol:
                        type: "string"
                    required:
                      - "port"
                    type: "object"
                  type: "array"
                failsafeOutboundHostPorts:
                  description: "FailsafeOutboundHostPorts is a list of PortProto struct objects including UDP/TCP/SCTP ports and CIDRs that Felix\nwill allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally\ncutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults\nto \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports,\nuse the value \"[]\". The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd\nas well as allowing DHCP, DNS, BGP and the Kubernetes API.\n[Default: udp:53, udp:67, tcp:179, tcp:2379, tcp:2380, tcp:5473, tcp:6443, tcp:6666, tcp:6667 ]"
                  items:
                    description: "ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified."
                    properties:
                      net:
                        type: "string"
                      port:
                        type: "integer"
                      protocol:
                        type: "string"
                    required:
                      - "port"
                    type: "object"
                  type: "array"
                featureDetectOverride:
                  description: "FeatureDetectOverride is used to override feature detection based on auto-detected platform\ncapabilities.  Values are specified in a comma separated list with no spaces, example;\n\"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". A value of \"true\" or \"false\" will\nforce enable/disable feature, empty or omitted values fall back to auto-detection."
                  pattern: "^([a-zA-Z0-9-_]+=(true|false|),)*([a-zA-Z0-9-_]+=(true|false|))?$"
                  type: "string"
                featureGates:
                  description: "FeatureGates is used to enable or disable tech-preview Calico features.\nValues are specified in a comma separated list with no spaces, example;\n\"BPFConnectTimeLoadBalancingWorkaround=enabled,XyZ=false\". This is\nused to enable features that are not fully production ready."
                  pattern: "^([a-zA-Z0-9-_]+=([^=]+),)*([a-zA-Z0-9-_]+=([^=]+))?$"
                  type: "string"
                floatingIPs:
                  description: "FloatingIPs configures whether or not Felix will program non-OpenStack floating IP addresses.  (OpenStack-derived\nfloating IPs are always programmed, regardless of this setting.)"
                  enum:
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                flowLogsCollectorDebugTrace:
                  description: "When FlowLogsCollectorDebugTrace is set to true, enables the logs in the collector to be\nprinted in their entirety."
                  type: "boolean"
                flowLogsFlushInterval:
                  description: "FlowLogsFlushInterval configures the interval at which Felix exports flow logs."
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                flowLogsGoldmaneServer:
                  description: "FlowLogGoldmaneServer is the flow server endpoint to which flow data should be published."
                  type: "string"
                flowLogsPolicyEvaluationMode:
                  description: "Continuous - Felix evaluates active flows on a regular basis to determine the rule\ntraces in the flow logs. Any policy updates that impact a flow will be reflected in the\npending_policies field, offering a near-real-time view of policy changes across flows.\nNone - Felix stops evaluating pending traces.\n[Default: Continuous]"
                  enum:
                    - "None"
                    - "Continuous"
                  type: "string"
                genericXDPEnabled:
                  description: "GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver\nmodes can use XDP. This is not recommended since it doesn't provide better performance than\niptables. [Default: false]"
                  type: "boolean"
                goGCThreshold:
                  description: "GoGCThreshold Sets the Go runtime's garbage collection threshold.  I.e. the percentage that the heap is\nallowed to grow before garbage collection is triggered.  In general, doubling the value halves the CPU time\nspent doing GC, but it also doubles peak GC memory overhead.  A special value of -1 can be used\nto disable GC entirely; this should only be used in conjunction with the GoMemoryLimitMB setting.\n\nThis setting is overridden by the GOGC environment variable.\n\n[Default: 40]"
                  type: "integer"
                goMaxProcs:
                  description: "GoMaxProcs sets the maximum number of CPUs that the Go runtime will use concurrently.  A value of -1 means\n\"use the system default\"; typically the number of real CPUs on the system.\n\nthis setting is overridden by the GOMAXPROCS environment variable.\n\n[Default: -1]"
                  type: "integer"
                goMemoryLimitMB:
                  description: "GoMemoryLimitMB sets a (soft) memory limit for the Go runtime in MB.  The Go runtime will try to keep its memory\nusage under the limit by triggering GC as needed.  To avoid thrashing, it will exceed the limit if GC starts to\ntake more than 50% of the process's CPU time.  A value of -1 disables the memory limit.\n\nNote that the memory limit, if used, must be considerably less than any hard resource limit set at the container\nor pod level.  This is because felix is not the only process that must run in the container or pod.\n\nThis setting is overridden by the GOMEMLIMIT environment variable.\n\n[Default: -1]"
                  type: "integer"
                healthEnabled:
                  description: "HealthEnabled if set to true, enables Felix's health port, which provides readiness and liveness endpoints.\n[Default: false]"
                  type: "boolean"
                healthHost:
                  description: "HealthHost is the host that the health server should bind to. [Default: localhost]"
                  type: "string"
                healthPort:
                  description: "HealthPort is the TCP port that the health server should bind to. [Default: 9099]"
                  type: "integer"
                healthTimeoutOverrides:
                  description: "HealthTimeoutOverrides allows the internal watchdog timeouts of individual subcomponents to be\noverridden.  This is useful for working around \"false positive\" liveness timeouts that can occur\nin particularly stressful workloads or if CPU is constrained.  For a list of active\nsubcomponents, see Felix's logs."
                  items:
                    properties:
                      name:
                        type: "string"
                      timeout:
                        type: "string"
                    required:
                      - "name"
                      - "timeout"
                    type: "object"
                  type: "array"
                interfaceExclude:
                  description: "InterfaceExclude A comma-separated list of interface names that should be excluded when Felix is resolving\nhost endpoints. The default value ensures that Felix ignores Kubernetes' internal `kube-ipvs0` device. If you\nwant to exclude multiple interface names using a single value, the list supports regular expressions. For\nregular expressions you must wrap the value with `/`. For example having values `/^kube/,veth1` will exclude\nall interfaces that begin with `kube` and also the interface `veth1`. [Default: kube-ipvs0]"
                  type: "string"
                interfacePrefix:
                  description: "InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes\nthem from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators\nconfigure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value,\nand our OpenStack integration sets the 'tap' value. [Default: cali]"
                  type: "string"
                interfaceRefreshInterval:
                  description: "InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state.\nThe rescan can be disabled by setting the interval to 0."
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                ipForwarding:
                  description: "IPForwarding controls whether Felix sets the host sysctls to enable IP forwarding.  IP forwarding is required\nwhen using Calico for workload networking.  This should be disabled only on hosts where Calico is used solely for\nhost protection. In BPF mode, due to a kernel interaction, either IPForwarding must be enabled or BPFEnforceRPF\nmust be disabled. [Default: Enabled]"
                  enum:
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                ipipEnabled:
                  description: "IPIPEnabled overrides whether Felix should configure an IPIP interface on the host. Optional as Felix\ndetermines this based on the existing IP pools. [Default: nil (unset)]"
                  type: "boolean"
                ipipMTU:
                  description: "IPIPMTU controls the MTU to set on the IPIP tunnel device.  Optional as Felix auto-detects the MTU based on the\nMTU of the host's interfaces. [Default: 0 (auto-detect)]"
                  type: "integer"
                ipsetsRefreshInterval:
                  description: "IpsetsRefreshInterval controls the period at which Felix re-checks all IP sets to look for discrepancies.\nSet to 0 to disable the periodic refresh. [Default: 90s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                iptablesBackend:
                  description: "IptablesBackend controls which backend of iptables will be used. The default is `Auto`.\n\nWarning: changing this on a running system can leave \"orphaned\" rules in the \"other\" backend. These\nshould be cleaned up to avoid confusing interactions."
                  pattern: "^(?i)(Auto|Legacy|NFT)?$"
                  type: "string"
                iptablesFilterAllowAction:
                  description: "IptablesFilterAllowAction controls what happens to traffic that is accepted by a Felix policy chain in the\niptables filter table (which is used for \"normal\" policy). The default will immediately `Accept` the traffic. Use\n`Return` to send the traffic back up to the system chains for further processing."
                  pattern: "^(?i)(Accept|Return)?$"
                  type: "string"
                iptablesFilterDenyAction:
                  description: "IptablesFilterDenyAction controls what happens to traffic that is denied by network policy. By default Calico blocks traffic\nwith an iptables \"DROP\" action. If you want to use \"REJECT\" action instead you can configure it in here."
                  pattern: "^(?i)(Drop|Reject)?$"
                  type: "string"
                iptablesLockFilePath:
                  description: "IptablesLockFilePath is the location of the iptables lock file. You may need to change this\nif the lock file is not in its standard location (for example if you have mapped it into Felix's\ncontainer at a different path). [Default: /run/xtables.lock]"
                  type: "string"
                iptablesLockProbeInterval:
                  description: "IptablesLockProbeInterval when IptablesLockTimeout is enabled: the time that Felix will wait between\nattempts to acquire the iptables lock if it is not available. Lower values make Felix more\nresponsive when the lock is contended, but use more CPU. [Default: 50ms]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                iptablesLockTimeout:
                  description: "IptablesLockTimeout is the time that Felix itself will wait for the iptables lock (rather than delegating the\nlock handling to the `iptables` command).\n\nDeprecated: `iptables-restore` v1.8+ always takes the lock, so enabling this feature results in deadlock.\n[Default: 0s disabled]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                iptablesMangleAllowAction:
                  description: "IptablesMangleAllowAction controls what happens to traffic that is accepted by a Felix policy chain in the\niptables mangle table (which is used for \"pre-DNAT\" policy). The default will immediately `Accept` the traffic.\nUse `Return` to send the traffic back up to the system chains for further processing."
                  pattern: "^(?i)(Accept|Return)?$"
                  type: "string"
                iptablesMarkMask:
                  description: "IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal\nnumber with at least 8 bits set, none of which clash with any other mark bits in use on the system.\n[Default: 0xffff0000]"
                  format: "int32"
                  type: "integer"
                iptablesNATOutgoingInterfaceFilter:
                  description: "This parameter can be used to limit the host interfaces on which Calico will apply SNAT to traffic leaving a\nCalico IPAM pool with \"NAT outgoing\" enabled. This can be useful if you have a main data interface, where\ntraffic should be SNATted and a secondary device (such as the docker bridge) which is local to the host and\ndoesn't require SNAT. This parameter uses the iptables interface matching syntax, which allows + as a\nwildcard. Most users will not need to set this. Example: if your data interfaces are eth0 and eth1 and you\nwant to exclude the docker bridge, you could set this to eth+"
                  type: "string"
                iptablesPostWriteCheckInterval:
                  description: "IptablesPostWriteCheckInterval is the period after Felix has done a write\nto the dataplane that it schedules an extra read back in order to check the write was not\nclobbered by another process. This should only occur if another application on the system\ndoesn't respect the iptables lock. [Default: 1s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                iptablesRefreshInterval:
                  description: "IptablesRefreshInterval is the period at which Felix re-checks the IP sets\nin the dataplane to ensure that no other process has accidentally broken Calico's rules.\nSet to 0 to disable IP sets refresh. Note: the default for this value is lower than the\nother refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel\nversion 4.11. If you are using v4.11 or greater you may want to set this to, a higher value\nto reduce Felix CPU usage. [Default: 10s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                ipv6Support:
                  description: "IPv6Support controls whether Felix enables support for IPv6 (if supported by the in-use dataplane)."
                  type: "boolean"
                kubeNodePortRanges:
                  description: "KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode.\nFelix uses these ranges to separate host and workload traffic. [Default: 30000:32767]."
                  items:
                    anyOf:
                      - type: "integer"
                      - type: "string"
                    pattern: "^.*"
                    x-kubernetes-int-or-string: true
                  type: "array"
                logDebugFilenameRegex:
                  description: "LogDebugFilenameRegex controls which source code files have their Debug log output included in the logs.\nOnly logs from files with names that match the given regular expression are included.  The filter only applies\nto Debug level logs."
                  type: "string"
                logFilePath:
                  description: "LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]"
                  type: "string"
                logPrefix:
                  description: "LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]"
                  type: "string"
                logSeverityFile:
                  description: "LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]"
                  pattern: "^(?i)(Debug|Info|Warning|Error|Fatal)?$"
                  type: "string"
                logSeverityScreen:
                  description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]"
                  pattern: "^(?i)(Debug|Info|Warning|Error|Fatal)?$"
                  type: "string"
                logSeveritySys:
                  description: "LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog.\n[Default: Info]"
                  pattern: "^(?i)(Debug|Info|Warning|Error|Fatal)?$"
                  type: "string"
                maxIpsetSize:
                  description: "MaxIpsetSize is the maximum number of IP addresses that can be stored in an IP set. Not applicable\nif using the nftables backend."
                  type: "integer"
                metadataAddr:
                  description: "MetadataAddr is the IP address or domain name of the server that can answer VM queries for\ncloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in\nUbuntu, nova-api-metadata). A value of none (case-insensitive) means that Felix should not\nset up any NAT rule for the metadata path. [Default: 127.0.0.1]"
                  type: "string"
                metadataPort:
                  description: "MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if\nnot 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort.\nIn most cases this should not need to be changed [Default: 8775]."
                  type: "integer"
                mtuIfacePattern:
                  description: "MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order\nto calculate the host's MTU.\nThis should not match workload interfaces (usually named cali...)."
                  type: "string"
                natOutgoingAddress:
                  description: "NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that\nis leaving the network. By default the address used is an address on the interface the traffic is leaving on\n(i.e. it uses the iptables MASQUERADE target)."
                  type: "string"
                natPortRange:
                  anyOf:
                    - type: "integer"
                    - type: "string"
                  description: "NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the\nnetwork stack is used."
                  pattern: "^.*"
                  x-kubernetes-int-or-string: true
                netlinkTimeout:
                  description: "NetlinkTimeout is the timeout when talking to the kernel over the netlink protocol, used for programming\nroutes, rules, and other kernel objects. [Default: 10s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                nftablesFilterAllowAction:
                  description: "NftablesFilterAllowAction controls the nftables action that Felix uses to represent the \"allow\" policy verdict\nin the filter table. The default is to `ACCEPT` the traffic, which is a terminal action.  Alternatively,\n`RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules."
                  pattern: "^(?i)(Accept|Return)?$"
                  type: "string"
                nftablesFilterDenyAction:
                  description: "NftablesFilterDenyAction controls what happens to traffic that is denied by network policy. By default, Calico\nblocks traffic with a \"drop\" action. If you want to use a \"reject\" action instead you can configure it here."
                  pattern: "^(?i)(Drop|Reject)?$"
                  type: "string"
                nftablesMangleAllowAction:
                  description: "NftablesMangleAllowAction controls the nftables action that Felix uses to represent the \"allow\" policy verdict\nin the mangle table. The default is to `ACCEPT` the traffic, which is a terminal action.  Alternatively,\n`RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules."
                  pattern: "^(?i)(Accept|Return)?$"
                  type: "string"
                nftablesMarkMask:
                  description: "NftablesMarkMask is the mask that Felix selects its nftables Mark bits from. Should be a 32 bit hexadecimal\nnumber with at least 8 bits set, none of which clash with any other mark bits in use on the system.\n[Default: 0xffff0000]"
                  format: "int32"
                  type: "integer"
                nftablesMode:
                  description: "NFTablesMode configures nftables support in Felix. [Default: Disabled]"
                  enum:
                    - "Disabled"
                    - "Enabled"
                    - "Auto"
                  type: "string"
                nftablesRefreshInterval:
                  description: "NftablesRefreshInterval controls the interval at which Felix periodically refreshes the nftables rules. [Default: 90s]"
                  type: "string"
                openstackRegion:
                  description: "OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region\nCalico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel,\nor in felix.cfg or the environment on each compute node), and must match the [calico]\nopenstack_region value configured in neutron.conf on each node. [Default: Empty]"
                  type: "string"
                policySyncPathPrefix:
                  description: "PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services,\nlike Application layer policy. [Default: Empty]"
                  type: "string"
                prometheusGoMetricsEnabled:
                  description: "PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when\nset to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]"
                  type: "boolean"
                prometheusMetricsEnabled:
                  description: "PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]"
                  type: "boolean"
                prometheusMetricsHost:
                  description: "PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]"
                  type: "string"
                prometheusMetricsPort:
                  description: "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]"
                  type: "integer"
                prometheusProcessMetricsEnabled:
                  description: "PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when\nset to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]"
                  type: "boolean"
                prometheusWireGuardMetricsEnabled:
                  description: "PrometheusWireGuardMetricsEnabled disables wireguard metrics collection, which the Prometheus client does by default, when\nset to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]"
                  type: "boolean"
                removeExternalRoutes:
                  description: "RemoveExternalRoutes Controls whether Felix will remove unexpected routes to workload interfaces. Felix will\nalways clean up expected routes that use the configured DeviceRouteProtocol.  To add your own routes, you must\nuse a distinct protocol (in addition to setting this field to false)."
                  type: "boolean"
                reportingInterval:
                  description: "ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable.\nMust be non-zero in OpenStack deployments. [Default: 30s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                reportingTTL:
                  description: "ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                routeRefreshInterval:
                  description: "RouteRefreshInterval is the period at which Felix re-checks the routes\nin the dataplane to ensure that no other process has accidentally broken Calico's rules.\nSet to 0 to disable route refresh. [Default: 90s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                routeSource:
                  description: "RouteSource configures where Felix gets its routing information.\n- WorkloadIPs: use workload endpoints to construct routes.\n- CalicoIPAM: the default - use IPAM data to construct routes."
                  pattern: "^(?i)(WorkloadIPs|CalicoIPAM)?$"
                  type: "string"
                routeSyncDisabled:
                  description: "RouteSyncDisabled will disable all operations performed on the route table. Set to true to\nrun in network-policy mode only."
                  type: "boolean"
                routeTableRange:
                  description: "Deprecated in favor of RouteTableRanges.\nCalico programs additional Linux route tables for various purposes.\nRouteTableRange specifies the indices of the route tables that Calico should use."
                  properties:
                    max:
                      type: "integer"
                    min:
                      type: "integer"
                  required:
                    - "max"
                    - "min"
                  type: "object"
                routeTableRanges:
                  description: "Calico programs additional Linux route tables for various purposes.\nRouteTableRanges specifies a set of table index ranges that Calico should use.\nDeprecates`RouteTableRange`, overrides `RouteTableRange`."
                  items:
                    properties:
                      max:
                        type: "integer"
                      min:
                        type: "integer"
                    required:
                      - "max"
                      - "min"
                    type: "object"
                  type: "array"
                serviceLoopPrevention:
                  description: "When service IP advertisement is enabled, prevent routing loops to service IPs that are\nnot in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy.\nUnless set to \"Disabled\", in which case such routing loops continue to be allowed.\n[Default: Drop]"
                  pattern: "^(?i)(Drop|Reject|Disabled)?$"
                  type: "string"
                sidecarAccelerationEnabled:
                  description: "SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]"
                  type: "boolean"
                usageReportingEnabled:
                  description: "UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage\nserver. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]"
                  type: "boolean"
                usageReportingInitialDelay:
                  description: "UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                usageReportingInterval:
                  description: "UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                useInternalDataplaneDriver:
                  description: "UseInternalDataplaneDriver, if true, Felix will use its internal dataplane programming logic.  If false, it\nwill launch an external dataplane driver and communicate with it over protobuf."
                  type: "boolean"
                vxlanEnabled:
                  description: "VXLANEnabled overrides whether Felix should create the VXLAN tunnel device for IPv4 VXLAN networking.\nOptional as Felix determines this based on the existing IP pools. [Default: nil (unset)]"
                  type: "boolean"
                vxlanMTU:
                  description: "VXLANMTU is the MTU to set on the IPv4 VXLAN tunnel device.  Optional as Felix auto-detects the MTU based on the\nMTU of the host's interfaces. [Default: 0 (auto-detect)]"
                  type: "integer"
                vxlanMTUV6:
                  description: "VXLANMTUV6 is the MTU to set on the IPv6 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the\nMTU of the host's interfaces. [Default: 0 (auto-detect)]"
                  type: "integer"
                vxlanPort:
                  description: "VXLANPort is the UDP port number to use for VXLAN traffic. [Default: 4789]"
                  type: "integer"
                vxlanVNI:
                  description: "VXLANVNI is the VXLAN VNI to use for VXLAN traffic.  You may need to change this if the default value is\nin use on your system. [Default: 4096]"
                  type: "integer"
                windowsManageFirewallRules:
                  description: "WindowsManageFirewallRules configures whether or not Felix will program Windows Firewall rules (to allow inbound access to its own metrics ports). [Default: Disabled]"
                  enum:
                    - "Enabled"
                    - "Disabled"
                  type: "string"
                wireguardEnabled:
                  description: "WireguardEnabled controls whether Wireguard is enabled for IPv4 (encapsulating IPv4 traffic over an IPv4 underlay network). [Default: false]"
                  type: "boolean"
                wireguardEnabledV6:
                  description: "WireguardEnabledV6 controls whether Wireguard is enabled for IPv6 (encapsulating IPv6 traffic over an IPv6 underlay network). [Default: false]"
                  type: "boolean"
                wireguardHostEncryptionEnabled:
                  description: "WireguardHostEncryptionEnabled controls whether Wireguard host-to-host encryption is enabled. [Default: false]"
                  type: "boolean"
                wireguardInterfaceName:
                  description: "WireguardInterfaceName specifies the name to use for the IPv4 Wireguard interface. [Default: wireguard.cali]"
                  type: "string"
                wireguardInterfaceNameV6:
                  description: "WireguardInterfaceNameV6 specifies the name to use for the IPv6 Wireguard interface. [Default: wg-v6.cali]"
                  type: "string"
                wireguardKeepAlive:
                  description: "WireguardPersistentKeepAlive controls Wireguard PersistentKeepalive option. Set 0 to disable. [Default: 0]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
                wireguardListeningPort:
                  description: "WireguardListeningPort controls the listening port used by IPv4 Wireguard. [Default: 51820]"
                  type: "integer"
                wireguardListeningPortV6:
                  description: "WireguardListeningPortV6 controls the listening port used by IPv6 Wireguard. [Default: 51821]"
                  type: "integer"
                wireguardMTU:
                  description: "WireguardMTU controls the MTU on the IPv4 Wireguard interface. See Configuring MTU [Default: 1440]"
                  type: "integer"
                wireguardMTUV6:
                  description: "WireguardMTUV6 controls the MTU on the IPv6 Wireguard interface. See Configuring MTU [Default: 1420]"
                  type: "integer"
                wireguardRoutingRulePriority:
                  description: "WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]"
                  type: "integer"
                wireguardThreadingEnabled:
                  description: "WireguardThreadingEnabled controls whether Wireguard has Threaded NAPI enabled. [Default: false]\nThis increases the maximum number of packets a Wireguard interface can process.\nConsider threaded NAPI only if you have high packets per second workloads that are causing dropping packets due to a saturated `softirq` CPU core.\nThere is a [known issue](https://lore.kernel.org/netdev/CALrw=nEoT2emQ0OAYCjM1d_6Xe_kNLSZ6dhjb5FxrLFYh4kozA@mail.gmail.com/T/) with this setting\nthat may cause NAPI to get stuck holding the global `rtnl_mutex` when a peer is removed.\nWorkaround: Make sure your Linux kernel [includes this patch](https://github.com/torvalds/linux/commit/56364c910691f6d10ba88c964c9041b9ab777bd6) to unwedge NAPI."
                  type: "boolean"
                workloadSourceSpoofing:
                  description: "WorkloadSourceSpoofing controls whether pods can use the allowedSourcePrefixes annotation to send traffic with a source IP\naddress that is not theirs. This is disabled by default. When set to \"Any\", pods can request any prefix."
                  pattern: "^(?i)(Disabled|Any)?$"
                  type: "string"
                xdpEnabled:
                  description: "XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]"
                  type: "boolean"
                xdpRefreshInterval:
                  description: "XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no\nother process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to\ndisable XDP refresh. [Default: 90s]"
                  pattern: "^([0-9]+(\\\\.[0-9]+)?(ms|s|m|h))*$"
                  type: "string"
              type: "object"
          type: "object"
      served: true
      storage: true
