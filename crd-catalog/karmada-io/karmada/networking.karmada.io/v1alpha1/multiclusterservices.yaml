apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.14.0"
  name: "multiclusterservices.networking.karmada.io"
spec:
  group: "networking.karmada.io"
  names:
    categories:
      - "karmada-io"
    kind: "MultiClusterService"
    listKind: "MultiClusterServiceList"
    plural: "multiclusterservices"
    shortNames:
      - "mcs"
    singular: "multiclusterservice"
  scope: "Namespaced"
  versions:
    - name: "v1alpha1"
      schema:
        openAPIV3Schema:
          description: "MultiClusterService is a named abstraction of multi-cluster software service.\nThe name field of MultiClusterService is the same as that of Service name.\nServices with the same name in different clusters are regarded as the same\nservice and are associated with the same MultiClusterService.\nMultiClusterService can control the exposure of services to outside multiple\nclusters, and also enable service discovery between clusters."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            spec:
              description: "Spec is the desired state of the MultiClusterService."
              properties:
                consumerClusters:
                  description: "ConsumerClusters specifies the clusters where the service will be exposed, for clients.\nIf leave it empty, the service will be exposed to all clusters."
                  items:
                    description: "ClusterSelector specifies the cluster to be selected."
                    properties:
                      name:
                        description: "Name is the name of the cluster to be selected."
                        type: "string"
                    type: "object"
                  type: "array"
                ports:
                  description: "Ports is the list of ports that are exposed by this MultiClusterService.\nNo specified port will be filtered out during the service\nexposure and discovery process.\nAll ports in the referencing service will be exposed by default."
                  items:
                    description: "ExposurePort describes which port will be exposed."
                    properties:
                      name:
                        description: "Name is the name of the port that needs to be exposed within the service.\nThe port name must be the same as that defined in the service."
                        type: "string"
                      port:
                        description: "Port specifies the exposed service port."
                        format: "int32"
                        type: "integer"
                    required:
                      - "port"
                    type: "object"
                  type: "array"
                providerClusters:
                  description: "ProviderClusters specifies the clusters which will provide the service backend.\nIf leave it empty, we will collect the backend endpoints from all clusters and sync\nthem to the ConsumerClusters."
                  items:
                    description: "ClusterSelector specifies the cluster to be selected."
                    properties:
                      name:
                        description: "Name is the name of the cluster to be selected."
                        type: "string"
                    type: "object"
                  type: "array"
                range:
                  description: "Range specifies the ranges where the referencing service should\nbe exposed.\nOnly valid and optional in case of Types contains CrossCluster.\nIf not set and Types contains CrossCluster, all clusters will\nbe selected, that means the referencing service will be exposed\nacross all registered clusters.\nDeprecated: in favor of ProviderClusters/ConsumerClusters."
                  properties:
                    clusterNames:
                      description: "ClusterNames is the list of clusters to be selected."
                      items:
                        type: "string"
                      type: "array"
                  type: "object"
                serviceConsumptionClusters:
                  description: "ServiceConsumptionClusters specifies the clusters where the service will be exposed, for clients.\nIf leave it empty, the service will be exposed to all clusters.\nDeprecated: in favor of ProviderClusters/ConsumerClusters."
                  items:
                    type: "string"
                  type: "array"
                serviceProvisionClusters:
                  description: "ServiceProvisionClusters specifies the clusters which will provision the service backend.\nIf leave it empty, we will collect the backend endpoints from all clusters and sync\nthem to the ServiceConsumptionClusters.\nDeprecated: in favor of ProviderClusters/ConsumerClusters."
                  items:
                    type: "string"
                  type: "array"
                types:
                  description: "Types specifies how to expose the service referencing by this\nMultiClusterService."
                  items:
                    description: "ExposureType describes how to expose the service."
                    type: "string"
                  type: "array"
              required:
                - "types"
              type: "object"
            status:
              description: "Status is the current state of the MultiClusterService."
              properties:
                conditions:
                  description: "Current service state"
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."
                        format: "date-time"
                        type: "string"
                      message:
                        description: "message is a human readable message indicating details about the transition.\nThis may be an empty string."
                        maxLength: 32768
                        type: "string"
                      observedGeneration:
                        description: "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance."
                        format: "int64"
                        minimum: 0.0
                        type: "integer"
                      reason:
                        description: "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                        maxLength: 1024
                        minLength: 1
                        pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        type: "string"
                      status:
                        description: "status of the condition, one of True, False, Unknown."
                        enum:
                          - "True"
                          - "False"
                          - "Unknown"
                        type: "string"
                      type:
                        description: "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                        maxLength: 316
                        pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        type: "string"
                    required:
                      - "lastTransitionTime"
                      - "message"
                      - "reason"
                      - "status"
                      - "type"
                    type: "object"
                  type: "array"
                  x-kubernetes-list-map-keys:
                    - "type"
                  x-kubernetes-list-type: "map"
                loadBalancer:
                  description: "LoadBalancer contains the current status of the load-balancer,\nif one is present."
                  properties:
                    ingress:
                      description: "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points."
                      items:
                        description: "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point."
                        properties:
                          hostname:
                            description: "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)"
                            type: "string"
                          ip:
                            description: "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)"
                            type: "string"
                          ipMode:
                            description: "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing."
                            type: "string"
                          ports:
                            description: "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it"
                            items:
                              properties:
                                error:
                                  description: "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                                  maxLength: 316
                                  pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                                  type: "string"
                                port:
                                  description: "Port is the port number of the service port of which status is recorded here"
                                  format: "int32"
                                  type: "integer"
                                protocol:
                                  default: "TCP"
                                  description: "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\""
                                  type: "string"
                              required:
                                - "port"
                                - "protocol"
                              type: "object"
                            type: "array"
                            x-kubernetes-list-type: "atomic"
                        type: "object"
                      type: "array"
                  type: "object"
              type: "object"
          required:
            - "spec"
          type: "object"
      served: true
      storage: true
      subresources:
        status: {}
