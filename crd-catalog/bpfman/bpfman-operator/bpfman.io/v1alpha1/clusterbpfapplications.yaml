apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.15.0"
  name: "clusterbpfapplications.bpfman.io"
spec:
  group: "bpfman.io"
  names:
    kind: "ClusterBpfApplication"
    listKind: "ClusterBpfApplicationList"
    plural: "clusterbpfapplications"
    singular: "clusterbpfapplication"
  scope: "Cluster"
  versions:
    - additionalPrinterColumns:
        - jsonPath: ".spec.nodeselector"
          name: "NodeSelector"
          type: "string"
        - jsonPath: ".status.conditions[0].reason"
          name: "Status"
          type: "string"
        - jsonPath: ".metadata.creationTimestamp"
          name: "Age"
          type: "date"
      name: "v1alpha1"
      schema:
        openAPIV3Schema:
          description: "ClusterBpfApplication is the schema for the cluster scoped BPF Applications\nAPI. This API allows applications to use bpfman to load and attach one or\nmore eBPF programs on a Kubernetes cluster.\n\n\nThe clusterBpfApplication.status field reports the overall status of the\nClusterBpfApplication CRD. A given ClusterBpfApplication CRD can result in\nloading and attaching multiple eBPF programs on multiple nodes, so this\nstatus is just a summary. More granular per-node status details can be\nfound in the corresponding ClusterBpfApplicationState CRD that bpfman\ncreates for each node."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            spec:
              description: "spec defines the desired state of the ClusterBpfApplication. The\nClusterBpfApplication describes the set of one or more cluster scoped eBPF\nprograms that should be loaded for a given application and attributes for\nhow they should be loaded. eBPF programs that are grouped together under the\nsame ClusterBpfApplication instance can share maps and global data between\nthe eBPF programs loaded on the same Kubernetes Node."
              properties:
                byteCode:
                  description: "bytecode is a required field and configures where the eBPF program's\nbytecode should be loaded from. The image must contain one or more\neBPF programs."
                  maxProperties: 1
                  minProperties: 1
                  properties:
                    image:
                      description: "image is an optional field and used to specify details on how to retrieve an\neBPF program packaged in a OCI container image from a given registry."
                      properties:
                        imagePullPolicy:
                          default: "IfNotPresent"
                          description: "pullPolicy is an optional field that describes a policy for if/when to pull\na bytecode image. Defaults to IfNotPresent. Allowed values are:\n  Always, IfNotPresent and Never\n\n\nWhen set to Always, the given image will be pulled even if the image is\nalready present on the node.\n\n\nWhen set to IfNotPresent, the given image will only be pulled if it is not\npresent on the node.\n\n\nWhen set to Never, the given image will never be pulled and must be\nloaded on the node by some other means."
                          enum:
                            - "Always"
                            - "Never"
                            - "IfNotPresent"
                          type: "string"
                        imagePullSecret:
                          description: "imagePullSecret is an optional field and indicates the secret which contains\nthe credentials to access the image repository."
                          properties:
                            name:
                              description: "name is a required field and is the name of the secret which contains the\ncredentials to access the image repository."
                              type: "string"
                            namespace:
                              description: "namespace is a required field and is the namespace of the secret which\ncontains the credentials to access the image repository."
                              type: "string"
                          required:
                            - "name"
                            - "namespace"
                          type: "object"
                        url:
                          description: "url is a required field and is a valid container image URL used to reference\na remote bytecode image. url must not be an empty string, must not exceed\n525 characters in length and must be a valid URL."
                          maxLength: 525
                          pattern: "[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}"
                          type: "string"
                      required:
                        - "url"
                      type: "object"
                    path:
                      description: "path is an optional field and used to specify a bytecode object file via\nfilepath on a Kubernetes node."
                      pattern: "^(/[^/\\0]+)+/?$"
                      type: "string"
                  type: "object"
                globalData:
                  additionalProperties:
                    format: "byte"
                    type: "string"
                  description: "globalData is an optional field that allows the user to set global variables\nwhen the program is loaded. This allows the same compiled bytecode to be\ndeployed by different BPF Applications to behave differently based on\nglobalData configuration values.  It uses an array of raw bytes. This is a\nvery low level primitive. The caller is responsible for formatting the byte\nstring appropriately considering such things as size, endianness, alignment\nand packing of data structures."
                  type: "object"
                mapOwnerSelector:
                  description: "mapOwnerSelector is an optional field used to share maps across\napplications. eBPF programs loaded with the same ClusterBpfApplication or\nBpfApplication instance do not need to use this field. This label selector\nallows maps from a different ClusterBpfApplication or BpfApplication\ninstance to be used by this instance.\nTODO: mapOwnerSelector is currently not supported due to recent code rework."
                  properties:
                    matchExpressions:
                      description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                      items:
                        description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                        properties:
                          key:
                            description: "key is the label key that the selector applies to."
                            type: "string"
                          operator:
                            description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                            type: "string"
                          values:
                            description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                            items:
                              type: "string"
                            type: "array"
                            x-kubernetes-list-type: "atomic"
                        required:
                          - "key"
                          - "operator"
                        type: "object"
                      type: "array"
                      x-kubernetes-list-type: "atomic"
                    matchLabels:
                      additionalProperties:
                        type: "string"
                      description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                      type: "object"
                  type: "object"
                  x-kubernetes-map-type: "atomic"
                nodeSelector:
                  description: "nodeSelector is a required field and allows the user to specify which\nKubernetes nodes to deploy the eBPF programs. To select all nodes use\nstandard metav1.LabelSelector semantics and make it empty."
                  properties:
                    matchExpressions:
                      description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                      items:
                        description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                        properties:
                          key:
                            description: "key is the label key that the selector applies to."
                            type: "string"
                          operator:
                            description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                            type: "string"
                          values:
                            description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                            items:
                              type: "string"
                            type: "array"
                            x-kubernetes-list-type: "atomic"
                        required:
                          - "key"
                          - "operator"
                        type: "object"
                      type: "array"
                      x-kubernetes-list-type: "atomic"
                    matchLabels:
                      additionalProperties:
                        type: "string"
                      description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                      type: "object"
                  type: "object"
                  x-kubernetes-map-type: "atomic"
                programs:
                  description: "programs is a required field and is the list of eBPF programs in a BPF\nApplication CRD that should be loaded in kernel memory. At least one entry\nis required. eBPF programs in this list will be loaded on the system based\nthe nodeSelector. Even if an eBPF program is loaded in kernel memory, it\ncannot be triggered until an attachment point is provided. The different\nprogram types have different ways of attaching. The attachment points can be\nadded at creation time or modified (added or removed) at a later time to\nactivate or deactivate the eBPF program as desired.\nCAUTION: When programs are added or removed from the list, that requires all\nprograms in the list to be reloaded, which could be temporarily service\neffecting. For this reason, modifying the list is currently not allowed."
                  items:
                    properties:
                      fentry:
                        description: "fentry is an optional field, but required when the type field is set to\nFEntry. fentry defines the desired state of the application's FEntry\nprograms. FEntry programs are attached to the entry of a Linux kernel\nfunction or to another eBPF program function. They are attached to the first\ninstruction, before control passes to the function. FEntry programs are\nsimilar to KProbe programs, but have higher performance."
                        properties:
                          function:
                            description: "function is a required field and specifies the name of the Linux kernel\nfunction to attach the FEntry program. function must not be an empty string,\nmust not exceed 64 characters in length, must start with alpha characters\nand must only contain alphanumeric characters."
                            maxLength: 64
                            minLength: 1
                            pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                            type: "string"
                          links:
                            description: "links is an optional field and is a flag to indicate if the FEntry program\nshould be attached. The attachment point for a FEntry program is a Linux\nkernel function. Unlike other eBPF program types, an FEntry program must be\nprovided with the target function at load time. The links field is optional,\nbut unlike other program types where it represents a list of attachment\npoints, for FEntry programs it contains at most one entry that determines\nwhether the program should be attached to the specified function. To attach\nthe program, add an entry to links with mode set to Attach. To detach it,\nremove the entry from links."
                            items:
                              properties:
                                mode:
                                  description: "mode is a required field. When set to Attach, the FEntry program will\nattempt to be attached. To detach the FEntry program, remove the link entry."
                                  enum:
                                    - "Attach"
                                  type: "string"
                              required:
                                - "mode"
                              type: "object"
                            maxItems: 1
                            type: "array"
                        required:
                          - "function"
                        type: "object"
                      fexit:
                        description: "fexit is an optional field, but required when the type field is set to\nFExit. fexit defines the desired state of the application's FExit programs.\nFExit programs are attached to the exit of a Linux kernel function or to\nanother eBPF program function. The program is invoked when the function\nreturns, independent of where in the function that occurs. FExit programs\nare similar to KRetProbe programs, but get invoked with the input arguments\nand the return values. They also have higher performance over KRetProbe\nprograms."
                        properties:
                          function:
                            description: "function is a required field and specifies the name of the Linux kernel\nfunction to attach the FExit program. function must not be an empty string,\nmust not exceed 64 characters in length, must start with alpha characters\nand must only contain alphanumeric characters."
                            maxLength: 64
                            minLength: 1
                            pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                            type: "string"
                          links:
                            description: "links is an optional field and is a flag to indicate if the FExit program\nshould be attached. The attachment point for a FExit program is a Linux\nkernel function. Unlike other eBPF program types, an FExit program must be\nprovided with the target function at load time. The links field is optional,\nbut unlike other program types where it represents a list of attachment\npoints, for FExit programs it contains at most one entry that determines\nwhether the program should be attached to the specified function. To attach\nthe program, add an entry to links with mode set to Attach. To detach it,\nremove the entry from links."
                            items:
                              properties:
                                mode:
                                  description: "mode is a required field. When set to Attach, the FExit program will\nattempt to be attached. To detach the FExit program, remove the link entry."
                                  enum:
                                    - "Attach"
                                  type: "string"
                              required:
                                - "mode"
                              type: "object"
                            maxItems: 1
                            type: "array"
                        required:
                          - "function"
                        type: "object"
                      kprobe:
                        description: "kprobe is an optional field, but required when the type field is set to\nKProbe. kprobe defines the desired state of the application's Kprobe\nprograms. KProbe programs are attached to a Linux kernel function. Unlike\nFEntry programs, which must always be attached at the entry point of a Linux\nkernel function, KProbe programs can be attached at any point in the\nfunction using the optional offset field. However, caution must be taken\nwhen using the offset, ensuring the offset is still in the function\nbytecode. FEntry programs have less overhead than KProbe programs."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nKProbe program should be attached. The eBPF program is loaded in kernel\nmemory when the BPF Application CRD is created and the selected Kubernetes\nnodes are active. The eBPF program will not be triggered until the program\nhas also been attached to an attachment point described in this list. Items\nmay be added or removed from the list at any point, causing the eBPF program\nto be attached or detached.\n\n\nThe attachment point for a KProbe program is a Linux kernel function. By\ndefault, the eBPF program is triggered at the entry of the attachment point,\nbut the attachment point can be adjusted using an optional offset."
                            items:
                              properties:
                                function:
                                  description: "function is a required field and specifies the name of the Linux kernel\nfunction to attach the KProbe program. function must not be an empty string,\nmust not exceed 64 characters in length, must start with alpha characters\nand must only contain alphanumeric characters."
                                  maxLength: 64
                                  minLength: 1
                                  pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                                  type: "string"
                                offset:
                                  default: 0
                                  description: "offset is an optional field and the value is added to the address of the\nattachment point function. If not provided, offset defaults to 0."
                                  format: "int64"
                                  type: "integer"
                              required:
                                - "function"
                              type: "object"
                            type: "array"
                        type: "object"
                      kretprobe:
                        description: "kretprobe is an optional field, but required when the type field is set to\nKRetProbe. kretprobe defines the desired state of the application's\nKRetProbe programs. KRetProbe programs are attached to the exit of a Linux\nkernel function. FExit programs have less overhead than KRetProbe programs\nand FExit programs have access to both the input arguments as well as the\nreturn values. KRetProbes only have access to the return values."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nKRetProbe program should be attached. The eBPF program is loaded in kernel\nmemory when the BPF Application CRD is created and the selected Kubernetes\nnodes are active. The eBPF program will not be triggered until the program\nhas also been attached to an attachment point described in this list. Items\nmay be added or removed from the list at any point, causing the eBPF program\nto be attached or detached.\n\n\nThe attachment point for a KRetProbe program is a Linux kernel function."
                            items:
                              properties:
                                function:
                                  description: "function is a required field and specifies the name of the Linux kernel\nfunction to attach the KRetProbe program. function must not be an empty\nstring, must not exceed 64 characters in length, must start with alpha\ncharacters and must only contain alphanumeric characters."
                                  maxLength: 64
                                  minLength: 1
                                  pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                                  type: "string"
                              required:
                                - "function"
                              type: "object"
                            type: "array"
                        type: "object"
                      name:
                        description: "name is a required field and is the name of the function that is the entry\npoint for the eBPF program. name must not be an empty string, must not\nexceed 64 characters in length, must start with alpha characters and must\nonly contain alphanumeric characters."
                        maxLength: 64
                        minLength: 1
                        pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                        type: "string"
                      tc:
                        description: "tc is an optional field, but required when the type field is set to TC. tc\ndefines the desired state of the application's TC programs. TC programs are\nattached to network devices (interfaces). The program can be attached on\neither packet ingress or egress, so the program will be called on every\nincoming or outgoing packet seen by the network device. The TC attachment\npoint is in Linux's Traffic Control (tc) subsystem, which is after the\nLinux kernel has allocated an sk_buff. TCX is newer implementation of TC\nwith enhanced performance and better support for running multiple programs\non a given network device. This makes TC useful for packet classification\nactions."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nTC program should be attached. The TC program is loaded in kernel memory\nwhen the BPF Application CRD is created and the selected Kubernetes nodes\nare active. The TC program will not be triggered until the program has also\nbeen attached to an attachment point described in this list. Items may be\nadded or removed from the list at any point, causing the TC program to be\nattached or detached.\n\n\nThe attachment point for a TC program is a network interface (or device).\nThe interface can be specified by name, by allowing bpfman to discover each\ninterface, or by setting the primaryNodeInterface flag, which instructs\nbpfman to use the primary interface of a Kubernetes node. Optionally, the\nTC program can also be installed into a set of network namespaces."
                            items:
                              properties:
                                direction:
                                  description: "direction is a required field and specifies the direction of traffic.\nAllowed values are:\n   Ingress, Egress\n\n\nWhen set to Ingress, the TC program is triggered when packets are received\nby the interface.\n\n\nWhen set to Egress, the TC program is triggered when packets are to be\ntransmitted by the interface."
                                  enum:
                                    - "Ingress"
                                    - "Egress"
                                  type: "string"
                                interfaceSelector:
                                  description: "interfaceSelector is a required field and is used to determine the network\ninterface (or interfaces) the TC program is attached. Interface list is set\nby providing a list of interface names, enabling auto discovery, or setting\nthe primaryNodeInterface flag, but only one option is allowed."
                                  maxProperties: 1
                                  minProperties: 1
                                  properties:
                                    interfaces:
                                      description: "interfaces is an optional field and is a list of network interface names to\nattach the eBPF program. The interface names in the list are case-sensitive."
                                      items:
                                        type: "string"
                                      type: "array"
                                    interfacesDiscoveryConfig:
                                      description: "interfacesDiscoveryConfig is an optional field that is used to control if\nand how to automatically discover interfaces. If the agent should\nautomatically discover and attach eBPF programs to interfaces, use the\nfields under interfacesDiscoveryConfig to control what is allow and excluded\nfrom discovery."
                                      properties:
                                        allowedInterfaces:
                                          description: "allowedInterfaces is an optional field that contains a list of interface\nnames that are allowed to be discovered. If empty, the agent will fetch all\nthe interfaces in the system, excepting the ones listed in\nexcludeInterfaces. if non-empty, only entries in the list will be considered\nfor discovery. If an entry enclosed by slashes, such as `/br-/` or\n`/veth*/`, then the entry is considered as a regular expression for\nmatching. Otherwise, the interface names in the list are case-sensitive.\nThis field is only taken into consideration if interfaceAutoDiscovery is set\nto true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        excludeInterfaces:
                                          default:
                                            - "lo"
                                          description: "excludeInterfaces is an optional field that contains a list of interface\nnames that are excluded from interface discovery. The interface names in\nthe list are case-sensitive. By default, the list contains the loopback\ninterface, \"lo\". This field is only taken into consideration if\ninterfaceAutoDiscovery is set to true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        interfaceAutoDiscovery:
                                          default: false
                                          description: "interfaceAutoDiscovery is an optional field. When enabled, the agent\nmonitors the creation and deletion of interfaces and automatically\nattached eBPF programs to the newly discovered interfaces.\nCAUTION: This has the potential to attach a given eBPF program to a large\nnumber of interfaces. Use with caution."
                                          type: "boolean"
                                      type: "object"
                                    primaryNodeInterface:
                                      description: "primaryNodeInterface is and optional field and indicates to attach the eBPF\nprogram to the primary interface on the Kubernetes node. Only 'true' is\naccepted."
                                      type: "boolean"
                                  type: "object"
                                networkNamespaces:
                                  description: "networkNamespaces is an optional field that identifies the set of network\nnamespaces in which to attach the eBPF program. If networkNamespaces is not\nspecified, the eBPF program will be attached in the root network namespace."
                                  properties:
                                    namespace:
                                      description: "namespace is an optional field and indicates the target network namespace.\nIf not provided, the default network namespace is used."
                                      type: "string"
                                    pods:
                                      description: "pods is a required field and indicates the target pods. To select all pods\nuse the standard metav1.LabelSelector semantics and make it empty."
                                      properties:
                                        matchExpressions:
                                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                          items:
                                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                                            properties:
                                              key:
                                                description: "key is the label key that the selector applies to."
                                                type: "string"
                                              operator:
                                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                                type: "string"
                                              values:
                                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                                items:
                                                  type: "string"
                                                type: "array"
                                                x-kubernetes-list-type: "atomic"
                                            required:
                                              - "key"
                                              - "operator"
                                            type: "object"
                                          type: "array"
                                          x-kubernetes-list-type: "atomic"
                                        matchLabels:
                                          additionalProperties:
                                            type: "string"
                                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                          type: "object"
                                      type: "object"
                                      x-kubernetes-map-type: "atomic"
                                  required:
                                    - "pods"
                                  type: "object"
                                priority:
                                  default: 1000
                                  description: "priority is an optional field and determines the execution order of the TC\nprogram relative to other TC programs attached to the same attachment point.\nIt must be a value between 0 and 1000, where lower values indicate higher\nprecedence. For TC programs on the same attachment point with the same\ndirection and priority, the most recently attached program has a lower\nprecedence. If not provided, priority will default to 1000."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                                proceedOn:
                                  default:
                                    - "Pipe"
                                    - "DispatcherReturn"
                                  description: "proceedOn is an optional field and allows the user to call other TC programs\nin a chain, or not call the next program in a chain based on the exit code\nof a TC program. Allowed values, which are the possible exit codes from a TC\neBPF program, are:\n  UnSpec, OK, ReClassify, Shot, Pipe, Stolen, Queued, Repeat, ReDirect,\n  Trap, DispatcherReturn\n\n\nMultiple values are supported. Default is OK, Pipe and DispatcherReturn. So\nusing the default values, if a TC program returns Pipe, the next TC\nprogram in the chain will be called. If a TC program returns Stolen, the\nnext TC program in the chain will NOT be called."
                                  items:
                                    enum:
                                      - "UnSpec"
                                      - "OK"
                                      - "ReClassify"
                                      - "Shot"
                                      - "Pipe"
                                      - "Stolen"
                                      - "Queued"
                                      - "Repeat"
                                      - "ReDirect"
                                      - "Trap"
                                      - "DispatcherReturn"
                                    type: "string"
                                  type: "array"
                              required:
                                - "direction"
                                - "interfaceSelector"
                              type: "object"
                            type: "array"
                        type: "object"
                      tcx:
                        description: "tcx is an optional field, but required when the type field is set to TCX.\ntcx defines the desired state of the application's TCX programs. TCX\nprograms are attached to network devices (interfaces). The program can be\nattached on either packet ingress or egress, so the program will be called\non every incoming or outgoing packet seen by the network device. The TCX\nattachment point is in Linux's Traffic Control (tc) subsystem, which is\nafter the Linux kernel has allocated an sk_buff. This makes TCX useful for\npacket classification actions. TCX is a newer implementation of TC with\nenhanced performance and better support for running multiple programs on a\ngiven network device."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nTCX program should be attached. The TCX program is loaded in kernel memory\nwhen the BPF Application CRD is created and the selected Kubernetes nodes\nare active. The TCX program will not be triggered until the program has also\nbeen attached to an attachment point described in this list. Items may be\nadded or removed from the list at any point, causing the TCX program to be\nattached or detached.\n\n\nThe attachment point for a TCX program is a network interface (or device).\nThe interface can be specified by name, by allowing bpfman to discover each\ninterface, or by setting the primaryNodeInterface flag, which instructs\nbpfman to use the primary interface of a Kubernetes node. Optionally, the\nTCX program can also be installed into a set of network namespaces."
                            items:
                              properties:
                                direction:
                                  description: "direction is a required field and specifies the direction of traffic.\nAllowed values are:\n   Ingress, Egress\n\n\nWhen set to Ingress, the TC program is triggered when packets are received\nby the interface.\n\n\nWhen set to Egress, the TC program is triggered when packets are to be\ntransmitted by the interface."
                                  enum:
                                    - "Ingress"
                                    - "Egress"
                                  type: "string"
                                interfaceSelector:
                                  description: "interfaceSelector is a required field and is used to determine the network\ninterface (or interfaces) the TCX program is attached. Interface list is set\nby providing a list of interface names, enabling auto discovery, or setting\nthe primaryNodeInterface flag, but only one option is allowed."
                                  maxProperties: 1
                                  minProperties: 1
                                  properties:
                                    interfaces:
                                      description: "interfaces is an optional field and is a list of network interface names to\nattach the eBPF program. The interface names in the list are case-sensitive."
                                      items:
                                        type: "string"
                                      type: "array"
                                    interfacesDiscoveryConfig:
                                      description: "interfacesDiscoveryConfig is an optional field that is used to control if\nand how to automatically discover interfaces. If the agent should\nautomatically discover and attach eBPF programs to interfaces, use the\nfields under interfacesDiscoveryConfig to control what is allow and excluded\nfrom discovery."
                                      properties:
                                        allowedInterfaces:
                                          description: "allowedInterfaces is an optional field that contains a list of interface\nnames that are allowed to be discovered. If empty, the agent will fetch all\nthe interfaces in the system, excepting the ones listed in\nexcludeInterfaces. if non-empty, only entries in the list will be considered\nfor discovery. If an entry enclosed by slashes, such as `/br-/` or\n`/veth*/`, then the entry is considered as a regular expression for\nmatching. Otherwise, the interface names in the list are case-sensitive.\nThis field is only taken into consideration if interfaceAutoDiscovery is set\nto true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        excludeInterfaces:
                                          default:
                                            - "lo"
                                          description: "excludeInterfaces is an optional field that contains a list of interface\nnames that are excluded from interface discovery. The interface names in\nthe list are case-sensitive. By default, the list contains the loopback\ninterface, \"lo\". This field is only taken into consideration if\ninterfaceAutoDiscovery is set to true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        interfaceAutoDiscovery:
                                          default: false
                                          description: "interfaceAutoDiscovery is an optional field. When enabled, the agent\nmonitors the creation and deletion of interfaces and automatically\nattached eBPF programs to the newly discovered interfaces.\nCAUTION: This has the potential to attach a given eBPF program to a large\nnumber of interfaces. Use with caution."
                                          type: "boolean"
                                      type: "object"
                                    primaryNodeInterface:
                                      description: "primaryNodeInterface is and optional field and indicates to attach the eBPF\nprogram to the primary interface on the Kubernetes node. Only 'true' is\naccepted."
                                      type: "boolean"
                                  type: "object"
                                networkNamespaces:
                                  description: "networkNamespaces is an optional field that identifies the set of network\nnamespaces in which to attach the eBPF program. If networkNamespaces is not\nspecified, the eBPF program will be attached in the root network namespace."
                                  properties:
                                    namespace:
                                      description: "namespace is an optional field and indicates the target network namespace.\nIf not provided, the default network namespace is used."
                                      type: "string"
                                    pods:
                                      description: "pods is a required field and indicates the target pods. To select all pods\nuse the standard metav1.LabelSelector semantics and make it empty."
                                      properties:
                                        matchExpressions:
                                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                          items:
                                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                                            properties:
                                              key:
                                                description: "key is the label key that the selector applies to."
                                                type: "string"
                                              operator:
                                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                                type: "string"
                                              values:
                                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                                items:
                                                  type: "string"
                                                type: "array"
                                                x-kubernetes-list-type: "atomic"
                                            required:
                                              - "key"
                                              - "operator"
                                            type: "object"
                                          type: "array"
                                          x-kubernetes-list-type: "atomic"
                                        matchLabels:
                                          additionalProperties:
                                            type: "string"
                                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                          type: "object"
                                      type: "object"
                                      x-kubernetes-map-type: "atomic"
                                  required:
                                    - "pods"
                                  type: "object"
                                priority:
                                  default: 1000
                                  description: "priority is an optional field and determines the execution order of the TCX\nprogram relative to other TCX programs attached to the same attachment\npoint. It must be a value between 0 and 1000, where lower values indicate\nhigher precedence. For TCX programs on the same attachment point with the\nsame direction and priority, the most recently attached program has a lower\nprecedence. If not provided, priority will default to 1000."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                              required:
                                - "direction"
                                - "interfaceSelector"
                              type: "object"
                            type: "array"
                        type: "object"
                      tracepoint:
                        description: "tracepoint is an optional field, but required when the type field is set to\nTracepoint. tracepoint defines the desired state of the application's\nTracepoint programs. Whereas KProbes attach to dynamically to any Linux\nkernel function, Tracepoint programs are programs that can only be attached\nat predefined locations in the Linux kernel. Use the following command to\nsee the available attachment points:\n `sudo find /sys/kernel/debug/tracing/events -type d`\nWhile KProbes are more flexible in where in the kernel the probe can be\nattached, the functions and data structure rely on the kernel your system is\nrunning. Tracepoints tend to be more stable across kernel versions and are\nbetter for portability."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nTracepoint program should be attached. The Tracepoint program is loaded in\nkernel memory when the BPF Application CRD is created and the selected\nKubernetes nodes are active. The Tracepoint program will not be triggered\nuntil the program has also been attached to an attachment point described in\nthis list. Items may be added or removed from the list at any point, causing\nthe Tracepoint program to be attached or detached.\n\n\nThe attachment point for a Tracepoint program is a one of a predefined set\nof Linux kernel functions."
                            items:
                              properties:
                                name:
                                  description: "name is a required field and specifies the name of the Linux kernel\nTracepoint to attach the eBPF program. name must not be an empty string,\nmust not exceed 64 characters in length, must start with alpha characters\nand must only contain alphanumeric characters."
                                  maxLength: 64
                                  minLength: 1
                                  pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                                  type: "string"
                              required:
                                - "name"
                              type: "object"
                            type: "array"
                        type: "object"
                      type:
                        description: "type is a required field used to specify the type of the eBPF program.\n\n\nAllowed values are:\n  FEntry, FExit, KProbe, KRetProbe, TC, TCX, TracePoint, UProbe, URetProbe,\n  XDP\n\n\nWhen set to FEntry, the program is attached to the entry of a Linux kernel\nfunction or to another eBPF program function. When using the FEntry program\ntype, the fentry field is required. See fentry for more details on FEntry\nprograms.\n\n\nWhen set to FExit, the program is attached to the exit of a Linux kernel\nfunction or to another eBPF program function. When using the FExit program\ntype, the fexit field is required. See fexit for more details on FExit\nprograms.\n\n\nWhen set to KProbe, the program is attached to entry of a Linux kernel\nfunction. When using the KProbe program type, the kprobe field is required.\nSee kprobe for more details on KProbe programs.\n\n\nWhen set to KRetProbe, the program is attached to exit of a Linux kernel\nfunction. When using the KRetProbe program type, the kretprobe field is\nrequired. See kretprobe for more details on KRetProbe programs.\n\n\nWhen set to TC, the eBPF program can attach to network devices (interfaces).\nThe program can be attached on either packet ingress or egress, so the\nprogram will be called on every incoming or outgoing packet seen by the\nnetwork device. When using the TC program type, the tc field is required.\nSee tc for more details on TC programs.\n\n\nWhen set to TCX, the eBPF program can attach to network devices\n(interfaces). The program can be attached on either packet ingress or\negress, so the program will be called on every incoming or outgoing packet\nseen by the network device. When using the TCX program type, the tcx field\nis required. See tcx for more details on TCX programs.\n\n\nWhen set to Tracepoint, the program can attach to one of the predefined set\nof Linux kernel functions. When using the Tracepoint program type, the\ntracepoint field is required. See tracepoint for more details on Tracepoint\nprograms.\n\n\nWhen set to UProbe, the program can attach in user-space. The UProbe is\nattached to a binary, library or function name, and optionally an offset in\nthe code. When using the UProbe program type, the uprobe field is required.\nSee uprobe for more details on UProbe programs.\n\n\nWhen set to URetProbe, the program can attach in user-space.\nThe URetProbe is attached to the return of a binary, library or function\nname, and optionally an offset in the code.  When using the URetProbe\nprogram type, the uretprobe field is required. See uretprobe for more\ndetails on URetProbe programs.\n\n\nWhen set to XDP, the eBPF program can attach to network devices (interfaces)\nand will be called on every incoming packet received by the network device.\nWhen using the XDP program type, the xdp field is required. See xdp for more\ndetails on XDP programs."
                        enum:
                          - "XDP"
                          - "TC"
                          - "TCX"
                          - "FEntry"
                          - "FExit"
                          - "KProbe"
                          - "KRetProbe"
                          - "UProbe"
                          - "URetProbe"
                          - "TracePoint"
                        type: "string"
                      uprobe:
                        description: "uprobe is an optional field, but required when the type field is set to\nUProbe. uprobe defines the desired state of the application's UProbe\nprograms. UProbe programs are user-space probes. A target must be provided,\nwhich is the library name or absolute path to a binary or library where the\nprobe is attached. Optionally, a function name can also be provided to\nprovide finer granularity on where the probe is attached. They can be\nattached at any point in the binary, library or function using the optional\noffset field. However, caution must be taken when using the offset, ensuring\nthe offset is still in the desired bytecode."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nUProbe or URetProbe program should be attached. The eBPF program is loaded\nin kernel memory when the BPF Application CRD is created and the selected\nKubernetes nodes are active. The eBPF program will not be triggered until\nthe program has also been attached to an attachment point described in this\nlist. Items may be added or removed from the list at any point, causing the\neBPF program to be attached or detached.\n\n\nThe attachment point for a UProbe and URetProbe program is a user-space\nbinary or function. By default, the eBPF program is triggered at the entry\nof the attachment point, but the attachment point can be adjusted using an\noptional function name and/or offset. Optionally, the eBPF program can be\ninstalled in a set of containers or limited to a specified PID."
                            items:
                              properties:
                                containers:
                                  description: "containers is an optional field that identifies the set of containers in\nwhich to attach the UProbe or URetProbe program. If containers is not\nspecified, the eBPF program will be attached in the bpfman container."
                                  properties:
                                    containerNames:
                                      description: "containerNames is an optional field and is a list of container names in a\npod to attach the eBPF program. If no names are specified, all containers\nin the pod are selected."
                                      items:
                                        type: "string"
                                      type: "array"
                                    namespace:
                                      description: "namespace is an optional field and indicates the target Kubernetes\nnamespace. If not provided, all Kubernetes namespaces are included."
                                      type: "string"
                                    pods:
                                      description: "pods is a required field and indicates the target pods. To select all pods\nuse the standard metav1.LabelSelector semantics and make it empty."
                                      properties:
                                        matchExpressions:
                                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                          items:
                                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                                            properties:
                                              key:
                                                description: "key is the label key that the selector applies to."
                                                type: "string"
                                              operator:
                                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                                type: "string"
                                              values:
                                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                                items:
                                                  type: "string"
                                                type: "array"
                                                x-kubernetes-list-type: "atomic"
                                            required:
                                              - "key"
                                              - "operator"
                                            type: "object"
                                          type: "array"
                                          x-kubernetes-list-type: "atomic"
                                        matchLabels:
                                          additionalProperties:
                                            type: "string"
                                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                          type: "object"
                                      type: "object"
                                      x-kubernetes-map-type: "atomic"
                                  required:
                                    - "pods"
                                  type: "object"
                                function:
                                  description: "function is an optional field and specifies the name of a user-space function\nto attach the UProbe or URetProbe program. If not provided, the eBPF program\nwill be triggered on the entry of the target. function must not be an empty\nstring, must not exceed 64 characters in length, must start with alpha\ncharacters and must only contain alphanumeric characters."
                                  maxLength: 64
                                  minLength: 1
                                  pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                                  type: "string"
                                offset:
                                  default: 0
                                  description: "offset is an optional field and the value is added to the address of the\nattachment point function."
                                  format: "int64"
                                  type: "integer"
                                pid:
                                  description: "pid is an optional field and if provided, limits the execution of the UProbe\nor URetProbe to the provided process identification number (PID). If pid is\nnot provided, the UProbe or URetProbe executes for all PIDs."
                                  format: "int32"
                                  type: "integer"
                                target:
                                  description: "target is a required field and is the user-space library name or the\nabsolute path to a binary or library."
                                  type: "string"
                              required:
                                - "target"
                              type: "object"
                            type: "array"
                        type: "object"
                      uretprobe:
                        description: "uretprobe is an optional field, but required when the type field is set to\nURetProbe. uretprobe defines the desired state of the application's\nURetProbe programs. URetProbe programs are user-space probes. A target must\nbe provided, which is the library name or absolute path to a binary or\nlibrary where the probe is attached. Optionally, a function name can also be\nprovided to provide finer granularity on where the probe is attached. They\nare attached to the return point of the binary, library or function, but can\nbe set anywhere using the optional offset field. However, caution must be\ntaken when using the offset, ensuring the offset is still in the desired\nbytecode."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nUProbe or URetProbe program should be attached. The eBPF program is loaded\nin kernel memory when the BPF Application CRD is created and the selected\nKubernetes nodes are active. The eBPF program will not be triggered until\nthe program has also been attached to an attachment point described in this\nlist. Items may be added or removed from the list at any point, causing the\neBPF program to be attached or detached.\n\n\nThe attachment point for a UProbe and URetProbe program is a user-space\nbinary or function. By default, the eBPF program is triggered at the entry\nof the attachment point, but the attachment point can be adjusted using an\noptional function name and/or offset. Optionally, the eBPF program can be\ninstalled in a set of containers or limited to a specified PID."
                            items:
                              properties:
                                containers:
                                  description: "containers is an optional field that identifies the set of containers in\nwhich to attach the UProbe or URetProbe program. If containers is not\nspecified, the eBPF program will be attached in the bpfman container."
                                  properties:
                                    containerNames:
                                      description: "containerNames is an optional field and is a list of container names in a\npod to attach the eBPF program. If no names are specified, all containers\nin the pod are selected."
                                      items:
                                        type: "string"
                                      type: "array"
                                    namespace:
                                      description: "namespace is an optional field and indicates the target Kubernetes\nnamespace. If not provided, all Kubernetes namespaces are included."
                                      type: "string"
                                    pods:
                                      description: "pods is a required field and indicates the target pods. To select all pods\nuse the standard metav1.LabelSelector semantics and make it empty."
                                      properties:
                                        matchExpressions:
                                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                          items:
                                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                                            properties:
                                              key:
                                                description: "key is the label key that the selector applies to."
                                                type: "string"
                                              operator:
                                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                                type: "string"
                                              values:
                                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                                items:
                                                  type: "string"
                                                type: "array"
                                                x-kubernetes-list-type: "atomic"
                                            required:
                                              - "key"
                                              - "operator"
                                            type: "object"
                                          type: "array"
                                          x-kubernetes-list-type: "atomic"
                                        matchLabels:
                                          additionalProperties:
                                            type: "string"
                                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                          type: "object"
                                      type: "object"
                                      x-kubernetes-map-type: "atomic"
                                  required:
                                    - "pods"
                                  type: "object"
                                function:
                                  description: "function is an optional field and specifies the name of a user-space function\nto attach the UProbe or URetProbe program. If not provided, the eBPF program\nwill be triggered on the entry of the target. function must not be an empty\nstring, must not exceed 64 characters in length, must start with alpha\ncharacters and must only contain alphanumeric characters."
                                  maxLength: 64
                                  minLength: 1
                                  pattern: "^[a-zA-Z][a-zA-Z0-9_]+."
                                  type: "string"
                                offset:
                                  default: 0
                                  description: "offset is an optional field and the value is added to the address of the\nattachment point function."
                                  format: "int64"
                                  type: "integer"
                                pid:
                                  description: "pid is an optional field and if provided, limits the execution of the UProbe\nor URetProbe to the provided process identification number (PID). If pid is\nnot provided, the UProbe or URetProbe executes for all PIDs."
                                  format: "int32"
                                  type: "integer"
                                target:
                                  description: "target is a required field and is the user-space library name or the\nabsolute path to a binary or library."
                                  type: "string"
                              required:
                                - "target"
                              type: "object"
                            type: "array"
                        type: "object"
                      xdp:
                        description: "xdp is an optional field, but required when the type field is set to XDP.\nxdp defines the desired state of the application's XDP programs. XDP program\ncan be attached to network devices (interfaces) and will be called on every\nincoming packet received by the network device. The XDP attachment point is\njust after the packet has been received off the wire, but before the Linux\nkernel has allocated an sk_buff, which is used to pass the packet through\nthe kernel networking stack."
                        properties:
                          links:
                            description: "links is an optional field and is the list of attachment points to which the\nXDP program should be attached. The XDP program is loaded in kernel memory\nwhen the BPF Application CRD is created and the selected Kubernetes nodes\nare active. The XDP program will not be triggered until the program has also\nbeen attached to an attachment point described in this list. Items may be\nadded or removed from the list at any point, causing the XDP program to be\nattached or detached.\n\n\nThe attachment point for an XDP program is a network interface (or device).\nThe interface can be specified by name, by allowing bpfman to discover each\ninterface, or by setting the primaryNodeInterface flag, which instructs\nbpfman to use the primary interface of a Kubernetes node. Optionally, the\nXDP program can also be installed into a set of network namespaces."
                            items:
                              properties:
                                interfaceSelector:
                                  description: "interfaceSelector is a required field and is used to determine the network\ninterface (or interfaces) the XDP program is attached. Interface list is set\nby providing a list of interface names, enabling auto discovery, or setting\nthe primaryNodeInterface flag, but only one option is allowed."
                                  maxProperties: 1
                                  minProperties: 1
                                  properties:
                                    interfaces:
                                      description: "interfaces is an optional field and is a list of network interface names to\nattach the eBPF program. The interface names in the list are case-sensitive."
                                      items:
                                        type: "string"
                                      type: "array"
                                    interfacesDiscoveryConfig:
                                      description: "interfacesDiscoveryConfig is an optional field that is used to control if\nand how to automatically discover interfaces. If the agent should\nautomatically discover and attach eBPF programs to interfaces, use the\nfields under interfacesDiscoveryConfig to control what is allow and excluded\nfrom discovery."
                                      properties:
                                        allowedInterfaces:
                                          description: "allowedInterfaces is an optional field that contains a list of interface\nnames that are allowed to be discovered. If empty, the agent will fetch all\nthe interfaces in the system, excepting the ones listed in\nexcludeInterfaces. if non-empty, only entries in the list will be considered\nfor discovery. If an entry enclosed by slashes, such as `/br-/` or\n`/veth*/`, then the entry is considered as a regular expression for\nmatching. Otherwise, the interface names in the list are case-sensitive.\nThis field is only taken into consideration if interfaceAutoDiscovery is set\nto true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        excludeInterfaces:
                                          default:
                                            - "lo"
                                          description: "excludeInterfaces is an optional field that contains a list of interface\nnames that are excluded from interface discovery. The interface names in\nthe list are case-sensitive. By default, the list contains the loopback\ninterface, \"lo\". This field is only taken into consideration if\ninterfaceAutoDiscovery is set to true."
                                          items:
                                            type: "string"
                                          type: "array"
                                        interfaceAutoDiscovery:
                                          default: false
                                          description: "interfaceAutoDiscovery is an optional field. When enabled, the agent\nmonitors the creation and deletion of interfaces and automatically\nattached eBPF programs to the newly discovered interfaces.\nCAUTION: This has the potential to attach a given eBPF program to a large\nnumber of interfaces. Use with caution."
                                          type: "boolean"
                                      type: "object"
                                    primaryNodeInterface:
                                      description: "primaryNodeInterface is and optional field and indicates to attach the eBPF\nprogram to the primary interface on the Kubernetes node. Only 'true' is\naccepted."
                                      type: "boolean"
                                  type: "object"
                                networkNamespaces:
                                  description: "networkNamespaces identifies the set of network namespaces in which to\nattach the eBPF program. If networkNamespaces is not specified, the eBPF\nprogram will be attached in the root network namespace."
                                  properties:
                                    namespace:
                                      description: "namespace is an optional field and indicates the target network namespace.\nIf not provided, the default network namespace is used."
                                      type: "string"
                                    pods:
                                      description: "pods is a required field and indicates the target pods. To select all pods\nuse the standard metav1.LabelSelector semantics and make it empty."
                                      properties:
                                        matchExpressions:
                                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                          items:
                                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                                            properties:
                                              key:
                                                description: "key is the label key that the selector applies to."
                                                type: "string"
                                              operator:
                                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                                type: "string"
                                              values:
                                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                                items:
                                                  type: "string"
                                                type: "array"
                                                x-kubernetes-list-type: "atomic"
                                            required:
                                              - "key"
                                              - "operator"
                                            type: "object"
                                          type: "array"
                                          x-kubernetes-list-type: "atomic"
                                        matchLabels:
                                          additionalProperties:
                                            type: "string"
                                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                          type: "object"
                                      type: "object"
                                      x-kubernetes-map-type: "atomic"
                                  required:
                                    - "pods"
                                  type: "object"
                                priority:
                                  default: 1000
                                  description: "priority is an optional field and determines the execution order of the XDP\nprogram relative to other XDP programs attached to the same attachment\npoint. It must be a value between 0 and 1000, where lower values indicate\nhigher precedence. For XDP programs on the same attachment point with the\nsame priority, the most recently attached program has a lower precedence. If\nnot provided, priority will default to 1000."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                                proceedOn:
                                  default:
                                    - "Pass"
                                    - "DispatcherReturn"
                                  description: "proceedOn is an optional field and allows the user to call other XDP\nprograms in a chain, or not call the next program in a chain based on the\nexit code of an XDP program. Allowed values, which are the possible exit\ncodes from an XDP eBPF program, are:\n  Aborted, Drop, Pass, TX, ReDirect, DispatcherReturn\n\n\nMultiple values are supported. Default is Pass and DispatcherReturn. So\nusing the default values, if an XDP program returns Pass, the next XDP\nprogram in the chain will be called. If an XDP program returns Drop, the\nnext XDP program in the chain will NOT be called."
                                  items:
                                    enum:
                                      - "Aborted"
                                      - "Drop"
                                      - "Pass"
                                      - "TX"
                                      - "ReDirect"
                                      - "DispatcherReturn"
                                    type: "string"
                                  type: "array"
                              required:
                                - "interfaceSelector"
                              type: "object"
                            type: "array"
                        type: "object"
                    required:
                      - "name"
                      - "type"
                    type: "object"
                    x-kubernetes-validations:
                      - message: "xdp configuration is required when type is xdp, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'XDP' ?  has(self.xdp) : !has(self.xdp)"
                      - message: "tc configuration is required when type is tc, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'TC' ?  has(self.tc) : !has(self.tc)"
                      - message: "tcx configuration is required when type is tcx, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'TCX' ?  has(self.tcx) : !has(self.tcx)"
                      - message: "fentry configuration is required when type is fentry, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'FEntry' ?  has(self.fentry) : !has(self.fentry)"
                      - message: "fexit configuration is required when type is fexit, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'FExit' ?  has(self.fexit) : !has(self.fexit)"
                      - message: "kprobe configuration is required when type is kprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'KProbe' ?  has(self.kprobe) : !has(self.kprobe)"
                      - message: "kretprobe configuration is required when type is kretprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'KRetProbe' ?  has(self.kretprobe) : !has(self.kretprobe)"
                      - message: "uprobe configuration is required when type is uprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'UProbe' ?  has(self.uprobe) : !has(self.uprobe)"
                      - message: "uretprobe configuration is required when type is uretprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'URetProbe' ?  has(self.uretprobe) : !has(self.uretprobe)"
                      - message: "tracepoint configuration is required when type is tracepoint, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'TracePoint' ?  has(self.tracepoint) : !has(self.tracepoint)"
                  minItems: 1
                  type: "array"
              required:
                - "byteCode"
                - "nodeSelector"
                - "programs"
              type: "object"
            status:
              description: "status reflects the status of a BPF Application and indicates if all the\neBPF programs for a given instance loaded successfully or not."
              properties:
                conditions:
                  description: "conditions contains the summary state for all eBPF programs defined in the\nBPF Application instance for all the Kubernetes nodes in the cluster."
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."
                        format: "date-time"
                        type: "string"
                      message:
                        description: "message is a human readable message indicating details about the transition.\nThis may be an empty string."
                        maxLength: 32768
                        type: "string"
                      observedGeneration:
                        description: "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance."
                        format: "int64"
                        minimum: 0.0
                        type: "integer"
                      reason:
                        description: "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                        maxLength: 1024
                        minLength: 1
                        pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        type: "string"
                      status:
                        description: "status of the condition, one of True, False, Unknown."
                        enum:
                          - "True"
                          - "False"
                          - "Unknown"
                        type: "string"
                      type:
                        description: "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                        maxLength: 316
                        pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        type: "string"
                    required:
                      - "lastTransitionTime"
                      - "message"
                      - "reason"
                      - "status"
                      - "type"
                    type: "object"
                  type: "array"
                  x-kubernetes-list-map-keys:
                    - "type"
                  x-kubernetes-list-type: "map"
              type: "object"
          type: "object"
      served: true
      storage: true
      subresources:
        status: {}
