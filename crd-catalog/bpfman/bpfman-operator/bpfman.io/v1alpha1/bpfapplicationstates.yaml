apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.15.0"
  name: "bpfapplicationstates.bpfman.io"
spec:
  group: "bpfman.io"
  names:
    kind: "BpfApplicationState"
    listKind: "BpfApplicationStateList"
    plural: "bpfapplicationstates"
    singular: "bpfapplicationstate"
  scope: "Namespaced"
  versions:
    - additionalPrinterColumns:
        - jsonPath: ".status.node"
          name: "Node"
          type: "string"
        - jsonPath: ".status.conditions[0].reason"
          name: "Status"
          type: "string"
        - jsonPath: ".metadata.creationTimestamp"
          name: "Age"
          type: "date"
      name: "v1alpha1"
      schema:
        openAPIV3Schema:
          description: "BpfApplicationState contains the state of a BpfApplication instance for a\ngiven Kubernetes node. When a user creates a BpfApplication instance, bpfman\ncreates a BpfApplicationState instance for each node in a Kubernetes\ncluster."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            status:
              description: "status reflects the status of a BpfApplication instance for the given node.\nappLoadStatus and conditions provide an overall status for the given node,\nwhile each item in the programs list provides a per eBPF program status for\nthe given node."
              properties:
                appLoadStatus:
                  description: "appLoadStatus reflects the status of loading the eBPF application on the\ngiven node.\n\n\nNotLoaded is a temporary state that is assigned when a\nClusterBpfApplicationState is created and the initial reconcile is being\nprocessed.\n\n\nLoadSuccess is returned if all the programs have been loaded with no\nerrors.\n\n\nLoadError is returned if one or more programs encountered an error and\nwere not loaded.\n\n\nNotSelected is returned if this application did not select to run on this\nKubernetes node.\n\n\nUnloadSuccess is returned when all the programs were successfully\nunloaded.\n\n\nUnloadError is returned if one or more programs encountered an error when\nbeing unloaded."
                  type: "string"
                conditions:
                  description: "conditions contains the summary state of the BpfApplication for the given\nKubernetes node. If one or more programs failed to load or attach to the\ndesignated attachment point, the condition will report the error. If more\nthan one error has occurred, condition will contain the first error\nencountered."
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."
                        format: "date-time"
                        type: "string"
                      message:
                        description: "message is a human readable message indicating details about the transition.\nThis may be an empty string."
                        maxLength: 32768
                        type: "string"
                      observedGeneration:
                        description: "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance."
                        format: "int64"
                        minimum: 0.0
                        type: "integer"
                      reason:
                        description: "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                        maxLength: 1024
                        minLength: 1
                        pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        type: "string"
                      status:
                        description: "status of the condition, one of True, False, Unknown."
                        enum:
                          - "True"
                          - "False"
                          - "Unknown"
                        type: "string"
                      type:
                        description: "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                        maxLength: 316
                        pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        type: "string"
                    required:
                      - "lastTransitionTime"
                      - "message"
                      - "reason"
                      - "status"
                      - "type"
                    type: "object"
                  type: "array"
                  x-kubernetes-list-map-keys:
                    - "type"
                  x-kubernetes-list-type: "map"
                node:
                  description: "node is the name of the Kubernets node for this BpfApplicationState."
                  type: "string"
                programs:
                  description: "programs is a list of eBPF programs contained in the parent BpfApplication\ninstance. Each entry in the list contains the derived program attributes as\nwell as the attach status for each program on the given Kubernetes node."
                  items:
                    properties:
                      name:
                        description: "name is the name of the function that is the entry point for the eBPF\nprogram"
                        type: "string"
                      programId:
                        description: "programId is the id of the program in the kernel.  Not set until the\nprogram is loaded."
                        format: "int32"
                        type: "integer"
                      programLinkStatus:
                        description: "programLinkStatus reflects whether all links requested for the program\nare in the correct state."
                        type: "string"
                      tc:
                        description: "tc contains the attachment data for a TC program when type is set to TC."
                        properties:
                          links:
                            description: "links is a list of attachment points for the TC program. Each entry in the\nlist includes a linkStatus, which indicates if the attachment was successful\nor not on this node, a linkId, which is the kernel ID for the link if\nsuccessfully attached, and other attachment specific data."
                            items:
                              properties:
                                direction:
                                  description: "direction is the provisioned direction of traffic, Ingress or Egress, the TC\nprogram should be attached for a given network device."
                                  enum:
                                    - "Ingress"
                                    - "Egress"
                                  type: "string"
                                interfaceName:
                                  description: "interfaceName is the name of the interface the TC program should be\nattached."
                                  type: "string"
                                linkId:
                                  description: "linkId is an identifier for the link assigned by bpfman. This field is\nempty until the program is successfully attached and bpfman returns the\nid."
                                  format: "int32"
                                  type: "integer"
                                linkStatus:
                                  description: "linkStatus reflects whether the attachment has been reconciled\nsuccessfully, and if not, why."
                                  type: "string"
                                netnsPath:
                                  description: "netnsPath is the path to the network namespace inside of which the TC\nprogram should be attached."
                                  type: "string"
                                priority:
                                  description: "priority is the provisioned priority of the TC program in relation to other\nprograms of the same type with the same attach point. It is a value from 0\nto 1000, where lower values have higher precedence."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                                proceedOn:
                                  description: "proceedOn is the provisioned list of proceedOn values. proceedOn allows the\nuser to call other TC programs in a chain, or not call the next program in a\nchain based on the exit code of a TC program .Multiple values are supported."
                                  items:
                                    enum:
                                      - "UnSpec"
                                      - "OK"
                                      - "ReClassify"
                                      - "Shot"
                                      - "Pipe"
                                      - "Stolen"
                                      - "Queued"
                                      - "Repeat"
                                      - "ReDirect"
                                      - "Trap"
                                      - "DispatcherReturn"
                                    type: "string"
                                  type: "array"
                                shouldAttach:
                                  description: "shouldAttach reflects whether the attachment should exist."
                                  type: "boolean"
                                uuid:
                                  description: "uuid is an Unique identifier for the attach point assigned by bpfman agent."
                                  type: "string"
                              required:
                                - "direction"
                                - "interfaceName"
                                - "linkStatus"
                                - "netnsPath"
                                - "priority"
                                - "proceedOn"
                                - "shouldAttach"
                                - "uuid"
                              type: "object"
                            type: "array"
                        type: "object"
                      tcx:
                        description: "tcx contains the attachment data for a TCX program when type is set to TCX."
                        properties:
                          links:
                            description: "links is a list of attachment points for the TCX program. Each entry in the\nlist includes a linkStatus, which indicates if the attachment was successful\nor not on this node, a linkId, which is the kernel ID for the link if\nsuccessfully attached, and other attachment specific data."
                            items:
                              properties:
                                direction:
                                  description: "direction is the provisioned direction of traffic, Ingress or Egress, the\nTCX program should be attached for a given network device."
                                  enum:
                                    - "Ingress"
                                    - "Egress"
                                  type: "string"
                                interfaceName:
                                  description: "interfaceName is the name of the interface the TCX program should be\nattached."
                                  type: "string"
                                linkId:
                                  description: "linkId is an identifier for the link assigned by bpfman. This field is\nempty until the program is successfully attached and bpfman returns the\nid."
                                  format: "int32"
                                  type: "integer"
                                linkStatus:
                                  description: "linkStatus reflects whether the attachment has been reconciled\nsuccessfully, and if not, why."
                                  type: "string"
                                netnsPath:
                                  description: "netnsPath is the path to the network namespace inside of which the TCX\nprogram should be attached."
                                  type: "string"
                                priority:
                                  description: "priority is the provisioned priority of the TCX program in relation to other\nprograms of the same type with the same attach point. It is a value from 0\nto 1000, where lower values have higher precedence."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                                shouldAttach:
                                  description: "shouldAttach reflects whether the attachment should exist."
                                  type: "boolean"
                                uuid:
                                  description: "uuid is an Unique identifier for the attach point assigned by bpfman agent."
                                  type: "string"
                              required:
                                - "direction"
                                - "interfaceName"
                                - "linkStatus"
                                - "netnsPath"
                                - "priority"
                                - "shouldAttach"
                                - "uuid"
                              type: "object"
                            type: "array"
                        type: "object"
                      type:
                        description: "type specifies the provisioned eBPF program type for this program entry.\nType will be one of:\n  TC, TCX, UProbe, URetProbe, XDP\n\n\nWhen set to TC, the tc object will be populated with the eBPF program data\nassociated with a TC program.\n\n\nWhen set to TCX, the tcx object will be populated with the eBPF program\ndata associated with a TCX program.\n\n\nWhen set to UProbe, the uprobe object will be populated with the eBPF\nprogram data associated with a UProbe program.\n\n\nWhen set to URetProbe, the uretprobe object will be populated with the eBPF\nprogram data associated with a URetProbe program.\n\n\nWhen set to XDP, the xdp object will be populated with the eBPF program data\nassociated with a URetProbe program."
                        enum:
                          - "XDP"
                          - "TC"
                          - "TCX"
                          - "UProbe"
                          - "URetProbe"
                        type: "string"
                      uprobe:
                        description: "uprobe contains the attachment data for a UProbe program when type is set to\nUProbe."
                        properties:
                          links:
                            description: "links is a list of attachment points for the UProbe program. Each entry in\nthe list includes a linkStatus, which indicates if the attachment was\nsuccessful or not on this node, a linkId, which is the kernel ID for the\nlink if successfully attached, and other attachment specific data."
                            items:
                              properties:
                                containerPid:
                                  description: "If containers is provisioned in the BpfApplication instance, containerPid is\nthe derived PID of the container the UProbe or URetProbe this attachment\npoint is attached."
                                  format: "int32"
                                  type: "integer"
                                function:
                                  description: "function is the provisioned name of the user-space function the UProbe\nprogram should be attached."
                                  type: "string"
                                linkId:
                                  description: "linkId is an identifier for the link assigned by bpfman. This field is\nempty until the program is successfully attached and bpfman returns the\nid."
                                  format: "int32"
                                  type: "integer"
                                linkStatus:
                                  description: "linkStatus reflects whether the attachment has been reconciled\nsuccessfully, and if not, why."
                                  type: "string"
                                offset:
                                  default: 0
                                  description: "offset is the provisioned offset, whose value is added to the address of the\nattachment point function."
                                  format: "int64"
                                  type: "integer"
                                pid:
                                  description: "pid is the provisioned pid. If set, pid limits the execution of the UProbe\nor URetProbe to the provided process identification number (PID). If pid is\nnot provided, the UProbe or URetProbe executes for all PIDs."
                                  format: "int32"
                                  type: "integer"
                                shouldAttach:
                                  description: "shouldAttach reflects whether the attachment should exist."
                                  type: "boolean"
                                target:
                                  description: "target is the provisioned user-space library name or the absolute path to a\nbinary or library."
                                  type: "string"
                                uuid:
                                  description: "uuid is an Unique identifier for the attach point assigned by bpfman agent."
                                  type: "string"
                              required:
                                - "linkStatus"
                                - "shouldAttach"
                                - "target"
                                - "uuid"
                              type: "object"
                            type: "array"
                        type: "object"
                      uretprobe:
                        description: "uretprobe contains the attachment data for a URetProbe program when type is\nset to URetProbe."
                        properties:
                          links:
                            description: "links is a list of attachment points for the UProbe program. Each entry in\nthe list includes a linkStatus, which indicates if the attachment was\nsuccessful or not on this node, a linkId, which is the kernel ID for the\nlink if successfully attached, and other attachment specific data."
                            items:
                              properties:
                                containerPid:
                                  description: "If containers is provisioned in the BpfApplication instance, containerPid is\nthe derived PID of the container the UProbe or URetProbe this attachment\npoint is attached."
                                  format: "int32"
                                  type: "integer"
                                function:
                                  description: "function is the provisioned name of the user-space function the UProbe\nprogram should be attached."
                                  type: "string"
                                linkId:
                                  description: "linkId is an identifier for the link assigned by bpfman. This field is\nempty until the program is successfully attached and bpfman returns the\nid."
                                  format: "int32"
                                  type: "integer"
                                linkStatus:
                                  description: "linkStatus reflects whether the attachment has been reconciled\nsuccessfully, and if not, why."
                                  type: "string"
                                offset:
                                  default: 0
                                  description: "offset is the provisioned offset, whose value is added to the address of the\nattachment point function."
                                  format: "int64"
                                  type: "integer"
                                pid:
                                  description: "pid is the provisioned pid. If set, pid limits the execution of the UProbe\nor URetProbe to the provided process identification number (PID). If pid is\nnot provided, the UProbe or URetProbe executes for all PIDs."
                                  format: "int32"
                                  type: "integer"
                                shouldAttach:
                                  description: "shouldAttach reflects whether the attachment should exist."
                                  type: "boolean"
                                target:
                                  description: "target is the provisioned user-space library name or the absolute path to a\nbinary or library."
                                  type: "string"
                                uuid:
                                  description: "uuid is an Unique identifier for the attach point assigned by bpfman agent."
                                  type: "string"
                              required:
                                - "linkStatus"
                                - "shouldAttach"
                                - "target"
                                - "uuid"
                              type: "object"
                            type: "array"
                        type: "object"
                      xdp:
                        description: "xdp contains the attachment data for an XDP program when type is set to XDP."
                        properties:
                          links:
                            description: "links is a list of attachment points for the XDP program. Each entry in the\nlist includes a linkStatus, which indicates if the attachment was successful\nor not on this node, a linkId, which is the kernel ID for the link if\nsuccessfully attached, and other attachment specific data."
                            items:
                              properties:
                                interfaceName:
                                  description: "interfaceName is the name of the interface the XDP program should be\nattached."
                                  type: "string"
                                linkId:
                                  description: "linkId is an identifier for the link assigned by bpfman. This field is\nempty until the program is successfully attached and bpfman returns the\nid."
                                  format: "int32"
                                  type: "integer"
                                linkStatus:
                                  description: "linkStatus reflects whether the attachment has been reconciled\nsuccessfully, and if not, why."
                                  type: "string"
                                netnsPath:
                                  description: "netnsPath is the path to the network namespace inside of which the XDP\nprogram should be attached."
                                  type: "string"
                                priority:
                                  description: "priority is the provisioned priority of the XDP program in relation to other\nprograms of the same type with the same attach point. It is a value from 0\nto 1000, where lower values have higher precedence."
                                  format: "int32"
                                  maximum: 1000.0
                                  minimum: 0.0
                                  type: "integer"
                                proceedOn:
                                  description: "proceedOn is the provisioned list of proceedOn values. proceedOn allows the\nuser to call other TC programs in a chain, or not call the next program in a\nchain based on the exit code of a TC program .Multiple values are supported."
                                  items:
                                    enum:
                                      - "Aborted"
                                      - "Drop"
                                      - "Pass"
                                      - "TX"
                                      - "ReDirect"
                                      - "DispatcherReturn"
                                    type: "string"
                                  type: "array"
                                shouldAttach:
                                  description: "shouldAttach reflects whether the attachment should exist."
                                  type: "boolean"
                                uuid:
                                  description: "uuid is an Unique identifier for the attach point assigned by bpfman agent."
                                  type: "string"
                              required:
                                - "interfaceName"
                                - "linkStatus"
                                - "netnsPath"
                                - "priority"
                                - "proceedOn"
                                - "shouldAttach"
                                - "uuid"
                              type: "object"
                            type: "array"
                        type: "object"
                    required:
                      - "name"
                      - "programLinkStatus"
                      - "type"
                    type: "object"
                    x-kubernetes-validations:
                      - message: "xdp configuration is required when type is xdp, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'XDP' ?  has(self.xdp) : !has(self.xdp)"
                      - message: "tc configuration is required when type is tc, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'TC' ?  has(self.tc) : !has(self.tc)"
                      - message: "tcx configuration is required when type is TCX, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'TCX' ?  has(self.tcx) : !has(self.tcx)"
                      - message: "uprobe configuration is required when type is uprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'UProbe' ?  has(self.uprobe) : !has(self.uprobe)"
                      - message: "uretprobe configuration is required when type is uretprobe, and forbidden otherwise"
                        rule: "has(self.type) && self.type == 'URetProbe' ?  has(self.uretprobe) : !has(self.uretprobe)"
                  type: "array"
                updateCount:
                  description: "UpdateCount tracks the number of times the BpfApplicationState object has\nbeen updated. The bpfman agent initializes it to 1 when it creates the\nobject, and then increments it before each subsequent update. It serves\nas a lightweight sequence number to verify that the API server is serving\nthe most recent version of the object before beginning a new Reconcile\noperation."
                  format: "int64"
                  type: "integer"
              required:
                - "appLoadStatus"
                - "node"
                - "updateCount"
              type: "object"
          type: "object"
      served: true
      storage: true
      subresources:
        status: {}
