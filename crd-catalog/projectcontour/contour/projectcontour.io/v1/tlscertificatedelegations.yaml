apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.15.0"
  name: "tlscertificatedelegations.projectcontour.io"
spec:
  group: "projectcontour.io"
  names:
    kind: "TLSCertificateDelegation"
    listKind: "TLSCertificateDelegationList"
    plural: "tlscertificatedelegations"
    shortNames:
      - "tlscerts"
    singular: "tlscertificatedelegation"
  preserveUnknownFields: false
  scope: "Namespaced"
  versions:
    - name: "v1"
      schema:
        openAPIV3Schema:
          description: "TLSCertificateDelegation is an TLS Certificate Delegation CRD specification.\nSee design/tls-certificate-delegation.md for details."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            spec:
              description: "TLSCertificateDelegationSpec defines the spec of the CRD"
              properties:
                delegations:
                  items:
                    description: "CertificateDelegation maps the authority to reference a secret\nin the current namespace to a set of namespaces."
                    properties:
                      secretName:
                        description: "required, the name of a secret in the current namespace."
                        type: "string"
                      targetNamespaces:
                        description: "required, the namespaces the authority to reference the\nsecret will be delegated to.\nIf TargetNamespaces is nil or empty, the CertificateDelegation'\nis ignored. If the TargetNamespace list contains the character, \"*\"\nthe secret will be delegated to all namespaces."
                        items:
                          type: "string"
                        type: "array"
                    required:
                      - "secretName"
                      - "targetNamespaces"
                    type: "object"
                  type: "array"
              required:
                - "delegations"
              type: "object"
            status:
              description: "TLSCertificateDelegationStatus allows for the status of the delegation\nto be presented to the user."
              properties:
                conditions:
                  description: "Conditions contains information about the current status of the HTTPProxy,\nin an upstream-friendly container.\nContour will update a single condition, `Valid`, that is in normal-true polarity.\nThat is, when `currentStatus` is `valid`, the `Valid` condition will be `status: true`,\nand vice versa.\nContour will leave untouched any other Conditions set in this block,\nin case some other controller wants to add a Condition.\nIf you are another controller owner and wish to add a condition, you *should*\nnamespace your condition with a label, like `controller.domain.com\\ConditionName`."
                  items:
                    description: "DetailedCondition is an extension of the normal Kubernetes conditions, with two extra\nfields to hold sub-conditions, which provide more detailed reasons for the state (True or False)\nof the condition.\n`errors` holds information about sub-conditions which are fatal to that condition and render its state False.\n`warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.\nRemember that Conditions have a type, a status, and a reason.\nThe type is the type of the condition, the most important one in this CRD set is `Valid`.\n`Valid` is a positive-polarity condition: when it is `status: true` there are no problems.\nIn more detail, `status: true` means that the object is has been ingested into Contour with no errors.\n`warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`\nslice in this case.\n`Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.\nThe details of the errors will be present under the `errors` field. There must be at least one error in the `errors`\nslice if `status` is `false`.\nFor DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.\nWhen they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.\nWhen they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.\nIn either case, there may be entries in the `warnings` slice.\nRegardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason\n(if there is one and only one entry in total across both the `errors` and `warnings` slices), or\n`MultipleReasons` if there is more than one entry."
                    properties:
                      errors:
                        description: "Errors contains a slice of relevant error subconditions for this object.\nSubconditions are expected to appear when relevant (when there is a error), and disappear when not relevant.\nAn empty slice here indicates no errors."
                        items:
                          description: "SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.\nIt contains a subset of the Condition fields.\nIt is intended for warnings and errors, so `type` names should use abnormal-true polarity,\nthat is, they should be of the form \"ErrorPresent: true\".\nThe expected lifecycle for these errors is that they should only be present when the error or warning is,\nand should be removed when they are not relevant."
                          properties:
                            message:
                              description: "Message is a human readable message indicating details about the transition.\nThis may be an empty string."
                              maxLength: 32768
                              type: "string"
                            reason:
                              description: "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                              maxLength: 1024
                              minLength: 1
                              pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                              type: "string"
                            status:
                              description: "Status of the condition, one of True, False, Unknown."
                              enum:
                                - "True"
                                - "False"
                                - "Unknown"
                              type: "string"
                            type:
                              description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.\nThis must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                              maxLength: 316
                              pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              type: "string"
                          required:
                            - "message"
                            - "reason"
                            - "status"
                            - "type"
                          type: "object"
                        type: "array"
                      lastTransitionTime:
                        description: "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."
                        format: "date-time"
                        type: "string"
                      message:
                        description: "message is a human readable message indicating details about the transition.\nThis may be an empty string."
                        maxLength: 32768
                        type: "string"
                      observedGeneration:
                        description: "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance."
                        format: "int64"
                        minimum: 0.0
                        type: "integer"
                      reason:
                        description: "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                        maxLength: 1024
                        minLength: 1
                        pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        type: "string"
                      status:
                        description: "status of the condition, one of True, False, Unknown."
                        enum:
                          - "True"
                          - "False"
                          - "Unknown"
                        type: "string"
                      type:
                        description: "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                        maxLength: 316
                        pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        type: "string"
                      warnings:
                        description: "Warnings contains a slice of relevant warning subconditions for this object.\nSubconditions are expected to appear when relevant (when there is a warning), and disappear when not relevant.\nAn empty slice here indicates no warnings."
                        items:
                          description: "SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.\nIt contains a subset of the Condition fields.\nIt is intended for warnings and errors, so `type` names should use abnormal-true polarity,\nthat is, they should be of the form \"ErrorPresent: true\".\nThe expected lifecycle for these errors is that they should only be present when the error or warning is,\nand should be removed when they are not relevant."
                          properties:
                            message:
                              description: "Message is a human readable message indicating details about the transition.\nThis may be an empty string."
                              maxLength: 32768
                              type: "string"
                            reason:
                              description: "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty."
                              maxLength: 1024
                              minLength: 1
                              pattern: "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                              type: "string"
                            status:
                              description: "Status of the condition, one of True, False, Unknown."
                              enum:
                                - "True"
                                - "False"
                                - "Unknown"
                              type: "string"
                            type:
                              description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.\nThis must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                              maxLength: 316
                              pattern: "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              type: "string"
                          required:
                            - "message"
                            - "reason"
                            - "status"
                            - "type"
                          type: "object"
                        type: "array"
                    required:
                      - "lastTransitionTime"
                      - "message"
                      - "reason"
                      - "status"
                      - "type"
                    type: "object"
                  type: "array"
                  x-kubernetes-list-map-keys:
                    - "type"
                  x-kubernetes-list-type: "map"
              type: "object"
          required:
            - "metadata"
            - "spec"
          type: "object"
      served: true
      storage: true
      subresources:
        status: {}
