apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    config.couchbase.com/version: "2.7.0"
    controller-gen.kubebuilder.io/version: "v0.14.0"
  name: "couchbaseephemeralbuckets.couchbase.com"
spec:
  group: "couchbase.com"
  names:
    kind: "CouchbaseEphemeralBucket"
    listKind: "CouchbaseEphemeralBucketList"
    plural: "couchbaseephemeralbuckets"
    singular: "couchbaseephemeralbucket"
  scope: "Namespaced"
  versions:
    - additionalPrinterColumns:
        - jsonPath: ".spec.memoryQuota"
          name: "memory quota"
          type: "string"
        - jsonPath: ".spec.replicas"
          name: "replicas"
          type: "integer"
        - jsonPath: ".spec.ioPriority"
          name: "io priority"
          type: "string"
        - jsonPath: ".spec.evictionPolicy"
          name: "eviction policy"
          type: "string"
        - jsonPath: ".spec.conflictResolution"
          name: "conflict resolution"
          type: "string"
        - jsonPath: ".metadata.creationTimestamp"
          name: "age"
          type: "date"
      name: "v2"
      schema:
        openAPIV3Schema:
          description: "The CouchbaseEphemeralBucket resource defines a set of documents in Couchbase server.\nA Couchbase client connects to and operates on a bucket, which provides independent\nmanagement of a set documents and a security boundary for role based access control.\nA CouchbaseEphemeralBucket provides in-memory only storage and replication for documents\ncontained by it."
          properties:
            apiVersion:
              description: "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: "string"
            kind:
              description: "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: "string"
            metadata:
              type: "object"
            spec:
              default: {}
              description: "CouchbaseEphemeralBucketSpec is the specification for an ephemeral Couchbase bucket\nresource, and allows the bucket to be customized."
              properties:
                compressionMode:
                  default: "passive"
                  description: "CompressionMode defines how Couchbase server handles document compression.  When\noff, documents are stored in memory, and transferred to the client uncompressed.\nWhen passive, documents are stored compressed in memory, and transferred to the\nclient compressed when requested.  When active, documents are stored compresses\nin memory and when transferred to the client.  This field must be \"off\", \"passive\"\nor \"active\", defaulting to \"passive\".  Be aware \"off\" in YAML 1.2 is a boolean, so\nmust be quoted as a string in configuration files."
                  enum:
                    - "off"
                    - "passive"
                    - "active"
                  type: "string"
                conflictResolution:
                  default: "seqno"
                  description: "ConflictResolution defines how XDCR handles concurrent write conflicts.  Sequence number\nbased resolution selects the document with the highest sequence number as the most recent.\nTimestamp based resolution selects the document that was written to most recently as the\nmost recent.  This field must be \"seqno\" (sequence based), or \"lww\" (timestamp based),\ndefaulting to \"seqno\"."
                  enum:
                    - "seqno"
                    - "lww"
                  type: "string"
                enableFlush:
                  description: "EnableFlush defines whether a client can delete all documents in a bucket.\nThis field defaults to false."
                  type: "boolean"
                evictionPolicy:
                  default: "noEviction"
                  description: "EvictionPolicy controls how Couchbase handles memory exhaustion.  No eviction means\nthat Couchbase server will make this bucket read-only when memory is exhausted in\norder to avoid data loss.  NRU eviction will delete documents that haven't been used\nrecently in order to free up memory. This field must be \"noEviction\" or \"nruEviction\",\ndefaulting to \"noEviction\"."
                  enum:
                    - "noEviction"
                    - "nruEviction"
                  type: "string"
                ioPriority:
                  default: "low"
                  description: "IOPriority controls how many threads a bucket has, per pod, to process reads and writes.\nThis field must be \"low\" or \"high\", defaulting to \"low\".  Modification of this field will\ncause a temporary service disruption as threads are restarted."
                  enum:
                    - "low"
                    - "high"
                  type: "string"
                maxTTL:
                  description: "MaxTTL defines how long a document is permitted to exist for, without\nmodification, until it is automatically deleted.  This is a default and maximum\ntime-to-live and may be set to a lower value by the client.  If the client specifies\na higher value, then it is truncated to the maximum durability.  Documents are\nremoved by Couchbase, after they have expired, when either accessed, the expiry\npager is run, or the bucket is compacted.  When set to 0, then documents are not\nexpired by default.  This field must be a duration in the range 0-2147483648s,\ndefaulting to 0.  More info:\nhttps://golang.org/pkg/time/#ParseDuration"
                  type: "string"
                memoryQuota:
                  anyOf:
                    - type: "integer"
                    - type: "string"
                  default: "100Mi"
                  description: "MemoryQuota is a memory limit to the size of a bucket.  When this limit is exceeded,\ndocuments will be evicted from memory defined by the eviction policy.  The memory quota\nis defined per Couchbase pod running the data service.  This field defaults to, and must\nbe greater than or equal to 100Mi.  More info:\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes"
                  pattern: "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                  type: "string"
                  x-kubernetes-int-or-string: true
                minimumDurability:
                  description: "MiniumumDurability defines how durable a document write is by default, and can\nbe made more durable by the client.  This feature enables ACID transactions.\nWhen none, Couchbase server will respond when the document is in memory, it will\nbecome eventually consistent across the cluster.  When majority, Couchbase server will\nrespond when the document is replicated to at least half of the pods running the\ndata service in the cluster.  This field must be either \"none\" or \"majority\",\ndefaulting to \"none\"."
                  enum:
                    - "none"
                    - "majority"
                  type: "string"
                name:
                  description: "Name is the name of the bucket within Couchbase server.  By default the Operator\nwill use the `metadata.name` field to define the bucket name.  The `metadata.name`\nfield only supports a subset of the supported character set.  When specified, this\nfield overrides `metadata.name`.  Legal bucket names have a maximum length of 100\ncharacters and may be composed of any character from \"a-z\", \"A-Z\", \"0-9\" and \"-_%\\.\"."
                  maxLength: 100
                  pattern: "^[a-zA-Z0-9-_%\\.]{1,100}$"
                  type: "string"
                rank:
                  default: 0
                  description: "Rank determines the bucket’s place in the order in which the rebalance process\nhandles the buckets on the cluster. The higher a bucket’s assigned integer\n(in relation to the integers assigned other buckets), the sooner in the\nrebalance process the bucket is handled. This assignment of rank allows a\ncluster’s most mission-critical data to be rebalanced with top priority.\nThis option is only supported for Couchbase Server 7.6.0+."
                  maximum: 1000.0
                  minimum: 0.0
                  type: "integer"
                replicas:
                  default: 1
                  description: "Replicas defines how many copies of documents Couchbase server maintains.  This directly\naffects how fault tolerant a Couchbase cluster is.  With a single replica, the cluster\ncan tolerate one data pod going down and still service requests without data loss.  The\nnumber of replicas also affect memory use.  With a single replica, the effective memory\nquota for documents is halved, with two replicas it is one third.  The number of replicas\nmust be between 0 and 3, defaulting to 1."
                  maximum: 3.0
                  minimum: 0.0
                  type: "integer"
                scopes:
                  description: "Scopes defines whether the Operator manages scopes for the bucket or not, and\nthe set of scopes defined for the bucket."
                  properties:
                    managed:
                      description: "Managed defines whether scopes are managed for this bucket.\nThis field is `false` by default, and the Operator will take no actions that\nwill affect scopes and collections in this bucket.  The default scope and\ncollection will be present.  When set to `true`, the Operator will manage\nuser defined scopes, and optionally, their collections as defined by the\n`CouchbaseScope`, `CouchbaseScopeGroup`, `CouchbaseCollection` and\n`CouchbaseCollectionGroup` resource documentation.  If this field is set to\n`false` while the  already managed, then the Operator will leave whatever\nconfiguration is already present."
                      type: "boolean"
                    resources:
                      description: "Resources is an explicit list of named resources that will be considered\nfor inclusion in this bucket.  If a resource reference doesn't\nmatch a resource, then no error conditions are raised due to undefined\nresource creation ordering and eventual consistency."
                      items:
                        properties:
                          kind:
                            default: "CouchbaseScope"
                            description: "Kind indicates the kind of resource that is being referenced.  A scope\ncan only reference `CouchbaseScope` and `CouchbaseScopeGroup`\nresource kinds.  This field defaults to `CouchbaseScope` if not\nspecified."
                            enum:
                              - "CouchbaseScope"
                              - "CouchbaseScopeGroup"
                            type: "string"
                          name:
                            description: "Name is the name of the Kubernetes resource name that is being referenced.\nLegal scope names have a maximum length of 251\ncharacters and may be composed of any character from \"a-z\", \"A-Z\", \"0-9\" and \"_-%\"."
                            maxLength: 251
                            minLength: 1
                            pattern: "^[a-zA-Z0-9\\-][a-zA-Z0-9\\-%_]{0,250}$"
                            type: "string"
                        required:
                          - "name"
                        type: "object"
                      type: "array"
                    selector:
                      description: "Selector allows resources to be implicitly considered for inclusion in this\nbucket.  More info:\nhttps://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#labelselector-v1-meta"
                      properties:
                        matchExpressions:
                          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                          items:
                            description: "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values."
                            properties:
                              key:
                                description: "key is the label key that the selector applies to."
                                type: "string"
                              operator:
                                description: "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                                type: "string"
                              values:
                                description: "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
                                items:
                                  type: "string"
                                type: "array"
                            required:
                              - "key"
                              - "operator"
                            type: "object"
                          type: "array"
                        matchLabels:
                          additionalProperties:
                            type: "string"
                          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                          type: "object"
                      type: "object"
                      x-kubernetes-map-type: "atomic"
                  type: "object"
              type: "object"
          type: "object"
      served: true
      storage: true
